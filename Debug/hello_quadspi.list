
hello_quadspi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  08007990  08007990  00017990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800893c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000319c  20000070  080089ac  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000320c  080089ac  0002320c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001abc7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003241  00000000  00000000  0003ac67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d25d  00000000  00000000  0003dea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c68  00000000  00000000  0004b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001cc0  00000000  00000000  0004bd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000075db  00000000  00000000  0004da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000051d8  00000000  00000000  0005500b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005a1e3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003190  00000000  00000000  0005a260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007974 	.word	0x08007974

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007974 	.word	0x08007974

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f092 0f00 	teq	r2, #0
 80005ba:	bf14      	ite	ne
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e720      	b.n	8000414 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aedc 	beq.w	80003c2 <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6c1      	b.n	80003c2 <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_uldivmod>:
 8000c04:	b953      	cbnz	r3, 8000c1c <__aeabi_uldivmod+0x18>
 8000c06:	b94a      	cbnz	r2, 8000c1c <__aeabi_uldivmod+0x18>
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	2800      	cmpeq	r0, #0
 8000c0e:	bf1c      	itt	ne
 8000c10:	f04f 31ff 	movne.w	r1, #4294967295
 8000c14:	f04f 30ff 	movne.w	r0, #4294967295
 8000c18:	f000 b98e 	b.w	8000f38 <__aeabi_idiv0>
 8000c1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c24:	f000 f81a 	bl	8000c5c <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4770      	bx	lr

08000c34 <__popcountsi2>:
 8000c34:	0843      	lsrs	r3, r0, #1
 8000c36:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000c3a:	1ac0      	subs	r0, r0, r3
 8000c3c:	0883      	lsrs	r3, r0, #2
 8000c3e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000c42:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000c46:	4418      	add	r0, r3
 8000c48:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000c4c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000c50:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000c54:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000c58:	0e00      	lsrs	r0, r0, #24
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	468c      	mov	ip, r1
 8000c62:	460d      	mov	r5, r1
 8000c64:	4604      	mov	r4, r0
 8000c66:	9e08      	ldr	r6, [sp, #32]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d151      	bne.n	8000d10 <__udivmoddi4+0xb4>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	d96d      	bls.n	8000d4e <__udivmoddi4+0xf2>
 8000c72:	fab2 fe82 	clz	lr, r2
 8000c76:	f1be 0f00 	cmp.w	lr, #0
 8000c7a:	d00b      	beq.n	8000c94 <__udivmoddi4+0x38>
 8000c7c:	f1ce 0c20 	rsb	ip, lr, #32
 8000c80:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c84:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c88:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c8c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c90:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c94:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c98:	0c25      	lsrs	r5, r4, #16
 8000c9a:	fbbc f8fa 	udiv	r8, ip, sl
 8000c9e:	fa1f f987 	uxth.w	r9, r7
 8000ca2:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ca6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000caa:	fb08 f309 	mul.w	r3, r8, r9
 8000cae:	42ab      	cmp	r3, r5
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x6c>
 8000cb2:	19ed      	adds	r5, r5, r7
 8000cb4:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cb8:	f080 8123 	bcs.w	8000f02 <__udivmoddi4+0x2a6>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	f240 8120 	bls.w	8000f02 <__udivmoddi4+0x2a6>
 8000cc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc6:	443d      	add	r5, r7
 8000cc8:	1aed      	subs	r5, r5, r3
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cd0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd8:	fb00 f909 	mul.w	r9, r0, r9
 8000cdc:	45a1      	cmp	r9, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x98>
 8000ce0:	19e4      	adds	r4, r4, r7
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 810a 	bcs.w	8000efe <__udivmoddi4+0x2a2>
 8000cea:	45a1      	cmp	r9, r4
 8000cec:	f240 8107 	bls.w	8000efe <__udivmoddi4+0x2a2>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	eba4 0409 	sub.w	r4, r4, r9
 8000cf8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d061      	beq.n	8000dc6 <__udivmoddi4+0x16a>
 8000d02:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d06:	2300      	movs	r3, #0
 8000d08:	6034      	str	r4, [r6, #0]
 8000d0a:	6073      	str	r3, [r6, #4]
 8000d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0xc8>
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d054      	beq.n	8000dc2 <__udivmoddi4+0x166>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	f040 808e 	bne.w	8000e4a <__udivmoddi4+0x1ee>
 8000d2e:	42ab      	cmp	r3, r5
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xdc>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2d0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb65 0503 	sbc.w	r5, r5, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	46ac      	mov	ip, r5
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d03f      	beq.n	8000dc6 <__udivmoddi4+0x16a>
 8000d46:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b912      	cbnz	r2, 8000d56 <__udivmoddi4+0xfa>
 8000d50:	2701      	movs	r7, #1
 8000d52:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d56:	fab7 fe87 	clz	lr, r7
 8000d5a:	f1be 0f00 	cmp.w	lr, #0
 8000d5e:	d134      	bne.n	8000dca <__udivmoddi4+0x16e>
 8000d60:	1beb      	subs	r3, r5, r7
 8000d62:	0c3a      	lsrs	r2, r7, #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d6e:	0c25      	lsrs	r5, r4, #16
 8000d70:	fb02 3318 	mls	r3, r2, r8, r3
 8000d74:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d78:	fb0c f308 	mul.w	r3, ip, r8
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x134>
 8000d80:	19ed      	adds	r5, r5, r7
 8000d82:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x132>
 8000d88:	42ab      	cmp	r3, r5
 8000d8a:	f200 80d1 	bhi.w	8000f30 <__udivmoddi4+0x2d4>
 8000d8e:	4680      	mov	r8, r0
 8000d90:	1aed      	subs	r5, r5, r3
 8000d92:	b2a3      	uxth	r3, r4
 8000d94:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d98:	fb02 5510 	mls	r5, r2, r0, r5
 8000d9c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000da0:	fb0c fc00 	mul.w	ip, ip, r0
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x15c>
 8000da8:	19e4      	adds	r4, r4, r7
 8000daa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x15a>
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	f200 80b8 	bhi.w	8000f26 <__udivmoddi4+0x2ca>
 8000db6:	4618      	mov	r0, r3
 8000db8:	eba4 040c 	sub.w	r4, r4, ip
 8000dbc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc0:	e79d      	b.n	8000cfe <__udivmoddi4+0xa2>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1ce 0420 	rsb	r4, lr, #32
 8000dce:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dd2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dd6:	fa20 f804 	lsr.w	r8, r0, r4
 8000dda:	0c3a      	lsrs	r2, r7, #16
 8000ddc:	fa25 f404 	lsr.w	r4, r5, r4
 8000de0:	ea48 0803 	orr.w	r8, r8, r3
 8000de4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000de8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dec:	fb02 4411 	mls	r4, r2, r1, r4
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000df8:	fb01 f30c 	mul.w	r3, r1, ip
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1bc>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e0a:	f080 808a 	bcs.w	8000f22 <__udivmoddi4+0x2c6>
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	f240 8087 	bls.w	8000f22 <__udivmoddi4+0x2c6>
 8000e14:	3902      	subs	r1, #2
 8000e16:	443d      	add	r5, r7
 8000e18:	1aeb      	subs	r3, r5, r3
 8000e1a:	fa1f f588 	uxth.w	r5, r8
 8000e1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e22:	fb02 3310 	mls	r3, r2, r0, r3
 8000e26:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2a:	fb00 f30c 	mul.w	r3, r0, ip
 8000e2e:	42ab      	cmp	r3, r5
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x1e6>
 8000e32:	19ed      	adds	r5, r5, r7
 8000e34:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e38:	d26f      	bcs.n	8000f1a <__udivmoddi4+0x2be>
 8000e3a:	42ab      	cmp	r3, r5
 8000e3c:	d96d      	bls.n	8000f1a <__udivmoddi4+0x2be>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	1aeb      	subs	r3, r5, r3
 8000e44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e48:	e78f      	b.n	8000d6a <__udivmoddi4+0x10e>
 8000e4a:	f1c1 0720 	rsb	r7, r1, #32
 8000e4e:	fa22 f807 	lsr.w	r8, r2, r7
 8000e52:	408b      	lsls	r3, r1
 8000e54:	fa05 f401 	lsl.w	r4, r5, r1
 8000e58:	ea48 0303 	orr.w	r3, r8, r3
 8000e5c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e60:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e64:	40fd      	lsrs	r5, r7
 8000e66:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e6a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e6e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e72:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e76:	fa1f f883 	uxth.w	r8, r3
 8000e7a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e7e:	fb09 f408 	mul.w	r4, r9, r8
 8000e82:	42ac      	cmp	r4, r5
 8000e84:	fa02 f201 	lsl.w	r2, r2, r1
 8000e88:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x244>
 8000e8e:	18ed      	adds	r5, r5, r3
 8000e90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e94:	d243      	bcs.n	8000f1e <__udivmoddi4+0x2c2>
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	d941      	bls.n	8000f1e <__udivmoddi4+0x2c2>
 8000e9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9e:	441d      	add	r5, r3
 8000ea0:	1b2d      	subs	r5, r5, r4
 8000ea2:	fa1f fe8e 	uxth.w	lr, lr
 8000ea6:	fbb5 f0fc 	udiv	r0, r5, ip
 8000eaa:	fb0c 5510 	mls	r5, ip, r0, r5
 8000eae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000eb2:	fb00 f808 	mul.w	r8, r0, r8
 8000eb6:	45a0      	cmp	r8, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x26e>
 8000eba:	18e4      	adds	r4, r4, r3
 8000ebc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ec0:	d229      	bcs.n	8000f16 <__udivmoddi4+0x2ba>
 8000ec2:	45a0      	cmp	r8, r4
 8000ec4:	d927      	bls.n	8000f16 <__udivmoddi4+0x2ba>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	441c      	add	r4, r3
 8000eca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ece:	eba4 0408 	sub.w	r4, r4, r8
 8000ed2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ed6:	454c      	cmp	r4, r9
 8000ed8:	46c6      	mov	lr, r8
 8000eda:	464d      	mov	r5, r9
 8000edc:	d315      	bcc.n	8000f0a <__udivmoddi4+0x2ae>
 8000ede:	d012      	beq.n	8000f06 <__udivmoddi4+0x2aa>
 8000ee0:	b156      	cbz	r6, 8000ef8 <__udivmoddi4+0x29c>
 8000ee2:	ebba 030e 	subs.w	r3, sl, lr
 8000ee6:	eb64 0405 	sbc.w	r4, r4, r5
 8000eea:	fa04 f707 	lsl.w	r7, r4, r7
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431f      	orrs	r7, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	6037      	str	r7, [r6, #0]
 8000ef6:	6074      	str	r4, [r6, #4]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	4618      	mov	r0, r3
 8000f00:	e6f8      	b.n	8000cf4 <__udivmoddi4+0x98>
 8000f02:	4690      	mov	r8, r2
 8000f04:	e6e0      	b.n	8000cc8 <__udivmoddi4+0x6c>
 8000f06:	45c2      	cmp	sl, r8
 8000f08:	d2ea      	bcs.n	8000ee0 <__udivmoddi4+0x284>
 8000f0a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f0e:	eb69 0503 	sbc.w	r5, r9, r3
 8000f12:	3801      	subs	r0, #1
 8000f14:	e7e4      	b.n	8000ee0 <__udivmoddi4+0x284>
 8000f16:	4628      	mov	r0, r5
 8000f18:	e7d7      	b.n	8000eca <__udivmoddi4+0x26e>
 8000f1a:	4640      	mov	r0, r8
 8000f1c:	e791      	b.n	8000e42 <__udivmoddi4+0x1e6>
 8000f1e:	4681      	mov	r9, r0
 8000f20:	e7be      	b.n	8000ea0 <__udivmoddi4+0x244>
 8000f22:	4601      	mov	r1, r0
 8000f24:	e778      	b.n	8000e18 <__udivmoddi4+0x1bc>
 8000f26:	3802      	subs	r0, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	e745      	b.n	8000db8 <__udivmoddi4+0x15c>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xe6>
 8000f30:	f1a8 0802 	sub.w	r8, r8, #2
 8000f34:	443d      	add	r5, r7
 8000f36:	e72b      	b.n	8000d90 <__udivmoddi4+0x134>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_InitTick+0x3c>)
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_InitTick+0x40>)
{
 8000f42:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	7818      	ldrb	r0, [r3, #0]
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f4e:	6810      	ldr	r0, [r2, #0]
 8000f50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f54:	f000 f89c 	bl	8001090 <HAL_SYSTICK_Config>
 8000f58:	4604      	mov	r4, r0
 8000f5a:	b958      	cbnz	r0, 8000f74 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5c:	2d0f      	cmp	r5, #15
 8000f5e:	d809      	bhi.n	8000f74 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	4602      	mov	r2, r0
 8000f62:	4629      	mov	r1, r5
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f85e 	bl	8001028 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_InitTick+0x44>)
 8000f6e:	4620      	mov	r0, r4
 8000f70:	601d      	str	r5, [r3, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f76:	bd38      	pop	{r3, r4, r5, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_Init>:
{
 8000f84:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x30>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f96:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f9e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f82f 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff ffc8 	bl	8000f3c <HAL_InitTick>
  HAL_MspInit();
 8000fac:	f001 fa14 	bl	80023d8 <HAL_MspInit>
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	bd08      	pop	{r3, pc}
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x10>)
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_IncTick+0x14>)
 8000fbc:	6811      	ldr	r1, [r2, #0]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200030ac 	.word	0x200030ac
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <HAL_GetTick+0x8>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200030ac 	.word	0x200030ac

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff6 	bl	8000fd0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	bf1c      	itt	ne
 8000fe8:	4b05      	ldrne	r3, [pc, #20]	; (8001000 <HAL_Delay+0x24>)
 8000fea:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000fee:	bf18      	it	ne
 8000ff0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	f7ff ffed 	bl	8000fd0 <HAL_GetTick>
 8000ff6:	1b40      	subs	r0, r0, r5
 8000ff8:	4284      	cmp	r4, r0
 8000ffa:	d8fa      	bhi.n	8000ff2 <HAL_Delay+0x16>
  {
  }
}
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000

08001004 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001006:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001008:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	0200      	lsls	r0, r0, #8
 8001016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800101e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001020:	60d3      	str	r3, [r2, #12]
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b530      	push	{r4, r5, lr}
 800102c:	68dc      	ldr	r4, [r3, #12]
 800102e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001032:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	2b04      	cmp	r3, #4
 800103a:	bf28      	it	cs
 800103c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 0501 	mov.w	r5, #1
 8001044:	fa05 f303 	lsl.w	r3, r5, r3
 8001048:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104c:	bf8c      	ite	hi
 800104e:	3c03      	subhi	r4, #3
 8001050:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001052:	4019      	ands	r1, r3
 8001054:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001056:	fa05 f404 	lsl.w	r4, r5, r4
 800105a:	3c01      	subs	r4, #1
 800105c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800105e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	ea42 0201 	orr.w	r2, r2, r1
 8001064:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	bfad      	iteet	ge
 800106a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	f000 000f 	andlt.w	r0, r0, #15
 8001072:	4b06      	ldrlt	r3, [pc, #24]	; (800108c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	bfb5      	itete	lt
 800107a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001084:	bd30      	pop	{r4, r5, pc}
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000ed14 	.word	0xe000ed14

08001090 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	3801      	subs	r0, #1
 8001092:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001096:	d20a      	bcs.n	80010ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	21f0      	movs	r1, #240	; 0xf0
 80010a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80010c2:	f7ff ff85 	bl	8000fd0 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80010ca:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80010cc:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ce:	d006      	beq.n	80010de <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d4:	2300      	movs	r3, #0
 80010d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f022 0216 	bic.w	r2, r2, #22
 80010e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010f2:	b90a      	cbnz	r2, 80010f8 <HAL_DMA_Abort+0x3c>
 80010f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80010f6:	b11a      	cbz	r2, 8001100 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f022 0208 	bic.w	r2, r2, #8
 80010fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	f010 0001 	ands.w	r0, r0, #1
 8001110:	d109      	bne.n	8001126 <HAL_DMA_Abort+0x6a>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001112:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001114:	233f      	movs	r3, #63	; 0x3f
 8001116:	4093      	lsls	r3, r2
 8001118:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800111a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800111c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001120:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8001124:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001126:	f7ff ff53 	bl	8000fd0 <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	2805      	cmp	r0, #5
 800112e:	d9eb      	bls.n	8001108 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001130:	2320      	movs	r3, #32
 8001132:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001134:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8001136:	2300      	movs	r3, #0
 8001138:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800113c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001140:	bd70      	pop	{r4, r5, r6, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001148:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80012f0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4a65      	ldr	r2, [pc, #404]	; (80012e8 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80012f4 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001158:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800115a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800115e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001160:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8001162:	42ac      	cmp	r4, r5
 8001164:	f040 80ac 	bne.w	80012c0 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	684c      	ldr	r4, [r1, #4]
 800116a:	f024 0c10 	bic.w	ip, r4, #16
 800116e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8001172:	2e01      	cmp	r6, #1
 8001174:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001178:	d812      	bhi.n	80011a0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800117a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	2603      	movs	r6, #3
 800117e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001182:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001186:	68ce      	ldr	r6, [r1, #12]
 8001188:	fa06 f60e 	lsl.w	r6, r6, lr
 800118c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800118e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001190:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001192:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001196:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800119a:	409e      	lsls	r6, r3
 800119c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800119e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a0:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80011a2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a4:	fa06 f60e 	lsl.w	r6, r6, lr
 80011a8:	43f6      	mvns	r6, r6
 80011aa:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ae:	688f      	ldr	r7, [r1, #8]
 80011b0:	fa07 f70e 	lsl.w	r7, r7, lr
 80011b4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80011bc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011be:	d116      	bne.n	80011ee <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80011c0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80011c4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80011d4:	f04f 0c0f 	mov.w	ip, #15
 80011d8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80011dc:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e0:	690f      	ldr	r7, [r1, #16]
 80011e2:	fa07 f70b 	lsl.w	r7, r7, fp
 80011e6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80011ee:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f2:	f004 0703 	and.w	r7, r4, #3
 80011f6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80011fa:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80011fe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001200:	00e6      	lsls	r6, r4, #3
 8001202:	d55d      	bpl.n	80012c0 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001204:	f04f 0b00 	mov.w	fp, #0
 8001208:	f8cd b00c 	str.w	fp, [sp, #12]
 800120c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001210:	4e36      	ldr	r6, [pc, #216]	; (80012ec <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001216:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800121a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800121e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001222:	9703      	str	r7, [sp, #12]
 8001224:	9f03      	ldr	r7, [sp, #12]
 8001226:	f023 0703 	bic.w	r7, r3, #3
 800122a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800122e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001232:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800123e:	f04f 0e0f 	mov.w	lr, #15
 8001242:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001248:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124c:	d03f      	beq.n	80012ce <HAL_GPIO_Init+0x18a>
 800124e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001252:	42b0      	cmp	r0, r6
 8001254:	d03d      	beq.n	80012d2 <HAL_GPIO_Init+0x18e>
 8001256:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800125a:	42b0      	cmp	r0, r6
 800125c:	d03b      	beq.n	80012d6 <HAL_GPIO_Init+0x192>
 800125e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001262:	42b0      	cmp	r0, r6
 8001264:	d039      	beq.n	80012da <HAL_GPIO_Init+0x196>
 8001266:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800126a:	42b0      	cmp	r0, r6
 800126c:	d037      	beq.n	80012de <HAL_GPIO_Init+0x19a>
 800126e:	4548      	cmp	r0, r9
 8001270:	d037      	beq.n	80012e2 <HAL_GPIO_Init+0x19e>
 8001272:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001276:	42b0      	cmp	r0, r6
 8001278:	bf14      	ite	ne
 800127a:	2607      	movne	r6, #7
 800127c:	2606      	moveq	r6, #6
 800127e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001282:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001286:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001288:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800128a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001290:	bf0c      	ite	eq
 8001292:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001294:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001296:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001298:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800129e:	bf0c      	ite	eq
 80012a0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80012a2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80012a4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012ac:	bf0c      	ite	eq
 80012ae:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80012b0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80012b2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80012b8:	bf54      	ite	pl
 80012ba:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80012bc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80012be:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c0:	3301      	adds	r3, #1
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	f47f af49 	bne.w	800115a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80012c8:	b005      	add	sp, #20
 80012ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ce:	465e      	mov	r6, fp
 80012d0:	e7d5      	b.n	800127e <HAL_GPIO_Init+0x13a>
 80012d2:	2601      	movs	r6, #1
 80012d4:	e7d3      	b.n	800127e <HAL_GPIO_Init+0x13a>
 80012d6:	2602      	movs	r6, #2
 80012d8:	e7d1      	b.n	800127e <HAL_GPIO_Init+0x13a>
 80012da:	2603      	movs	r6, #3
 80012dc:	e7cf      	b.n	800127e <HAL_GPIO_Init+0x13a>
 80012de:	2604      	movs	r6, #4
 80012e0:	e7cd      	b.n	800127e <HAL_GPIO_Init+0x13a>
 80012e2:	2605      	movs	r6, #5
 80012e4:	e7cb      	b.n	800127e <HAL_GPIO_Init+0x13a>
 80012e6:	bf00      	nop
 80012e8:	40013c00 	.word	0x40013c00
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40021400 	.word	0x40021400

080012f8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80012f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012fc:	4604      	mov	r4, r0
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80012fe:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001300:	b138      	cbz	r0, 8001312 <QSPI_Config+0x1a>
 8001302:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001306:	bf1f      	itttt	ne
 8001308:	6a8b      	ldrne	r3, [r1, #40]	; 0x28
 800130a:	6825      	ldrne	r5, [r4, #0]
 800130c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8001310:	612b      	strne	r3, [r5, #16]
 8001312:	f101 0318 	add.w	r3, r1, #24
 8001316:	e893 0308 	ldmia.w	r3, {r3, r8, r9}
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800131a:	2b00      	cmp	r3, #0
 800131c:	d04f      	beq.n	80013be <QSPI_Config+0xc6>
 800131e:	6824      	ldr	r4, [r4, #0]
 8001320:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8001324:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 8001328:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 800132a:	680e      	ldr	r6, [r1, #0]
 800132c:	694d      	ldr	r5, [r1, #20]
 800132e:	4303      	orrs	r3, r0
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001330:	f1b9 0f00 	cmp.w	r9, #0
 8001334:	d023      	beq.n	800137e <QSPI_Config+0x86>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001336:	6888      	ldr	r0, [r1, #8]
 8001338:	61e0      	str	r0, [r4, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800133a:	4313      	orrs	r3, r2
 800133c:	6908      	ldr	r0, [r1, #16]
 800133e:	ea43 0309 	orr.w	r3, r3, r9
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001342:	f1b8 0f00 	cmp.w	r8, #0
 8001346:	d00e      	beq.n	8001366 <QSPI_Config+0x6e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001348:	ea43 0308 	orr.w	r3, r3, r8
 800134c:	ea43 030c 	orr.w	r3, r3, ip
 8001350:	ea43 030e 	orr.w	r3, r3, lr
 8001354:	433b      	orrs	r3, r7
 8001356:	4303      	orrs	r3, r0
 8001358:	68c8      	ldr	r0, [r1, #12]
 800135a:	4303      	orrs	r3, r0
 800135c:	4333      	orrs	r3, r6

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800135e:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
    {
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with only address ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001362:	6163      	str	r3, [r4, #20]
 8001364:	e01d      	b.n	80013a2 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001366:	ea43 030c 	orr.w	r3, r3, ip
 800136a:	ea43 030e 	orr.w	r3, r3, lr
 800136e:	433b      	orrs	r3, r7
 8001370:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001372:	4333      	orrs	r3, r6
 8001374:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
      {
        /*---- Command with only data phase ----*/
        if (cmd->DataMode != QSPI_DATA_NONE)
        {
          /* Configure QSPI: CCR register with all communications parameters */
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001378:	6163      	str	r3, [r4, #20]
 800137a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800137e:	f1b8 0f00 	cmp.w	r8, #0
 8001382:	d015      	beq.n	80013b0 <QSPI_Config+0xb8>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001384:	ea43 0002 	orr.w	r0, r3, r2
 8001388:	ea40 0008 	orr.w	r0, r0, r8
 800138c:	ea40 000c 	orr.w	r0, r0, ip
 8001390:	68cb      	ldr	r3, [r1, #12]
 8001392:	ea40 000e 	orr.w	r0, r0, lr
 8001396:	4338      	orrs	r0, r7
 8001398:	4318      	orrs	r0, r3
 800139a:	4330      	orrs	r0, r6
 800139c:	ea40 4085 	orr.w	r0, r0, r5, lsl #18
 80013a0:	6160      	str	r0, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80013a2:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80013a6:	d0e8      	beq.n	800137a <QSPI_Config+0x82>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80013a8:	684b      	ldr	r3, [r1, #4]
 80013aa:	61a3      	str	r3, [r4, #24]
 80013ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80013b0:	4313      	orrs	r3, r2
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80013b2:	ea43 030c 	orr.w	r3, r3, ip
 80013b6:	ea43 030e 	orr.w	r3, r3, lr
 80013ba:	433b      	orrs	r3, r7
 80013bc:	e7d9      	b.n	8001372 <QSPI_Config+0x7a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80013be:	f1b9 0f00 	cmp.w	r9, #0
 80013c2:	d01a      	beq.n	80013fa <QSPI_Config+0x102>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80013c4:	6824      	ldr	r4, [r4, #0]
 80013c6:	688b      	ldr	r3, [r1, #8]
 80013c8:	61e3      	str	r3, [r4, #28]
 80013ca:	ea40 0309 	orr.w	r3, r0, r9
 80013ce:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 80013d2:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 80013d6:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80013d8:	690e      	ldr	r6, [r1, #16]
 80013da:	694d      	ldr	r5, [r1, #20]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80013dc:	4313      	orrs	r3, r2
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	d0e6      	beq.n	80013b2 <QSPI_Config+0xba>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80013e4:	ea43 0008 	orr.w	r0, r3, r8
 80013e8:	ea40 030c 	orr.w	r3, r0, ip
 80013ec:	ea43 030e 	orr.w	r3, r3, lr
 80013f0:	433b      	orrs	r3, r7
 80013f2:	68c8      	ldr	r0, [r1, #12]
 80013f4:	4333      	orrs	r3, r6
 80013f6:	4303      	orrs	r3, r0
 80013f8:	e7b1      	b.n	800135e <QSPI_Config+0x66>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80013fa:	f1b8 0f00 	cmp.w	r8, #0
 80013fe:	d00f      	beq.n	8001420 <QSPI_Config+0x128>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001400:	ea40 0308 	orr.w	r3, r0, r8
 8001404:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001406:	6824      	ldr	r4, [r4, #0]
 8001408:	4313      	orrs	r3, r2
 800140a:	4303      	orrs	r3, r0
 800140c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 800140e:	4303      	orrs	r3, r0
 8001410:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8001412:	4303      	orrs	r3, r0
 8001414:	68c8      	ldr	r0, [r1, #12]
 8001416:	4303      	orrs	r3, r0
 8001418:	6948      	ldr	r0, [r1, #20]
 800141a:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800141e:	e7a0      	b.n	8001362 <QSPI_Config+0x6a>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001420:	2800      	cmp	r0, #0
 8001422:	d0aa      	beq.n	800137a <QSPI_Config+0x82>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001424:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001426:	6824      	ldr	r4, [r4, #0]
 8001428:	4303      	orrs	r3, r0
 800142a:	4313      	orrs	r3, r2
 800142c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800142e:	4313      	orrs	r3, r2
 8001430:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001432:	4313      	orrs	r3, r2
 8001434:	694a      	ldr	r2, [r1, #20]
 8001436:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800143a:	e79d      	b.n	8001378 <QSPI_Config+0x80>

0800143c <QSPI_WaitFlagStateUntilTimeout>:
{
 800143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001440:	9d06      	ldr	r5, [sp, #24]
 8001442:	4604      	mov	r4, r0
 8001444:	460f      	mov	r7, r1
 8001446:	4616      	mov	r6, r2
 8001448:	4698      	mov	r8, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800144a:	6821      	ldr	r1, [r4, #0]
 800144c:	688a      	ldr	r2, [r1, #8]
 800144e:	423a      	tst	r2, r7
 8001450:	bf14      	ite	ne
 8001452:	2201      	movne	r2, #1
 8001454:	2200      	moveq	r2, #0
 8001456:	42b2      	cmp	r2, r6
 8001458:	d102      	bne.n	8001460 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800145a:	2000      	movs	r0, #0
}
 800145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001460:	1c6b      	adds	r3, r5, #1
 8001462:	d0f3      	beq.n	800144c <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001464:	f7ff fdb4 	bl	8000fd0 <HAL_GetTick>
 8001468:	eba0 0008 	sub.w	r0, r0, r8
 800146c:	4285      	cmp	r5, r0
 800146e:	d301      	bcc.n	8001474 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d1ea      	bne.n	800144a <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001474:	2304      	movs	r3, #4
 8001476:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800147a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6463      	str	r3, [r4, #68]	; 0x44
 8001482:	2001      	movs	r0, #1
 8001484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001488 <HAL_QSPI_Init>:
{
 8001488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800148a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff fda0 	bl	8000fd0 <HAL_GetTick>
 8001490:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8001492:	2c00      	cmp	r4, #0
 8001494:	d046      	beq.n	8001524 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001496:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800149a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800149e:	b93a      	cbnz	r2, 80014b0 <HAL_QSPI_Init+0x28>
    hqspi->Lock = HAL_UNLOCKED;
 80014a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80014a4:	4620      	mov	r0, r4
 80014a6:	f000 ff29 	bl	80022fc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80014aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ae:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	68a1      	ldr	r1, [r4, #8]
 80014b4:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80014b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80014b8:	3901      	subs	r1, #1
 80014ba:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80014be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014c2:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80014c4:	2120      	movs	r1, #32
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	462b      	mov	r3, r5
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff ffb5 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80014d2:	bb10      	cbnz	r0, 800151a <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80014d4:	69e5      	ldr	r5, [r4, #28]
 80014d6:	68e3      	ldr	r3, [r4, #12]
 80014d8:	6822      	ldr	r2, [r4, #0]
 80014da:	432b      	orrs	r3, r5
 80014dc:	6a25      	ldr	r5, [r4, #32]
 80014de:	6811      	ldr	r1, [r2, #0]
 80014e0:	432b      	orrs	r3, r5
 80014e2:	6865      	ldr	r5, [r4, #4]
 80014e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80014e8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80014ec:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80014f4:	69a1      	ldr	r1, [r4, #24]
 80014f6:	6963      	ldr	r3, [r4, #20]
 80014f8:	6855      	ldr	r5, [r2, #4]
 80014fa:	430b      	orrs	r3, r1
 80014fc:	6921      	ldr	r1, [r4, #16]
 80014fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001502:	4909      	ldr	r1, [pc, #36]	; (8001528 <HAL_QSPI_Init+0xa0>)
 8001504:	4029      	ands	r1, r5
 8001506:	430b      	orrs	r3, r1
 8001508:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800150a:	6813      	ldr	r3, [r2, #0]
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001512:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001514:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8001516:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800151a:	2300      	movs	r3, #0
 800151c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001520:	b003      	add	sp, #12
 8001522:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
 8001526:	e7fb      	b.n	8001520 <HAL_QSPI_Init+0x98>
 8001528:	ffe0f8fe 	.word	0xffe0f8fe

0800152c <HAL_QSPI_Command>:
{
 800152c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001530:	4604      	mov	r4, r0
 8001532:	468a      	mov	sl, r1
 8001534:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001536:	f7ff fd4b 	bl	8000fd0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800153a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800153e:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 8001540:	4680      	mov	r8, r0
  __HAL_LOCK(hqspi);
 8001542:	d035      	beq.n	80015b0 <HAL_QSPI_Command+0x84>
 8001544:	2301      	movs	r3, #1
 8001546:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800154a:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
 800154e:	b2f6      	uxtb	r6, r6
 8001550:	429e      	cmp	r6, r3
 8001552:	f04f 0702 	mov.w	r7, #2
 8001556:	d129      	bne.n	80015ac <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001558:	2200      	movs	r2, #0
 800155a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800155c:	4603      	mov	r3, r0
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800155e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001562:	f8cd 9000 	str.w	r9, [sp]
 8001566:	2120      	movs	r1, #32
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ff67 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800156e:	4605      	mov	r5, r0
 8001570:	b9a8      	cbnz	r0, 800159e <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001572:	4602      	mov	r2, r0
 8001574:	4651      	mov	r1, sl
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff febe 	bl	80012f8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800157c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8001580:	b95b      	cbnz	r3, 800159a <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001582:	f8cd 9000 	str.w	r9, [sp]
 8001586:	4643      	mov	r3, r8
 8001588:	4632      	mov	r2, r6
 800158a:	4639      	mov	r1, r7
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff ff55 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8001592:	4605      	mov	r5, r0
 8001594:	b918      	cbnz	r0, 800159e <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	60df      	str	r7, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800159a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800159e:	2300      	movs	r3, #0
 80015a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80015a4:	4628      	mov	r0, r5
 80015a6:	b002      	add	sp, #8
 80015a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 80015ac:	463d      	mov	r5, r7
 80015ae:	e7f6      	b.n	800159e <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 80015b0:	2502      	movs	r5, #2
 80015b2:	e7f7      	b.n	80015a4 <HAL_QSPI_Command+0x78>

080015b4 <HAL_QSPI_Abort>:
{
 80015b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff fd0a 	bl	8000fd0 <HAL_GetTick>
 80015bc:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80015be:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80015c2:	f010 0002 	ands.w	r0, r0, #2
 80015c6:	d034      	beq.n	8001632 <HAL_QSPI_Abort+0x7e>
    __HAL_UNLOCK(hqspi);
 80015c8:	2300      	movs	r3, #0
 80015ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	0752      	lsls	r2, r2, #29
 80015d4:	d50b      	bpl.n	80015ee <HAL_QSPI_Abort+0x3a>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80015d6:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 80015d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80015da:	f022 0204 	bic.w	r2, r2, #4
 80015de:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 80015e0:	f7ff fd6c 	bl	80010bc <HAL_DMA_Abort>
      if(status != HAL_OK)
 80015e4:	b118      	cbz	r0, 80015ee <HAL_QSPI_Abort+0x3a>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80015e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6463      	str	r3, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	6813      	ldr	r3, [r2, #0]
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6013      	str	r3, [r2, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80015f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	462b      	mov	r3, r5
 8001600:	2102      	movs	r1, #2
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff1a 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001608:	b998      	cbnz	r0, 8001632 <HAL_QSPI_Abort+0x7e>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	2202      	movs	r2, #2
 800160e:	60da      	str	r2, [r3, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001610:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4602      	mov	r2, r0
 8001616:	462b      	mov	r3, r5
 8001618:	2120      	movs	r1, #32
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff ff0e 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001620:	b938      	cbnz	r0, 8001632 <HAL_QSPI_Abort+0x7e>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	6953      	ldr	r3, [r2, #20]
 8001626:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800162a:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800162c:	2301      	movs	r3, #1
 800162e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8001632:	b003      	add	sp, #12
 8001634:	bd30      	pop	{r4, r5, pc}

08001636 <HAL_QSPI_Transmit>:
{
 8001636:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800163a:	4604      	mov	r4, r0
 800163c:	4688      	mov	r8, r1
 800163e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff fcc6 	bl	8000fd0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001644:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001648:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 800164a:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800164c:	d050      	beq.n	80016f0 <HAL_QSPI_Transmit+0xba>
 800164e:	2301      	movs	r3, #1
 8001650:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001654:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001658:	6825      	ldr	r5, [r4, #0]
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800165a:	b2c0      	uxtb	r0, r0
 800165c:	4298      	cmp	r0, r3
 800165e:	d145      	bne.n	80016ec <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8001664:	f1b8 0f00 	cmp.w	r8, #0
 8001668:	d03b      	beq.n	80016e2 <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800166a:	2312      	movs	r3, #18
 800166c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001670:	692b      	ldr	r3, [r5, #16]
 8001672:	3301      	adds	r3, #1
 8001674:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001676:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8001678:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800167c:	3301      	adds	r3, #1
 800167e:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001680:	696b      	ldr	r3, [r5, #20]
 8001682:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001686:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8001688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800168a:	b9b3      	cbnz	r3, 80016ba <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800168c:	9700      	str	r7, [sp, #0]
 800168e:	4633      	mov	r3, r6
 8001690:	2201      	movs	r2, #1
 8001692:	2102      	movs	r1, #2
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fed1 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800169a:	b928      	cbnz	r0, 80016a8 <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	2202      	movs	r2, #2
 80016a0:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff ff86 	bl	80015b4 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80016ae:	2300      	movs	r3, #0
 80016b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80016b4:	b002      	add	sp, #8
 80016b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80016ba:	9700      	str	r7, [sp, #0]
 80016bc:	4633      	mov	r3, r6
 80016be:	2201      	movs	r2, #1
 80016c0:	2104      	movs	r1, #4
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff feba 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d1ed      	bne.n	80016a8 <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80016cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 80016d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016d6:	3301      	adds	r3, #1
 80016d8:	6263      	str	r3, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80016da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016dc:	3b01      	subs	r3, #1
 80016de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016e0:	e7d2      	b.n	8001688 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80016e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6463      	str	r3, [r4, #68]	; 0x44
 80016ea:	e7e0      	b.n	80016ae <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 80016ec:	2002      	movs	r0, #2
 80016ee:	e7de      	b.n	80016ae <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 80016f0:	2002      	movs	r0, #2
 80016f2:	e7df      	b.n	80016b4 <HAL_QSPI_Transmit+0x7e>

080016f4 <HAL_QSPI_Receive>:
{
 80016f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80016f8:	4604      	mov	r4, r0
 80016fa:	4617      	mov	r7, r2
 80016fc:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80016fe:	f7ff fc67 	bl	8000fd0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001702:	6825      	ldr	r5, [r4, #0]
 8001704:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8001706:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800170a:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 800170c:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800170e:	d052      	beq.n	80017b6 <HAL_QSPI_Receive+0xc2>
 8001710:	2301      	movs	r3, #1
 8001712:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001716:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800171a:	b2c0      	uxtb	r0, r0
 800171c:	4298      	cmp	r0, r3
 800171e:	d148      	bne.n	80017b2 <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001720:	2300      	movs	r3, #0
 8001722:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8001724:	f1b8 0f00 	cmp.w	r8, #0
 8001728:	d03e      	beq.n	80017a8 <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800172a:	2322      	movs	r3, #34	; 0x22
 800172c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001730:	692b      	ldr	r3, [r5, #16]
 8001732:	3301      	adds	r3, #1
 8001734:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001736:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8001738:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800173c:	3301      	adds	r3, #1
 800173e:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001740:	696b      	ldr	r3, [r5, #20]
 8001742:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800174a:	616b      	str	r3, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800174c:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800174e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001750:	b9b3      	cbnz	r3, 8001780 <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001752:	9700      	str	r7, [sp, #0]
 8001754:	4633      	mov	r3, r6
 8001756:	2201      	movs	r2, #1
 8001758:	2102      	movs	r1, #2
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fe6e 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8001760:	b928      	cbnz	r0, 800176e <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	2202      	movs	r2, #2
 8001766:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8001768:	4620      	mov	r0, r4
 800176a:	f7ff ff23 	bl	80015b4 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 800176e:	2301      	movs	r3, #1
 8001770:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8001774:	2300      	movs	r3, #0
 8001776:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800177a:	b002      	add	sp, #8
 800177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001780:	9700      	str	r7, [sp, #0]
 8001782:	4633      	mov	r3, r6
 8001784:	2201      	movs	r2, #1
 8001786:	2106      	movs	r1, #6
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fe57 	bl	800143c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800178e:	2800      	cmp	r0, #0
 8001790:	d1ed      	bne.n	800176e <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001792:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001794:	f895 2020 	ldrb.w	r2, [r5, #32]
 8001798:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800179a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800179c:	3301      	adds	r3, #1
 800179e:	6323      	str	r3, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80017a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017a2:	3b01      	subs	r3, #1
 80017a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80017a6:	e7d2      	b.n	800174e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80017a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	6463      	str	r3, [r4, #68]	; 0x44
 80017b0:	e7e0      	b.n	8001774 <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 80017b2:	2002      	movs	r0, #2
 80017b4:	e7de      	b.n	8001774 <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 80017b6:	2002      	movs	r0, #2
 80017b8:	e7df      	b.n	800177a <HAL_QSPI_Receive+0x86>
	...

080017bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4913      	ldr	r1, [pc, #76]	; (800180c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80017be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c0:	688b      	ldr	r3, [r1, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x16>
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ce:	4810      	ldr	r0, [pc, #64]	; (8001810 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80017d0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80017d2:	4810      	ldr	r0, [pc, #64]	; (8001814 <HAL_RCC_GetSysClockFreq+0x58>)
 80017d4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017dc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e0:	bf14      	ite	ne
 80017e2:	480c      	ldrne	r0, [pc, #48]	; (8001814 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e4:	480a      	ldreq	r0, [pc, #40]	; (8001810 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80017ea:	bf18      	it	ne
 80017ec:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f2:	fba1 0100 	umull	r0, r1, r1, r0
 80017f6:	f7ff fa05 	bl	8000c04 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_GetSysClockFreq+0x50>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001802:	3301      	adds	r3, #1
 8001804:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001806:	fbb0 f0f3 	udiv	r0, r0, r3
 800180a:	bd08      	pop	{r3, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	00f42400 	.word	0x00f42400
 8001814:	017d7840 	.word	0x017d7840

08001818 <HAL_RCC_ClockConfig>:
{
 8001818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800181c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800181e:	4604      	mov	r4, r0
 8001820:	b910      	cbnz	r0, 8001828 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001822:	2001      	movs	r0, #1
 8001824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b44      	ldr	r3, [pc, #272]	; (800193c <HAL_RCC_ClockConfig+0x124>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f002 020f 	and.w	r2, r2, #15
 8001830:	428a      	cmp	r2, r1
 8001832:	d329      	bcc.n	8001888 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	6821      	ldr	r1, [r4, #0]
 8001836:	078f      	lsls	r7, r1, #30
 8001838:	d42e      	bmi.n	8001898 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	07c8      	lsls	r0, r1, #31
 800183c:	d441      	bmi.n	80018c2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_ClockConfig+0x124>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f002 020f 	and.w	r2, r2, #15
 8001846:	4295      	cmp	r5, r2
 8001848:	d367      	bcc.n	800191a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	0751      	lsls	r1, r2, #29
 800184e:	d46d      	bmi.n	800192c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	0713      	lsls	r3, r2, #28
 8001852:	d507      	bpl.n	8001864 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001854:	4a3a      	ldr	r2, [pc, #232]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 8001856:	6921      	ldr	r1, [r4, #16]
 8001858:	6893      	ldr	r3, [r2, #8]
 800185a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800185e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001862:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001864:	f7ff ffaa 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 800186a:	4a36      	ldr	r2, [pc, #216]	; (8001944 <HAL_RCC_ClockConfig+0x12c>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	40d8      	lsrs	r0, r3
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_ClockConfig+0x130>)
 8001878:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x134>)
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	f7ff fb5d 	bl	8000f3c <HAL_InitTick>
  return HAL_OK;
 8001882:	2000      	movs	r0, #0
 8001884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001888:	b2ca      	uxtb	r2, r1
 800188a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	4299      	cmp	r1, r3
 8001894:	d1c5      	bne.n	8001822 <HAL_RCC_ClockConfig+0xa>
 8001896:	e7cd      	b.n	8001834 <HAL_RCC_ClockConfig+0x1c>
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189e:	bf1e      	ittt	ne
 80018a0:	689a      	ldrne	r2, [r3, #8]
 80018a2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80018a6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018aa:	bf42      	ittt	mi
 80018ac:	689a      	ldrmi	r2, [r3, #8]
 80018ae:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80018b2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	68a0      	ldr	r0, [r4, #8]
 80018b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018bc:	4302      	orrs	r2, r0
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e7bb      	b.n	800183a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	6862      	ldr	r2, [r4, #4]
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 80018c6:	2a01      	cmp	r2, #1
 80018c8:	d11d      	bne.n	8001906 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	d0a7      	beq.n	8001822 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d2:	4e1b      	ldr	r6, [pc, #108]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 80018d4:	68b3      	ldr	r3, [r6, #8]
 80018d6:	f023 0303 	bic.w	r3, r3, #3
 80018da:	4313      	orrs	r3, r2
 80018dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80018de:	f7ff fb77 	bl	8000fd0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80018e6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e8:	68b3      	ldr	r3, [r6, #8]
 80018ea:	6862      	ldr	r2, [r4, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018f4:	d0a3      	beq.n	800183e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f6:	f7ff fb6b 	bl	8000fd0 <HAL_GetTick>
 80018fa:	1bc0      	subs	r0, r0, r7
 80018fc:	4540      	cmp	r0, r8
 80018fe:	d9f3      	bls.n	80018e8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001900:	2003      	movs	r0, #3
}
 8001902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	1e91      	subs	r1, r2, #2
 8001908:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190c:	d802      	bhi.n	8001914 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001912:	e7dd      	b.n	80018d0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	f013 0f02 	tst.w	r3, #2
 8001918:	e7da      	b.n	80018d0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	b2ea      	uxtb	r2, r5
 800191c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	429d      	cmp	r5, r3
 8001926:	f47f af7c 	bne.w	8001822 <HAL_RCC_ClockConfig+0xa>
 800192a:	e78e      	b.n	800184a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4904      	ldr	r1, [pc, #16]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 800192e:	68e0      	ldr	r0, [r4, #12]
 8001930:	688b      	ldr	r3, [r1, #8]
 8001932:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001936:	4303      	orrs	r3, r0
 8001938:	608b      	str	r3, [r1, #8]
 800193a:	e789      	b.n	8001850 <HAL_RCC_ClockConfig+0x38>
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	08007cc8 	.word	0x08007cc8
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800195e:	6810      	ldr	r0, [r2, #0]
}
 8001960:	40d8      	lsrs	r0, r3
 8001962:	4770      	bx	lr
 8001964:	40023800 	.word	0x40023800
 8001968:	08007cd8 	.word	0x08007cd8
 800196c:	20000008 	.word	0x20000008

08001970 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800197e:	6810      	ldr	r0, [r2, #0]
}
 8001980:	40d8      	lsrs	r0, r3
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800
 8001988:	08007cd8 	.word	0x08007cd8
 800198c:	20000008 	.word	0x20000008

08001990 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001990:	6803      	ldr	r3, [r0, #0]
{
 8001992:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	07dd      	lsls	r5, r3, #31
{
 8001998:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	d410      	bmi.n	80019be <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	0798      	lsls	r0, r3, #30
 80019a0:	d45b      	bmi.n	8001a5a <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	071a      	lsls	r2, r3, #28
 80019a6:	f100 809d 	bmi.w	8001ae4 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	075b      	lsls	r3, r3, #29
 80019ae:	f100 80bb 	bmi.w	8001b28 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b2:	69a2      	ldr	r2, [r4, #24]
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	f040 811c 	bne.w	8001bf2 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80019ba:	2000      	movs	r0, #0
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019be:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	f002 020c 	and.w	r2, r2, #12
 80019c6:	2a04      	cmp	r2, #4
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019d0:	2a08      	cmp	r2, #8
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0259      	lsls	r1, r3, #9
 80019d8:	d50a      	bpl.n	80019f0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4ba0      	ldr	r3, [pc, #640]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	039a      	lsls	r2, r3, #14
 80019e0:	d5dc      	bpl.n	800199c <HAL_RCC_OscConfig+0xc>
 80019e2:	6863      	ldr	r3, [r4, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1d9      	bne.n	800199c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
}
 80019ea:	b002      	add	sp, #8
 80019ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	6863      	ldr	r3, [r4, #4]
 80019f2:	4d9a      	ldr	r5, [pc, #616]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d111      	bne.n	8001a1e <HAL_RCC_OscConfig+0x8e>
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a02:	f7ff fae5 	bl	8000fd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4d95      	ldr	r5, [pc, #596]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001a08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	039b      	lsls	r3, r3, #14
 8001a0e:	d4c5      	bmi.n	800199c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fade 	bl	8000fd0 <HAL_GetTick>
 8001a14:	1b80      	subs	r0, r0, r6
 8001a16:	2864      	cmp	r0, #100	; 0x64
 8001a18:	d9f7      	bls.n	8001a0a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	e7e5      	b.n	80019ea <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a22:	d104      	bne.n	8001a2e <HAL_RCC_OscConfig+0x9e>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2a:	602b      	str	r3, [r5, #0]
 8001a2c:	e7e5      	b.n	80019fa <HAL_RCC_OscConfig+0x6a>
 8001a2e:	682a      	ldr	r2, [r5, #0]
 8001a30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a34:	602a      	str	r2, [r5, #0]
 8001a36:	682a      	ldr	r2, [r5, #0]
 8001a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a3c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1df      	bne.n	8001a02 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001a42:	f7ff fac5 	bl	8000fd0 <HAL_GetTick>
 8001a46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	039f      	lsls	r7, r3, #14
 8001a4c:	d5a6      	bpl.n	800199c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fabf 	bl	8000fd0 <HAL_GetTick>
 8001a52:	1b80      	subs	r0, r0, r6
 8001a54:	2864      	cmp	r0, #100	; 0x64
 8001a56:	d9f7      	bls.n	8001a48 <HAL_RCC_OscConfig+0xb8>
 8001a58:	e7df      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a5a:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	f012 0f0c 	tst.w	r2, #12
 8001a62:	d007      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a6a:	2a08      	cmp	r2, #8
 8001a6c:	d111      	bne.n	8001a92 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	025e      	lsls	r6, r3, #9
 8001a72:	d40e      	bmi.n	8001a92 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a74:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	0795      	lsls	r5, r2, #30
 8001a7a:	d502      	bpl.n	8001a82 <HAL_RCC_OscConfig+0xf2>
 8001a7c:	68e2      	ldr	r2, [r4, #12]
 8001a7e:	2a01      	cmp	r2, #1
 8001a80:	d1b2      	bne.n	80019e8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	6921      	ldr	r1, [r4, #16]
 8001a86:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a8a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a90:	e787      	b.n	80019a2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a92:	68e2      	ldr	r2, [r4, #12]
 8001a94:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x2d0>)
 8001a96:	b1b2      	cbz	r2, 8001ac6 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fa98 	bl	8000fd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4d6e      	ldr	r5, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001aa2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	682b      	ldr	r3, [r5, #0]
 8001aa6:	0798      	lsls	r0, r3, #30
 8001aa8:	d507      	bpl.n	8001aba <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	6922      	ldr	r2, [r4, #16]
 8001aae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ab2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ab6:	602b      	str	r3, [r5, #0]
 8001ab8:	e773      	b.n	80019a2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff fa89 	bl	8000fd0 <HAL_GetTick>
 8001abe:	1b80      	subs	r0, r0, r6
 8001ac0:	2802      	cmp	r0, #2
 8001ac2:	d9ef      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x114>
 8001ac4:	e7a9      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa82 	bl	8000fd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001acc:	4d63      	ldr	r5, [pc, #396]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001ace:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	0799      	lsls	r1, r3, #30
 8001ad4:	f57f af65 	bpl.w	80019a2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fa7a 	bl	8000fd0 <HAL_GetTick>
 8001adc:	1b80      	subs	r0, r0, r6
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	d9f6      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x140>
 8001ae2:	e79a      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae4:	6962      	ldr	r2, [r4, #20]
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <HAL_RCC_OscConfig+0x2d4>)
 8001ae8:	b17a      	cbz	r2, 8001b0a <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001aee:	f7ff fa6f 	bl	8000fd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4d5a      	ldr	r5, [pc, #360]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001af4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001af8:	079f      	lsls	r7, r3, #30
 8001afa:	f53f af56 	bmi.w	80019aa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff fa67 	bl	8000fd0 <HAL_GetTick>
 8001b02:	1b80      	subs	r0, r0, r6
 8001b04:	2802      	cmp	r0, #2
 8001b06:	d9f6      	bls.n	8001af6 <HAL_RCC_OscConfig+0x166>
 8001b08:	e787      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001b0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fa60 	bl	8000fd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4d52      	ldr	r5, [pc, #328]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001b12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b16:	0798      	lsls	r0, r3, #30
 8001b18:	f57f af47 	bpl.w	80019aa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa58 	bl	8000fd0 <HAL_GetTick>
 8001b20:	1b80      	subs	r0, r0, r6
 8001b22:	2802      	cmp	r0, #2
 8001b24:	d9f6      	bls.n	8001b14 <HAL_RCC_OscConfig+0x184>
 8001b26:	e778      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 8001b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001b30:	d128      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	9201      	str	r2, [sp, #4]
 8001b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b46:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4d47      	ldr	r5, [pc, #284]	; (8001c68 <HAL_RCC_OscConfig+0x2d8>)
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	05d9      	lsls	r1, r3, #23
 8001b4e:	d51b      	bpl.n	8001b88 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	68a3      	ldr	r3, [r4, #8]
 8001b52:	4d42      	ldr	r5, [pc, #264]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d127      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x218>
 8001b58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b60:	f7ff fa36 	bl	8000fd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b64:	4d3d      	ldr	r5, [pc, #244]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001b66:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b6e:	079b      	lsls	r3, r3, #30
 8001b70:	d539      	bpl.n	8001be6 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8001b72:	2e00      	cmp	r6, #0
 8001b74:	f43f af1d 	beq.w	80019b2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 8001b7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	e716      	b.n	80019b2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001b84:	2600      	movs	r6, #0
 8001b86:	e7df      	b.n	8001b48 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b90:	f7ff fa1e 	bl	8000fd0 <HAL_GetTick>
 8001b94:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	682b      	ldr	r3, [r5, #0]
 8001b98:	05da      	lsls	r2, r3, #23
 8001b9a:	d4d9      	bmi.n	8001b50 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff fa18 	bl	8000fd0 <HAL_GetTick>
 8001ba0:	1bc0      	subs	r0, r0, r7
 8001ba2:	2802      	cmp	r0, #2
 8001ba4:	d9f7      	bls.n	8001b96 <HAL_RCC_OscConfig+0x206>
 8001ba6:	e738      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d104      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x226>
 8001bac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	672b      	str	r3, [r5, #112]	; 0x70
 8001bb4:	e7d0      	b.n	8001b58 <HAL_RCC_OscConfig+0x1c8>
 8001bb6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	672a      	str	r2, [r5, #112]	; 0x70
 8001bbe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001bc0:	f022 0204 	bic.w	r2, r2, #4
 8001bc4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ca      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 8001bca:	f7ff fa01 	bl	8000fd0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bd2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bd6:	0798      	lsls	r0, r3, #30
 8001bd8:	d5cb      	bpl.n	8001b72 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f9f9 	bl	8000fd0 <HAL_GetTick>
 8001bde:	1bc0      	subs	r0, r0, r7
 8001be0:	4540      	cmp	r0, r8
 8001be2:	d9f7      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x244>
 8001be4:	e719      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff f9f3 	bl	8000fd0 <HAL_GetTick>
 8001bea:	1bc0      	subs	r0, r0, r7
 8001bec:	4540      	cmp	r0, r8
 8001bee:	d9bd      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1dc>
 8001bf0:	e713      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf2:	4d1a      	ldr	r5, [pc, #104]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
 8001bf4:	68ab      	ldr	r3, [r5, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	f43f aef4 	beq.w	80019e8 <HAL_RCC_OscConfig+0x58>
 8001c00:	4e1a      	ldr	r6, [pc, #104]	; (8001c6c <HAL_RCC_OscConfig+0x2dc>)
 8001c02:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c04:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001c06:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c08:	d138      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f9e1 	bl	8000fd0 <HAL_GetTick>
 8001c0e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	0199      	lsls	r1, r3, #6
 8001c14:	d42c      	bmi.n	8001c70 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c16:	6a22      	ldr	r2, [r4, #32]
 8001c18:	69e3      	ldr	r3, [r4, #28]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c2a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001c2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c30:	4c0a      	ldr	r4, [pc, #40]	; (8001c5c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c32:	0852      	lsrs	r2, r2, #1
 8001c34:	3a01      	subs	r2, #1
 8001c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c3a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c40:	f7ff f9c6 	bl	8000fd0 <HAL_GetTick>
 8001c44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	019a      	lsls	r2, r3, #6
 8001c4a:	f53f aeb6 	bmi.w	80019ba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff f9bf 	bl	8000fd0 <HAL_GetTick>
 8001c52:	1b40      	subs	r0, r0, r5
 8001c54:	2802      	cmp	r0, #2
 8001c56:	d9f6      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2b6>
 8001c58:	e6df      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	42470000 	.word	0x42470000
 8001c64:	42470e80 	.word	0x42470e80
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f9ae 	bl	8000fd0 <HAL_GetTick>
 8001c74:	1bc0      	subs	r0, r0, r7
 8001c76:	2802      	cmp	r0, #2
 8001c78:	d9ca      	bls.n	8001c10 <HAL_RCC_OscConfig+0x280>
 8001c7a:	e6ce      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f9a8 	bl	8000fd0 <HAL_GetTick>
 8001c80:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	682b      	ldr	r3, [r5, #0]
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	f57f ae98 	bpl.w	80019ba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff f9a1 	bl	8000fd0 <HAL_GetTick>
 8001c8e:	1b00      	subs	r0, r0, r4
 8001c90:	2802      	cmp	r0, #2
 8001c92:	d9f6      	bls.n	8001c82 <HAL_RCC_OscConfig+0x2f2>
 8001c94:	e6c1      	b.n	8001a1a <HAL_RCC_OscConfig+0x8a>
 8001c96:	bf00      	nop

08001c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c98:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c9a:	6803      	ldr	r3, [r0, #0]
 8001c9c:	68c1      	ldr	r1, [r0, #12]
 8001c9e:	691a      	ldr	r2, [r3, #16]
{
 8001ca0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001caa:	6925      	ldr	r5, [r4, #16]
 8001cac:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cae:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cb0:	69c0      	ldr	r0, [r0, #28]
 8001cb2:	432a      	orrs	r2, r5
 8001cb4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001cb6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cba:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001cbc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cc0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	69a1      	ldr	r1, [r4, #24]
 8001cca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001cce:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cd0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	4a2d      	ldr	r2, [pc, #180]	; (8001d8c <UART_SetConfig+0xf4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cd8:	d131      	bne.n	8001d3e <UART_SetConfig+0xa6>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00b      	beq.n	8001cf6 <UART_SetConfig+0x5e>
 8001cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <UART_SetConfig+0x5e>
 8001ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <UART_SetConfig+0x5e>
 8001cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d120      	bne.n	8001d38 <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cf6:	f7ff fe3b 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cfa:	6862      	ldr	r2, [r4, #4]
 8001cfc:	6825      	ldr	r5, [r4, #0]
 8001cfe:	1892      	adds	r2, r2, r2
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	f04f 0119 	mov.w	r1, #25
 8001d08:	415b      	adcs	r3, r3
 8001d0a:	fba0 0101 	umull	r0, r1, r0, r1
 8001d0e:	f7fe ff79 	bl	8000c04 <__aeabi_uldivmod>
 8001d12:	2164      	movs	r1, #100	; 0x64
 8001d14:	fbb0 f4f1 	udiv	r4, r0, r1
 8001d18:	fb01 0314 	mls	r3, r1, r4, r0
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	3332      	adds	r3, #50	; 0x32
 8001d20:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d24:	f003 0207 	and.w	r2, r3, #7
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001d2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d32:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d34:	60ab      	str	r3, [r5, #8]
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d38:	f7ff fe0a 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	e7dd      	b.n	8001cfa <UART_SetConfig+0x62>
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00a      	beq.n	8001d58 <UART_SetConfig+0xc0>
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <UART_SetConfig+0xf8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <UART_SetConfig+0xc0>
 8001d48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <UART_SetConfig+0xc0>
 8001d50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d116      	bne.n	8001d86 <UART_SetConfig+0xee>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d58:	f7ff fe0a 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d5c:	6863      	ldr	r3, [r4, #4]
 8001d5e:	6825      	ldr	r5, [r4, #0]
 8001d60:	2119      	movs	r1, #25
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	fba0 0101 	umull	r0, r1, r0, r1
 8001d68:	0f9b      	lsrs	r3, r3, #30
 8001d6a:	f7fe ff4b 	bl	8000c04 <__aeabi_uldivmod>
 8001d6e:	2264      	movs	r2, #100	; 0x64
 8001d70:	fbb0 f1f2 	udiv	r1, r0, r2
 8001d74:	fb02 0311 	mls	r3, r2, r1, r0
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	3332      	adds	r3, #50	; 0x32
 8001d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d80:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001d84:	e7d6      	b.n	8001d34 <UART_SetConfig+0x9c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d86:	f7ff fde3 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 8001d8a:	e7e7      	b.n	8001d5c <UART_SetConfig+0xc4>
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40011400 	.word	0x40011400

08001d94 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d96:	4604      	mov	r4, r0
 8001d98:	460e      	mov	r6, r1
 8001d9a:	4617      	mov	r7, r2
 8001d9c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d9e:	6821      	ldr	r1, [r4, #0]
 8001da0:	680b      	ldr	r3, [r1, #0]
 8001da2:	ea36 0303 	bics.w	r3, r6, r3
 8001da6:	d101      	bne.n	8001dac <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001da8:	2000      	movs	r0, #0
}
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001dac:	1c6b      	adds	r3, r5, #1
 8001dae:	d0f7      	beq.n	8001da0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001db0:	b995      	cbnz	r5, 8001dd8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001dca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dd8:	f7ff f8fa 	bl	8000fd0 <HAL_GetTick>
 8001ddc:	1bc0      	subs	r0, r0, r7
 8001dde:	4285      	cmp	r5, r0
 8001de0:	d2dd      	bcs.n	8001d9e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001de2:	e7e6      	b.n	8001db2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001de4 <HAL_UART_Init>:
{
 8001de4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001de6:	4604      	mov	r4, r0
 8001de8:	b340      	cbz	r0, 8001e3c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001dea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001df2:	b91b      	cbnz	r3, 8001dfc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001df4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001df8:	f000 fb80 	bl	80024fc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001dfc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001dfe:	2324      	movs	r3, #36	; 0x24
 8001e00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e04:	68d3      	ldr	r3, [r2, #12]
 8001e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e0a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff ff43 	bl	8001c98 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e22:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e2a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001e2e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e30:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e36:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e3c:	2001      	movs	r0, #1
}
 8001e3e:	bd10      	pop	{r4, pc}

08001e40 <HAL_UART_Transmit>:
{
 8001e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e44:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001e46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e4a:	2b20      	cmp	r3, #32
{
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	460d      	mov	r5, r1
 8001e50:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001e52:	d151      	bne.n	8001ef8 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001e54:	2900      	cmp	r1, #0
 8001e56:	d04c      	beq.n	8001ef2 <HAL_UART_Transmit+0xb2>
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	d04a      	beq.n	8001ef2 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001e5c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d049      	beq.n	8001ef8 <HAL_UART_Transmit+0xb8>
 8001e64:	2301      	movs	r3, #1
 8001e66:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e6e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e70:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e74:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001e78:	f7ff f8aa 	bl	8000fd0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001e7c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001e80:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001e82:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001e86:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001e8a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b95b      	cbnz	r3, 8001ea8 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e90:	463b      	mov	r3, r7
 8001e92:	4632      	mov	r2, r6
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ff7c 	bl	8001d94 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e9c:	b9a0      	cbnz	r0, 8001ec8 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001ea8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eb0:	68a3      	ldr	r3, [r4, #8]
 8001eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb6:	4632      	mov	r2, r6
 8001eb8:	463b      	mov	r3, r7
 8001eba:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001ebe:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec2:	f7ff ff67 	bl	8001d94 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ec6:	b110      	cbz	r0, 8001ece <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
 8001eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ece:	882b      	ldrh	r3, [r5, #0]
 8001ed0:	6822      	ldr	r2, [r4, #0]
 8001ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ed8:	6923      	ldr	r3, [r4, #16]
 8001eda:	b943      	cbnz	r3, 8001eee <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001edc:	3502      	adds	r5, #2
 8001ede:	e7d4      	b.n	8001e8a <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee0:	f7ff ff58 	bl	8001d94 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d1ef      	bne.n	8001ec8 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	782a      	ldrb	r2, [r5, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	3501      	adds	r5, #1
 8001ef0:	e7cb      	b.n	8001e8a <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001ef8:	2002      	movs	r0, #2
}
 8001efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001f00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f00:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_GPIO_Init+0x48>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	9201      	str	r2, [sp, #4]
 8001f08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f0a:	f041 0101 	orr.w	r1, r1, #1
 8001f0e:	6319      	str	r1, [r3, #48]	; 0x30
 8001f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f12:	f001 0101 	and.w	r1, r1, #1
 8001f16:	9101      	str	r1, [sp, #4]
 8001f18:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	9202      	str	r2, [sp, #8]
 8001f1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1e:	f041 0104 	orr.w	r1, r1, #4
 8001f22:	6319      	str	r1, [r3, #48]	; 0x30
 8001f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f26:	f001 0104 	and.w	r1, r1, #4
 8001f2a:	9102      	str	r1, [sp, #8]
 8001f2c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	9203      	str	r2, [sp, #12]
 8001f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f32:	f042 0202 	orr.w	r2, r2, #2
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	9b03      	ldr	r3, [sp, #12]

}
 8001f42:	b004      	add	sp, #16
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <user_provided_block_device_sync>:
{
	(void) c;

	// #382
	return LFS_ERR_OK;
}
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	4770      	bx	lr

08001f50 <user_provided_block_device_read>:
{
 8001f50:	b538      	push	{r3, r4, r5, lr}
	read_ops++;
 8001f52:	4c0a      	ldr	r4, [pc, #40]	; (8001f7c <user_provided_block_device_read+0x2c>)
{
 8001f54:	461d      	mov	r5, r3
	read_ops++;
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	6023      	str	r3, [r4, #0]
	uint32_t read_address = block * c->block_size;
 8001f5c:	69c4      	ldr	r4, [r0, #28]
	DBG_println("[READ] Block: %d, addr: %d, size: %d", (int) block, read_address_off, size);
 8001f5e:	9b04      	ldr	r3, [sp, #16]
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <user_provided_block_device_read+0x30>)
	uint32_t read_address_off = read_address + off;
 8001f62:	fb04 2401 	mla	r4, r4, r1, r2
	DBG_println("[READ] Block: %d, addr: %d, size: %d", (int) block, read_address_off, size);
 8001f66:	4622      	mov	r2, r4
 8001f68:	f000 fc38 	bl	80027dc <DBG_println>
	spi_read_data(read_address_off, buffer, size);
 8001f6c:	9a04      	ldr	r2, [sp, #16]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	4620      	mov	r0, r4
 8001f72:	f000 fb2f 	bl	80025d4 <spi_read_data>
}
 8001f76:	2000      	movs	r0, #0
 8001f78:	bd38      	pop	{r3, r4, r5, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20003098 	.word	0x20003098
 8001f80:	08007ca3 	.word	0x08007ca3

08001f84 <user_provided_block_device_prog>:
{
 8001f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f86:	4615      	mov	r5, r2
	program_ops++;
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <user_provided_block_device_prog+0x74>)
{
 8001f8a:	9c08      	ldr	r4, [sp, #32]
 8001f8c:	461e      	mov	r6, r3
	program_ops++;
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	6013      	str	r3, [r2, #0]
	uint32_t prog_address = block * c->block_size;
 8001f94:	69c2      	ldr	r2, [r0, #28]
	DBG_println("[PROG] Block: %d, Address: %d, offset: %d, size: %d", block, prog_address, off, size);
 8001f96:	9400      	str	r4, [sp, #0]
	uint32_t prog_address = block * c->block_size;
 8001f98:	434a      	muls	r2, r1
	DBG_println("[PROG] Block: %d, Address: %d, offset: %d, size: %d", block, prog_address, off, size);
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	4817      	ldr	r0, [pc, #92]	; (8001ffc <user_provided_block_device_prog+0x78>)
	uint32_t prog_address_off = prog_address + off;
 8001f9e:	1957      	adds	r7, r2, r5
	DBG_println("[PROG] Block: %d, Address: %d, offset: %d, size: %d", block, prog_address, off, size);
 8001fa0:	f000 fc1c 	bl	80027dc <DBG_println>
	DBG_println("Enabling Writing...");
 8001fa4:	4816      	ldr	r0, [pc, #88]	; (8002000 <user_provided_block_device_prog+0x7c>)
 8001fa6:	f000 fc19 	bl	80027dc <DBG_println>
	spi_write_enable();
 8001faa:	f000 faf3 	bl	8002594 <spi_write_enable>
	HAL_Delay(10);
 8001fae:	200a      	movs	r0, #10
 8001fb0:	f7ff f814 	bl	8000fdc <HAL_Delay>
	spi_read_status_1();
 8001fb4:	f000 fbb2 	bl	800271c <spi_read_status_1>
	uint32_t spi_ret = spi_page_program(prog_address_off, (uint8_t *) buffer, size);
 8001fb8:	4622      	mov	r2, r4
 8001fba:	4631      	mov	r1, r6
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	f000 fb45 	bl	800264c <spi_page_program>
 8001fc2:	4604      	mov	r4, r0
	DBG_println("BUSY...");
 8001fc4:	480f      	ldr	r0, [pc, #60]	; (8002004 <user_provided_block_device_prog+0x80>)
 8001fc6:	f000 fc09 	bl	80027dc <DBG_println>
	while (spi_read_status_1() & STATUS_REGISTER_1_BUSY) {
 8001fca:	f000 fba7 	bl	800271c <spi_read_status_1>
 8001fce:	07c3      	lsls	r3, r0, #31
 8001fd0:	d40e      	bmi.n	8001ff0 <user_provided_block_device_prog+0x6c>
	DBG_println("No longer BUSY...");
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <user_provided_block_device_prog+0x84>)
 8001fd4:	f000 fc02 	bl	80027dc <DBG_println>
	int ret = spi_ret == HAL_OK ? LFS_ERR_OK : LFS_ERR_CORRUPT;
 8001fd8:	2c00      	cmp	r4, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2400      	moveq	r4, #0
 8001fde:	f06f 0453 	mvnne.w	r4, #83	; 0x53
	DBG_println("Operation result: %d", ret);
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <user_provided_block_device_prog+0x88>)
 8001fe6:	f000 fbf9 	bl	80027dc <DBG_println>
}
 8001fea:	4620      	mov	r0, r4
 8001fec:	b003      	add	sp, #12
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_Delay(10);
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f7fe fff3 	bl	8000fdc <HAL_Delay>
 8001ff6:	e7e8      	b.n	8001fca <user_provided_block_device_prog+0x46>
 8001ff8:	20003094 	.word	0x20003094
 8001ffc:	08007c34 	.word	0x08007c34
 8002000:	08007c68 	.word	0x08007c68
 8002004:	08007c86 	.word	0x08007c86
 8002008:	08007c7c 	.word	0x08007c7c
 800200c:	08007c8e 	.word	0x08007c8e

08002010 <user_provided_block_device_erase>:
	erase_ops++;
 8002010:	4a10      	ldr	r2, [pc, #64]	; (8002054 <user_provided_block_device_erase+0x44>)
{
 8002012:	b510      	push	{r4, lr}
	erase_ops++;
 8002014:	6813      	ldr	r3, [r2, #0]
	uint32_t sector_address = block * c->block_size;
 8002016:	69c4      	ldr	r4, [r0, #28]
	DBG_println("[ERASE] Block: %d, addr = %d", (int) block, sector_address);
 8002018:	480f      	ldr	r0, [pc, #60]	; (8002058 <user_provided_block_device_erase+0x48>)
	uint32_t sector_address = block * c->block_size;
 800201a:	434c      	muls	r4, r1
	erase_ops++;
 800201c:	3301      	adds	r3, #1
 800201e:	6013      	str	r3, [r2, #0]
	DBG_println("[ERASE] Block: %d, addr = %d", (int) block, sector_address);
 8002020:	4622      	mov	r2, r4
 8002022:	f000 fbdb 	bl	80027dc <DBG_println>
	DBG_println("Enabling writing...");
 8002026:	480d      	ldr	r0, [pc, #52]	; (800205c <user_provided_block_device_erase+0x4c>)
 8002028:	f000 fbd8 	bl	80027dc <DBG_println>
	spi_write_enable();
 800202c:	f000 fab2 	bl	8002594 <spi_write_enable>
	HAL_Delay(10);
 8002030:	200a      	movs	r0, #10
 8002032:	f7fe ffd3 	bl	8000fdc <HAL_Delay>
	spi_read_status_1();
 8002036:	f000 fb71 	bl	800271c <spi_read_status_1>
	spi_erase_sector(sector_address);
 800203a:	4620      	mov	r0, r4
 800203c:	f000 fb46 	bl	80026cc <spi_erase_sector>
	while (spi_read_status_1() & STATUS_REGISTER_1_BUSY) {
 8002040:	f000 fb6c 	bl	800271c <spi_read_status_1>
 8002044:	f010 0001 	ands.w	r0, r0, #1
 8002048:	d100      	bne.n	800204c <user_provided_block_device_erase+0x3c>
}
 800204a:	bd10      	pop	{r4, pc}
		HAL_Delay(10);
 800204c:	200a      	movs	r0, #10
 800204e:	f7fe ffc5 	bl	8000fdc <HAL_Delay>
 8002052:	e7f5      	b.n	8002040 <user_provided_block_device_erase+0x30>
 8002054:	2000008c 	.word	0x2000008c
 8002058:	08007c03 	.word	0x08007c03
 800205c:	08007c20 	.word	0x08007c20

08002060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002060:	b510      	push	{r4, lr}
 8002062:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002064:	2234      	movs	r2, #52	; 0x34
 8002066:	2100      	movs	r1, #0
 8002068:	a807      	add	r0, sp, #28
 800206a:	f004 fd51 	bl	8006b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800206e:	2100      	movs	r1, #0
 8002070:	2214      	movs	r2, #20
 8002072:	a802      	add	r0, sp, #8
 8002074:	f004 fd4c 	bl	8006b10 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	2400      	movs	r4, #0
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <SystemClock_Config+0x74>)
 800207c:	9400      	str	r4, [sp, #0]
 800207e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002080:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <SystemClock_Config+0x78>)
 8002092:	9401      	str	r4, [sp, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800209e:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a8:	2302      	movs	r3, #2
 80020aa:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ac:	2301      	movs	r3, #1
 80020ae:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b0:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b2:	2310      	movs	r3, #16
 80020b4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b6:	f7ff fc6b 	bl	8001990 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ba:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020bc:	4621      	mov	r1, r4
 80020be:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020c2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020c6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c8:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020ca:	f7ff fba5 	bl	8001818 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80020ce:	b014      	add	sp, #80	; 0x50
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000

080020dc <main>:
{
 80020dc:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80020de:	f7fe ff51 	bl	8000f84 <HAL_Init>
  SystemClock_Config();
 80020e2:	f7ff ffbd 	bl	8002060 <SystemClock_Config>
  MX_GPIO_Init();
 80020e6:	f7ff ff0b 	bl	8001f00 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80020ea:	f000 f8e9 	bl	80022c0 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 80020ee:	f000 f9e9 	bl	80024c4 <MX_USART3_UART_Init>
  DBG_init(&huart3);
 80020f2:	4855      	ldr	r0, [pc, #340]	; (8002248 <main+0x16c>)
 80020f4:	f000 fb5c 	bl	80027b0 <DBG_init>
  DBG_clear_screen();
 80020f8:	f000 fb60 	bl	80027bc <DBG_clear_screen>
  DBG_println("QUADSPI Test - W25Q128FV");
 80020fc:	4853      	ldr	r0, [pc, #332]	; (800224c <main+0x170>)
 80020fe:	f000 fb6d 	bl	80027dc <DBG_println>
  HAL_Delay(1000);
 8002102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002106:	f7fe ff69 	bl	8000fdc <HAL_Delay>
  DBG_println("Mounting the FS...");
 800210a:	4851      	ldr	r0, [pc, #324]	; (8002250 <main+0x174>)
 800210c:	f000 fb66 	bl	80027dc <DBG_println>
  int err = lfs_mount(&lfs, &cfg);
 8002110:	4950      	ldr	r1, [pc, #320]	; (8002254 <main+0x178>)
 8002112:	4851      	ldr	r0, [pc, #324]	; (8002258 <main+0x17c>)
 8002114:	f002 fd16 	bl	8004b44 <lfs_mount>
  if (err) {
 8002118:	4601      	mov	r1, r0
 800211a:	b170      	cbz	r0, 800213a <main+0x5e>
	  DBG_println("Error at mount: %d", err);
 800211c:	484f      	ldr	r0, [pc, #316]	; (800225c <main+0x180>)
 800211e:	f000 fb5d 	bl	80027dc <DBG_println>
	  lfs_format(&lfs, &cfg);
 8002122:	494c      	ldr	r1, [pc, #304]	; (8002254 <main+0x178>)
 8002124:	484c      	ldr	r0, [pc, #304]	; (8002258 <main+0x17c>)
 8002126:	f004 fb71 	bl	800680c <lfs_format>
	  err = lfs_mount(&lfs, &cfg);
 800212a:	494a      	ldr	r1, [pc, #296]	; (8002254 <main+0x178>)
 800212c:	484a      	ldr	r0, [pc, #296]	; (8002258 <main+0x17c>)
 800212e:	f002 fd09 	bl	8004b44 <lfs_mount>
	  DBG_println("Error at second mount: %d", err);
 8002132:	4601      	mov	r1, r0
 8002134:	484a      	ldr	r0, [pc, #296]	; (8002260 <main+0x184>)
 8002136:	f000 fb51 	bl	80027dc <DBG_println>
  DBG_println("Opening file boot_count...");
 800213a:	484a      	ldr	r0, [pc, #296]	; (8002264 <main+0x188>)
 800213c:	f000 fb4e 	bl	80027dc <DBG_println>
  uint8_t boot_count = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f88d 3007 	strb.w	r3, [sp, #7]
  err = lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8002146:	4948      	ldr	r1, [pc, #288]	; (8002268 <main+0x18c>)
 8002148:	4a48      	ldr	r2, [pc, #288]	; (800226c <main+0x190>)
 800214a:	4843      	ldr	r0, [pc, #268]	; (8002258 <main+0x17c>)
 800214c:	f240 1303 	movw	r3, #259	; 0x103
 8002150:	f004 fb2a 	bl	80067a8 <lfs_file_open>
  if (err < 0) {
 8002154:	1e01      	subs	r1, r0, #0
 8002156:	da02      	bge.n	800215e <main+0x82>
	  DBG_println("Error at opening the file: %d", err);
 8002158:	4845      	ldr	r0, [pc, #276]	; (8002270 <main+0x194>)
 800215a:	f000 fb3f 	bl	80027dc <DBG_println>
  err = lfs_file_read(&lfs, &file, &boot_count, sizeof boot_count);
 800215e:	4942      	ldr	r1, [pc, #264]	; (8002268 <main+0x18c>)
 8002160:	483d      	ldr	r0, [pc, #244]	; (8002258 <main+0x17c>)
 8002162:	2301      	movs	r3, #1
 8002164:	f10d 0207 	add.w	r2, sp, #7
 8002168:	f003 fa78 	bl	800565c <lfs_file_read>
  if (err < 0) {
 800216c:	1e01      	subs	r1, r0, #0
 800216e:	da60      	bge.n	8002232 <main+0x156>
	  DBG_println("Error at reading the file: %d", err);
 8002170:	4840      	ldr	r0, [pc, #256]	; (8002274 <main+0x198>)
	  DBG_println("Boot count: %d", boot_count);
 8002172:	f000 fb33 	bl	80027dc <DBG_println>
  lfs_soff_t file_pos = lfs_file_tell(&lfs, &file);
 8002176:	493c      	ldr	r1, [pc, #240]	; (8002268 <main+0x18c>)
 8002178:	4837      	ldr	r0, [pc, #220]	; (8002258 <main+0x17c>)
 800217a:	f002 fc6b 	bl	8004a54 <lfs_file_tell>
  if (file_pos < 0) {
 800217e:	1e01      	subs	r1, r0, #0
	  DBG_println("Error while trying to get file position: %d", file_pos);
 8002180:	bfb4      	ite	lt
 8002182:	483d      	ldrlt	r0, [pc, #244]	; (8002278 <main+0x19c>)
	  DBG_println("Current file position: %d", file_pos);
 8002184:	483d      	ldrge	r0, [pc, #244]	; (800227c <main+0x1a0>)
 8002186:	f000 fb29 	bl	80027dc <DBG_println>
  boot_count += 1;
 800218a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  DBG_println("Boot count: %d", boot_count);
 800218e:	483c      	ldr	r0, [pc, #240]	; (8002280 <main+0x1a4>)
  boot_count += 1;
 8002190:	3101      	adds	r1, #1
 8002192:	b2c9      	uxtb	r1, r1
 8002194:	f88d 1007 	strb.w	r1, [sp, #7]
  DBG_println("Boot count: %d", boot_count);
 8002198:	f000 fb20 	bl	80027dc <DBG_println>
  err = lfs_file_rewind(&lfs, &file);
 800219c:	4932      	ldr	r1, [pc, #200]	; (8002268 <main+0x18c>)
 800219e:	482e      	ldr	r0, [pc, #184]	; (8002258 <main+0x17c>)
 80021a0:	f003 fb7a 	bl	8005898 <lfs_file_rewind>
  if (err < 0) {
 80021a4:	1e01      	subs	r1, r0, #0
 80021a6:	da4b      	bge.n	8002240 <main+0x164>
	  DBG_println("Error at rewinding the file: %d", err);
 80021a8:	4836      	ldr	r0, [pc, #216]	; (8002284 <main+0x1a8>)
 80021aa:	f000 fb17 	bl	80027dc <DBG_println>
  file_pos = lfs_file_tell(&lfs, &file);
 80021ae:	492e      	ldr	r1, [pc, #184]	; (8002268 <main+0x18c>)
 80021b0:	4829      	ldr	r0, [pc, #164]	; (8002258 <main+0x17c>)
 80021b2:	f002 fc4f 	bl	8004a54 <lfs_file_tell>
  if (file_pos < 0) {
 80021b6:	1e01      	subs	r1, r0, #0
	  DBG_println("Error while trying to get file position: %d", file_pos);
 80021b8:	bfb4      	ite	lt
 80021ba:	482f      	ldrlt	r0, [pc, #188]	; (8002278 <main+0x19c>)
	  DBG_println("Current file position: %d", file_pos);
 80021bc:	482f      	ldrge	r0, [pc, #188]	; (800227c <main+0x1a0>)
 80021be:	f000 fb0d 	bl	80027dc <DBG_println>
  err = lfs_file_write(&lfs, &file, &boot_count, sizeof boot_count);
 80021c2:	f10d 0207 	add.w	r2, sp, #7
 80021c6:	2301      	movs	r3, #1
 80021c8:	4927      	ldr	r1, [pc, #156]	; (8002268 <main+0x18c>)
 80021ca:	4823      	ldr	r0, [pc, #140]	; (8002258 <main+0x17c>)
 80021cc:	f002 ffd0 	bl	8005170 <lfs_file_write>
  if (err < 0) {
 80021d0:	1e01      	subs	r1, r0, #0
	  DBG_println("Error at writing the file: %d", err);
 80021d2:	bfb4      	ite	lt
 80021d4:	482c      	ldrlt	r0, [pc, #176]	; (8002288 <main+0x1ac>)
	  DBG_println("Bytes written into the file: %d", err);
 80021d6:	482d      	ldrge	r0, [pc, #180]	; (800228c <main+0x1b0>)
 80021d8:	f000 fb00 	bl	80027dc <DBG_println>
  lfs_soff_t file_size = lfs_file_size(&lfs, &file);
 80021dc:	4922      	ldr	r1, [pc, #136]	; (8002268 <main+0x18c>)
 80021de:	481e      	ldr	r0, [pc, #120]	; (8002258 <main+0x17c>)
 80021e0:	f002 fc58 	bl	8004a94 <lfs_file_size>
  if (file_size < 0) {
 80021e4:	1e01      	subs	r1, r0, #0
	  DBG_println("Error while trying to get size of file: %d", file_size);
 80021e6:	bfb4      	ite	lt
 80021e8:	4829      	ldrlt	r0, [pc, #164]	; (8002290 <main+0x1b4>)
	  DBG_println("File size: %d", file_size);
 80021ea:	482a      	ldrge	r0, [pc, #168]	; (8002294 <main+0x1b8>)
 80021ec:	f000 faf6 	bl	80027dc <DBG_println>
  err = lfs_file_close(&lfs, &file);
 80021f0:	491d      	ldr	r1, [pc, #116]	; (8002268 <main+0x18c>)
 80021f2:	4819      	ldr	r0, [pc, #100]	; (8002258 <main+0x17c>)
 80021f4:	f004 f948 	bl	8006488 <lfs_file_close>
  DBG_println("Closing file: %d", err);
 80021f8:	4601      	mov	r1, r0
 80021fa:	4827      	ldr	r0, [pc, #156]	; (8002298 <main+0x1bc>)
 80021fc:	f000 faee 	bl	80027dc <DBG_println>
  DBG_println("Boot count: %d", boot_count);
 8002200:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002204:	481e      	ldr	r0, [pc, #120]	; (8002280 <main+0x1a4>)
 8002206:	f000 fae9 	bl	80027dc <DBG_println>
  lfs_unmount(&lfs);
 800220a:	4813      	ldr	r0, [pc, #76]	; (8002258 <main+0x17c>)
 800220c:	f002 fc76 	bl	8004afc <lfs_unmount>
  DBG_println("Total read operations: %d", read_ops);
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <main+0x1c0>)
 8002212:	4823      	ldr	r0, [pc, #140]	; (80022a0 <main+0x1c4>)
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	f000 fae1 	bl	80027dc <DBG_println>
  DBG_println("Total program operations: %d", program_ops);
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <main+0x1c8>)
 800221c:	4822      	ldr	r0, [pc, #136]	; (80022a8 <main+0x1cc>)
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	f000 fadc 	bl	80027dc <DBG_println>
  DBG_println("Total erase operations: %d", erase_ops);
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <main+0x1d0>)
 8002226:	4822      	ldr	r0, [pc, #136]	; (80022b0 <main+0x1d4>)
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	f000 fad7 	bl	80027dc <DBG_println>
  asm("NOP");
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <main+0x154>
	  DBG_println("Bytes read: %d", err);
 8002232:	4820      	ldr	r0, [pc, #128]	; (80022b4 <main+0x1d8>)
 8002234:	f000 fad2 	bl	80027dc <DBG_println>
	  DBG_println("Boot count: %d", boot_count);
 8002238:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800223c:	4810      	ldr	r0, [pc, #64]	; (8002280 <main+0x1a4>)
 800223e:	e798      	b.n	8002172 <main+0x96>
	  DBG_println("Rewind ok");
 8002240:	481d      	ldr	r0, [pc, #116]	; (80022b8 <main+0x1dc>)
 8002242:	f000 facb 	bl	80027dc <DBG_println>
 8002246:	e7b2      	b.n	80021ae <main+0xd2>
 8002248:	200031c8 	.word	0x200031c8
 800224c:	080079e0 	.word	0x080079e0
 8002250:	080079f9 	.word	0x080079f9
 8002254:	08007998 	.word	0x08007998
 8002258:	20003104 	.word	0x20003104
 800225c:	08007a0c 	.word	0x08007a0c
 8002260:	08007a1f 	.word	0x08007a1f
 8002264:	08007a39 	.word	0x08007a39
 8002268:	200030b0 	.word	0x200030b0
 800226c:	08007a54 	.word	0x08007a54
 8002270:	08007a5f 	.word	0x08007a5f
 8002274:	08007a7d 	.word	0x08007a7d
 8002278:	08007ab9 	.word	0x08007ab9
 800227c:	08007ae5 	.word	0x08007ae5
 8002280:	08007aaa 	.word	0x08007aaa
 8002284:	08007aff 	.word	0x08007aff
 8002288:	08007b29 	.word	0x08007b29
 800228c:	08007b47 	.word	0x08007b47
 8002290:	08007b67 	.word	0x08007b67
 8002294:	08007b92 	.word	0x08007b92
 8002298:	08007ba0 	.word	0x08007ba0
 800229c:	20003098 	.word	0x20003098
 80022a0:	08007bb1 	.word	0x08007bb1
 80022a4:	20003094 	.word	0x20003094
 80022a8:	08007bcb 	.word	0x08007bcb
 80022ac:	2000008c 	.word	0x2000008c
 80022b0:	08007be8 	.word	0x08007be8
 80022b4:	08007a9b 	.word	0x08007a9b
 80022b8:	08007b1f 	.word	0x08007b1f

080022bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022bc:	4770      	bx	lr
	...

080022c0 <MX_QUADSPI_Init>:

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{

  hqspi.Instance = QUADSPI;
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.ClockPrescaler = 255;
  hqspi.Init.FifoThreshold = 4;
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <MX_QUADSPI_Init+0x38>)
{
 80022c4:	b508      	push	{r3, lr}
  hqspi.Init.FifoThreshold = 4;
 80022c6:	f04f 0c04 	mov.w	ip, #4
 80022ca:	23ff      	movs	r3, #255	; 0xff
 80022cc:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
  hqspi.Init.FlashSize = 23;
 80022d0:	2217      	movs	r2, #23
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80022d2:	2300      	movs	r3, #0
  hqspi.Init.FlashSize = 23;
 80022d4:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80022d6:	2201      	movs	r2, #1
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80022d8:	60c3      	str	r3, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80022da:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80022dc:	6182      	str	r2, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80022de:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80022e0:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80022e2:	f7ff f8d1 	bl	8001488 <HAL_QSPI_Init>
 80022e6:	b118      	cbz	r0, 80022f0 <MX_QUADSPI_Init+0x30>
  {
    Error_Handler();
  }

}
 80022e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80022ec:	f7ff bfe6 	b.w	80022bc <Error_Handler>
 80022f0:	bd08      	pop	{r3, pc}
 80022f2:	bf00      	nop
 80022f4:	2000317c 	.word	0x2000317c
 80022f8:	a0001000 	.word	0xa0001000

080022fc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fe:	2214      	movs	r2, #20
{
 8002300:	b08b      	sub	sp, #44	; 0x2c
 8002302:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	2100      	movs	r1, #0
 8002306:	eb0d 0002 	add.w	r0, sp, r2
 800230a:	f004 fc01 	bl	8006b10 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_QSPI_MspInit+0xc8>)
 8002312:	429a      	cmp	r2, r3
 8002314:	d154      	bne.n	80023c0 <HAL_QSPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_QSPI_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	482c      	ldr	r0, [pc, #176]	; (80023cc <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800231a:	2400      	movs	r4, #0
 800231c:	9401      	str	r4, [sp, #4]
 800231e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002320:	f042 0202 	orr.w	r2, r2, #2
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
 8002326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002328:	f002 0202 	and.w	r2, r2, #2
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002330:	9402      	str	r4, [sp, #8]
 8002332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	f002 0201 	and.w	r2, r2, #1
 8002340:	9202      	str	r2, [sp, #8]
 8002342:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	9403      	str	r4, [sp, #12]
 8002346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002348:	f042 0202 	orr.w	r2, r2, #2
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
 800234e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002350:	f002 0202 	and.w	r2, r2, #2
 8002354:	9203      	str	r2, [sp, #12]
 8002356:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002358:	9404      	str	r4, [sp, #16]
 800235a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235c:	f042 0204 	orr.w	r2, r2, #4
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002368:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800236c:	2709      	movs	r7, #9
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002372:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002374:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800237a:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f7fe fee2 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002380:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	a905      	add	r1, sp, #20
 8002384:	4812      	ldr	r0, [pc, #72]	; (80023d0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002386:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800238e:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f7fe fed8 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002394:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002398:	a905      	add	r1, sp, #20
 800239a:	480e      	ldr	r0, [pc, #56]	; (80023d4 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800239c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80023a4:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a6:	f7fe fecd 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023aa:	2340      	movs	r3, #64	; 0x40
 80023ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023b0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b2:	4807      	ldr	r0, [pc, #28]	; (80023d0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ba:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f7fe fec2 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80023c0:	b00b      	add	sp, #44	; 0x2c
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c4:	a0001000 	.word	0xa0001000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800

080023d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_MspInit+0x34>)
 80023dc:	2100      	movs	r1, #0
 80023de:	9100      	str	r1, [sp, #0]
 80023e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44
 80023e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023ee:	9200      	str	r2, [sp, #0]
 80023f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	9101      	str	r1, [sp, #4]
 80023f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	b002      	add	sp, #8
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <NMI_Handler>:
 8002410:	4770      	bx	lr

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	e7fe      	b.n	8002414 <MemManage_Handler>

08002416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	e7fe      	b.n	8002418 <UsageFault_Handler>

0800241a <SVC_Handler>:
 800241a:	4770      	bx	lr

0800241c <DebugMon_Handler>:
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241e:	4770      	bx	lr

08002420 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002420:	f7fe bdca 	b.w	8000fb8 <HAL_IncTick>

08002424 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	460e      	mov	r6, r1
 8002428:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	460c      	mov	r4, r1
 800242c:	1ba3      	subs	r3, r4, r6
 800242e:	429d      	cmp	r5, r3
 8002430:	dc01      	bgt.n	8002436 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002432:	4628      	mov	r0, r5
 8002434:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002436:	f3af 8000 	nop.w
 800243a:	f804 0b01 	strb.w	r0, [r4], #1
 800243e:	e7f5      	b.n	800242c <_read+0x8>

08002440 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	460e      	mov	r6, r1
 8002444:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002446:	460c      	mov	r4, r1
 8002448:	1ba3      	subs	r3, r4, r6
 800244a:	429d      	cmp	r5, r3
 800244c:	dc01      	bgt.n	8002452 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800244e:	4628      	mov	r0, r5
 8002450:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002452:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002456:	f3af 8000 	nop.w
 800245a:	e7f5      	b.n	8002448 <_write+0x8>

0800245c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800245c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <_sbrk+0x2c>)
 8002460:	6819      	ldr	r1, [r3, #0]
{
 8002462:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002464:	b909      	cbnz	r1, 800246a <_sbrk+0xe>
		heap_end = &end;
 8002466:	4909      	ldr	r1, [pc, #36]	; (800248c <_sbrk+0x30>)
 8002468:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800246a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800246c:	4669      	mov	r1, sp
 800246e:	4402      	add	r2, r0
 8002470:	428a      	cmp	r2, r1
 8002472:	d906      	bls.n	8002482 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002474:	f004 faf8 	bl	8006a68 <__errno>
 8002478:	230c      	movs	r3, #12
 800247a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002482:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002484:	bd08      	pop	{r3, pc}
 8002486:	bf00      	nop
 8002488:	2000309c 	.word	0x2000309c
 800248c:	2000320c 	.word	0x2000320c

08002490 <_close>:

int _close(int file)
{
	return -1;
}
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	4770      	bx	lr

08002496 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800249c:	2000      	movs	r0, #0
 800249e:	4770      	bx	lr

080024a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80024a0:	2001      	movs	r0, #1
 80024a2:	4770      	bx	lr

080024a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80024a4:	2000      	movs	r0, #0
 80024a6:	4770      	bx	lr

080024a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SystemInit+0x18>)
 80024aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80024b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024c4:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80024c6:	480b      	ldr	r0, [pc, #44]	; (80024f4 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_USART3_UART_Init+0x34>)
 80024ca:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80024ce:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024d2:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024d4:	2300      	movs	r3, #0
 80024d6:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024d8:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024da:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024dc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024e2:	f7ff fc7f 	bl	8001de4 <HAL_UART_Init>
 80024e6:	b118      	cbz	r0, 80024f0 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80024e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80024ec:	f7ff bee6 	b.w	80022bc <Error_Handler>
 80024f0:	bd08      	pop	{r3, pc}
 80024f2:	bf00      	nop
 80024f4:	200031c8 	.word	0x200031c8
 80024f8:	40004800 	.word	0x40004800

080024fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fe:	4604      	mov	r4, r0
 8002500:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	2214      	movs	r2, #20
 8002504:	2100      	movs	r1, #0
 8002506:	a803      	add	r0, sp, #12
 8002508:	f004 fb02 	bl	8006b10 <memset>
  if(uartHandle->Instance==USART3)
 800250c:	6822      	ldr	r2, [r4, #0]
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_UART_MspInit+0x8c>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d137      	bne.n	8002584 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002514:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002518:	2400      	movs	r4, #0
 800251a:	9400      	str	r4, [sp, #0]
 800251c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251e:	481b      	ldr	r0, [pc, #108]	; (800258c <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002520:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
 8002526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002528:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800252c:	9200      	str	r2, [sp, #0]
 800252e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002530:	9401      	str	r4, [sp, #4]
 8002532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002534:	f042 0204 	orr.w	r2, r2, #4
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
 800253a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253c:	f002 0204 	and.w	r2, r2, #4
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	9402      	str	r4, [sp, #8]
 8002546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002548:	f042 0202 	orr.w	r2, r2, #2
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800255a:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800255e:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002560:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002562:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002568:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256a:	f7fe fdeb 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800256e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	a903      	add	r1, sp, #12
 8002574:	4806      	ldr	r0, [pc, #24]	; (8002590 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002576:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800257e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f7fe fde0 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002584:	b009      	add	sp, #36	; 0x24
 8002586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002588:	40004800 	.word	0x40004800
 800258c:	40020800 	.word	0x40020800
 8002590:	40020400 	.word	0x40020400

08002594 <spi_write_enable>:
	QPI_INSTRUCTION_READ_BLOCK_LOCK = 0x3D,
} W25Q_qpi_instruction;

/* set WEL to 1 (SR1) */
uint32_t spi_write_enable(void)
{
 8002594:	b510      	push	{r4, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
	HAL_StatusTypeDef rcv_err = HAL_OK;

	QSPI_CommandTypeDef command = {
 8002598:	2238      	movs	r2, #56	; 0x38
 800259a:	2100      	movs	r1, #0
 800259c:	4668      	mov	r0, sp
 800259e:	f004 fab7 	bl	8006b10 <memset>
 80025a2:	2306      	movs	r3, #6
 80025a4:	9300      	str	r3, [sp, #0]
		/* misc */
		.DdrMode = QSPI_DDR_MODE_DISABLE,
		.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
	};

	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 80025a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	QSPI_CommandTypeDef command = {
 80025aa:	f44f 7380 	mov.w	r3, #256	; 0x100
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 80025ae:	4669      	mov	r1, sp
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <spi_write_enable+0x38>)
	QSPI_CommandTypeDef command = {
 80025b2:	9306      	str	r3, [sp, #24]
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 80025b4:	f7fe ffba 	bl	800152c <HAL_QSPI_Command>

	if (HAL_OK != rcv_err) {
 80025b8:	4604      	mov	r4, r0
 80025ba:	b118      	cbz	r0, 80025c4 <spi_write_enable+0x30>
		DBG_println("Error while trying to send the QSPI command [%d]", rcv_err);
 80025bc:	4601      	mov	r1, r0
 80025be:	4804      	ldr	r0, [pc, #16]	; (80025d0 <spi_write_enable+0x3c>)
 80025c0:	f000 f90c 	bl	80027dc <DBG_println>
		return rcv_err;
	}

	return rcv_err;
}
 80025c4:	4620      	mov	r0, r4
 80025c6:	b00e      	add	sp, #56	; 0x38
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	bf00      	nop
 80025cc:	2000317c 	.word	0x2000317c
 80025d0:	08007d6b 	.word	0x08007d6b

080025d4 <spi_read_data>:

	return rcv_err;
}

uint32_t spi_read_data(uint32_t addr, uint8_t *buffer, size_t buffer_sz)
{
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	4614      	mov	r4, r2
 80025da:	4606      	mov	r6, r0
	HAL_StatusTypeDef rcv_err = HAL_OK;

	QSPI_CommandTypeDef command = {
 80025dc:	2238      	movs	r2, #56	; 0x38
{
 80025de:	460d      	mov	r5, r1
	QSPI_CommandTypeDef command = {
 80025e0:	4668      	mov	r0, sp
 80025e2:	2100      	movs	r1, #0
 80025e4:	f004 fa94 	bl	8006b10 <memset>
 80025e8:	2303      	movs	r3, #3
 80025ea:	e88d 0048 	stmia.w	sp, {r3, r6}
 80025ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f2:	9303      	str	r3, [sp, #12]
 80025f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f8:	9306      	str	r3, [sp, #24]
 80025fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fe:	9307      	str	r3, [sp, #28]
		/* misc */
		.DdrMode = QSPI_DDR_MODE_DISABLE,
		.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
	};

	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 8002600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	QSPI_CommandTypeDef command = {
 8002604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 8002608:	4669      	mov	r1, sp
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <spi_read_data+0x6c>)
	QSPI_CommandTypeDef command = {
 800260c:	940a      	str	r4, [sp, #40]	; 0x28
 800260e:	9309      	str	r3, [sp, #36]	; 0x24
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 8002610:	f7fe ff8c 	bl	800152c <HAL_QSPI_Command>

	if (HAL_OK != rcv_err) {
 8002614:	4604      	mov	r4, r0
 8002616:	b130      	cbz	r0, 8002626 <spi_read_data+0x52>
		DBG_println("Error while trying to send the QSPI command [%d]", rcv_err);
 8002618:	4601      	mov	r1, r0
 800261a:	480a      	ldr	r0, [pc, #40]	; (8002644 <spi_read_data+0x70>)
	/* TODO: Calculate the timeout based on the spi clock rate */
	uint32_t rcv_timeout = 1000 * 5;
	rcv_err = HAL_QSPI_Receive(&hqspi, buffer, rcv_timeout);

	if (HAL_OK != rcv_err) {
		DBG_println("Error while trying to read data[%d]", rcv_err);
 800261c:	f000 f8de 	bl	80027dc <DBG_println>
		return rcv_err;
	}

	return rcv_err;
}
 8002620:	4620      	mov	r0, r4
 8002622:	b00e      	add	sp, #56	; 0x38
 8002624:	bd70      	pop	{r4, r5, r6, pc}
	rcv_err = HAL_QSPI_Receive(&hqspi, buffer, rcv_timeout);
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4629      	mov	r1, r5
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <spi_read_data+0x6c>)
 800262e:	f7ff f861 	bl	80016f4 <HAL_QSPI_Receive>
	if (HAL_OK != rcv_err) {
 8002632:	4604      	mov	r4, r0
 8002634:	2800      	cmp	r0, #0
 8002636:	d0f3      	beq.n	8002620 <spi_read_data+0x4c>
		DBG_println("Error while trying to read data[%d]", rcv_err);
 8002638:	4601      	mov	r1, r0
 800263a:	4803      	ldr	r0, [pc, #12]	; (8002648 <spi_read_data+0x74>)
 800263c:	e7ee      	b.n	800261c <spi_read_data+0x48>
 800263e:	bf00      	nop
 8002640:	2000317c 	.word	0x2000317c
 8002644:	08007d6b 	.word	0x08007d6b
 8002648:	08007d08 	.word	0x08007d08

0800264c <spi_page_program>:
 * that the number of clocks cannot exceed the remaining
 * page length. If more than 256 bytes are sent to the
 * device the addressing will wrap to the beginning
 * of the page and overwrite previously sent data. */
uint32_t spi_page_program(uint32_t offset, const uint8_t *buffer, size_t buffer_sz)
{
 800264c:	b570      	push	{r4, r5, r6, lr}
	HAL_StatusTypeDef rcv_err = HAL_OK;

	if (PAGE_SIZE < buffer_sz) {
 800264e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8002652:	b08e      	sub	sp, #56	; 0x38
 8002654:	4606      	mov	r6, r0
 8002656:	460d      	mov	r5, r1
 8002658:	4614      	mov	r4, r2
	if (PAGE_SIZE < buffer_sz) {
 800265a:	d902      	bls.n	8002662 <spi_page_program+0x16>
		return rcv_err;
 800265c:	2000      	movs	r0, #0
		DBG_println("Error while trying to page program [%d]", rcv_err);
		return rcv_err;
	}

	return rcv_err;
}
 800265e:	b00e      	add	sp, #56	; 0x38
 8002660:	bd70      	pop	{r4, r5, r6, pc}
	QSPI_CommandTypeDef command = {
 8002662:	2238      	movs	r2, #56	; 0x38
 8002664:	2100      	movs	r1, #0
 8002666:	4668      	mov	r0, sp
 8002668:	f004 fa52 	bl	8006b10 <memset>
 800266c:	2302      	movs	r3, #2
 800266e:	e88d 0048 	stmia.w	sp, {r3, r6}
 8002672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002676:	9303      	str	r3, [sp, #12]
 8002678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267c:	9306      	str	r3, [sp, #24]
 800267e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002682:	9307      	str	r3, [sp, #28]
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 8002684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	QSPI_CommandTypeDef command = {
 8002688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 800268c:	4669      	mov	r1, sp
 800268e:	480c      	ldr	r0, [pc, #48]	; (80026c0 <spi_page_program+0x74>)
	QSPI_CommandTypeDef command = {
 8002690:	940a      	str	r4, [sp, #40]	; 0x28
 8002692:	9309      	str	r3, [sp, #36]	; 0x24
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 8002694:	f7fe ff4a 	bl	800152c <HAL_QSPI_Command>
	if (HAL_OK != rcv_err) {
 8002698:	4604      	mov	r4, r0
 800269a:	b128      	cbz	r0, 80026a8 <spi_page_program+0x5c>
		DBG_println("Error while trying to send the QSPI command [%d]", rcv_err);
 800269c:	4601      	mov	r1, r0
 800269e:	4809      	ldr	r0, [pc, #36]	; (80026c4 <spi_page_program+0x78>)
		DBG_println("Error while trying to page program [%d]", rcv_err);
 80026a0:	f000 f89c 	bl	80027dc <DBG_println>
		return rcv_err;
 80026a4:	4620      	mov	r0, r4
 80026a6:	e7da      	b.n	800265e <spi_page_program+0x12>
	rcv_err = HAL_QSPI_Transmit(&hqspi, buffer, tx_timeout);
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4629      	mov	r1, r5
 80026ae:	4804      	ldr	r0, [pc, #16]	; (80026c0 <spi_page_program+0x74>)
 80026b0:	f7fe ffc1 	bl	8001636 <HAL_QSPI_Transmit>
	if (HAL_OK != rcv_err) {
 80026b4:	4604      	mov	r4, r0
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d0d0      	beq.n	800265c <spi_page_program+0x10>
		DBG_println("Error while trying to page program [%d]", rcv_err);
 80026ba:	4601      	mov	r1, r0
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <spi_page_program+0x7c>)
 80026be:	e7ef      	b.n	80026a0 <spi_page_program+0x54>
 80026c0:	2000317c 	.word	0x2000317c
 80026c4:	08007d6b 	.word	0x08007d6b
 80026c8:	08007ce0 	.word	0x08007ce0

080026cc <spi_erase_sector>:

	return rcv_err;
}

uint32_t spi_erase_sector(uint32_t addr)
{
 80026cc:	b510      	push	{r4, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	4604      	mov	r4, r0
	HAL_StatusTypeDef rcv_err = HAL_ERROR;

	QSPI_CommandTypeDef command = {
 80026d2:	2238      	movs	r2, #56	; 0x38
 80026d4:	2100      	movs	r1, #0
 80026d6:	4668      	mov	r0, sp
 80026d8:	f004 fa1a 	bl	8006b10 <memset>
 80026dc:	2320      	movs	r3, #32
 80026de:	e88d 0018 	stmia.w	sp, {r3, r4}
 80026e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ec:	9306      	str	r3, [sp, #24]
		/* misc */
		.DdrMode = QSPI_DDR_MODE_DISABLE,
		.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
	};

	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 80026ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	QSPI_CommandTypeDef command = {
 80026f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 80026f6:	4669      	mov	r1, sp
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <spi_erase_sector+0x48>)
	QSPI_CommandTypeDef command = {
 80026fa:	9307      	str	r3, [sp, #28]
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 80026fc:	f7fe ff16 	bl	800152c <HAL_QSPI_Command>

	if (HAL_OK != rcv_err) {
 8002700:	4604      	mov	r4, r0
 8002702:	b118      	cbz	r0, 800270c <spi_erase_sector+0x40>
		DBG_println("Error while trying to send the QSPI command [%d]", rcv_err);
 8002704:	4601      	mov	r1, r0
 8002706:	4804      	ldr	r0, [pc, #16]	; (8002718 <spi_erase_sector+0x4c>)
 8002708:	f000 f868 	bl	80027dc <DBG_println>
	}

	return rcv_err;
}
 800270c:	4620      	mov	r0, r4
 800270e:	b00e      	add	sp, #56	; 0x38
 8002710:	bd10      	pop	{r4, pc}
 8002712:	bf00      	nop
 8002714:	2000317c 	.word	0x2000317c
 8002718:	08007d6b 	.word	0x08007d6b

0800271c <spi_read_status_1>:

	return rcv_err;
}

uint8_t spi_read_status_1(void)
{
 800271c:	b500      	push	{lr}
 800271e:	b091      	sub	sp, #68	; 0x44
	HAL_StatusTypeDef rcv_err = HAL_OK;

	uint8_t status1[1] = {0};
 8002720:	2100      	movs	r1, #0

	QSPI_CommandTypeDef command = {
 8002722:	2238      	movs	r2, #56	; 0x38
 8002724:	a802      	add	r0, sp, #8
	uint8_t status1[1] = {0};
 8002726:	f88d 1004 	strb.w	r1, [sp, #4]
	QSPI_CommandTypeDef command = {
 800272a:	f004 f9f1 	bl	8006b10 <memset>
 800272e:	2305      	movs	r3, #5
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002736:	9308      	str	r3, [sp, #32]
 8002738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800273c:	930b      	str	r3, [sp, #44]	; 0x2c
		/* misc */
		.DdrMode = QSPI_DDR_MODE_DISABLE,
		.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
	};

	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 800273e:	a902      	add	r1, sp, #8
	QSPI_CommandTypeDef command = {
 8002740:	2301      	movs	r3, #1
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 8002742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <spi_read_status_1+0x64>)
	QSPI_CommandTypeDef command = {
 8002748:	930c      	str	r3, [sp, #48]	; 0x30
	rcv_err = HAL_QSPI_Command(&hqspi, &command, 1000);
 800274a:	f7fe feef 	bl	800152c <HAL_QSPI_Command>

	if (HAL_OK == rcv_err) {
 800274e:	4601      	mov	r1, r0
 8002750:	b998      	cbnz	r0, 800277a <spi_read_status_1+0x5e>
		rcv_err = HAL_QSPI_Receive(&hqspi, status1, 1000);
 8002752:	a901      	add	r1, sp, #4
 8002754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <spi_read_status_1+0x64>)
 800275a:	f7fe ffcb 	bl	80016f4 <HAL_QSPI_Receive>

		if (HAL_OK != rcv_err) {
 800275e:	4601      	mov	r1, r0
 8002760:	b138      	cbz	r0, 8002772 <spi_read_status_1+0x56>
			DBG_println("Error while trying to read status1 register [%d]", rcv_err);
 8002762:	4808      	ldr	r0, [pc, #32]	; (8002784 <spi_read_status_1+0x68>)
			DBG_println("WEL: %d", status1[0] & (1 << 1) ? 1 : 0);
			DBG_println("BUSY: %d", status1[0] & (1 << 0) ? 1 : 0);
#endif
		}
	} else {
		DBG_println("Error while trying to send the QSPI command [%d]", rcv_err);
 8002764:	f000 f83a 	bl	80027dc <DBG_println>
	}

	return status1[0];
}
 8002768:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800276c:	b011      	add	sp, #68	; 0x44
 800276e:	f85d fb04 	ldr.w	pc, [sp], #4
			DBG_println("Status1: %02X", status1[0]);
 8002772:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <spi_read_status_1+0x6c>)
 8002778:	e7f4      	b.n	8002764 <spi_read_status_1+0x48>
		DBG_println("Error while trying to send the QSPI command [%d]", rcv_err);
 800277a:	4804      	ldr	r0, [pc, #16]	; (800278c <spi_read_status_1+0x70>)
 800277c:	e7f2      	b.n	8002764 <spi_read_status_1+0x48>
 800277e:	bf00      	nop
 8002780:	2000317c 	.word	0x2000317c
 8002784:	08007d2c 	.word	0x08007d2c
 8002788:	08007d5d 	.word	0x08007d5d
 800278c:	08007d6b 	.word	0x08007d6b

08002790 <_putchar>:
#include "usart.h"

static UART_HandleTypeDef *DBG_UART_PORT = NULL;

void _putchar(char character)
{
 8002790:	b507      	push	{r0, r1, r2, lr}
 8002792:	a902      	add	r1, sp, #8
    HAL_UART_Transmit(DBG_UART_PORT, (uint8_t *) &character, 1, 250);
 8002794:	23fa      	movs	r3, #250	; 0xfa
{
 8002796:	f801 0d01 	strb.w	r0, [r1, #-1]!
    HAL_UART_Transmit(DBG_UART_PORT, (uint8_t *) &character, 1, 250);
 800279a:	4804      	ldr	r0, [pc, #16]	; (80027ac <_putchar+0x1c>)
 800279c:	2201      	movs	r2, #1
 800279e:	6800      	ldr	r0, [r0, #0]
 80027a0:	f7ff fb4e 	bl	8001e40 <HAL_UART_Transmit>
}
 80027a4:	b003      	add	sp, #12
 80027a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80027aa:	bf00      	nop
 80027ac:	200030a0 	.word	0x200030a0

080027b0 <DBG_init>:

void DBG_init(void *handle)
{
    DBG_UART_PORT = (UART_HandleTypeDef *) handle;
 80027b0:	4b01      	ldr	r3, [pc, #4]	; (80027b8 <DBG_init+0x8>)
 80027b2:	6018      	str	r0, [r3, #0]
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	200030a0 	.word	0x200030a0

080027bc <DBG_clear_screen>:
}

void DBG_clear_screen(void)
{
 80027bc:	b507      	push	{r0, r1, r2, lr}
	uint8_t clear_page = 0x0C;
	HAL_UART_Transmit(DBG_UART_PORT, &clear_page, 1, 250);
 80027be:	4806      	ldr	r0, [pc, #24]	; (80027d8 <DBG_clear_screen+0x1c>)
	uint8_t clear_page = 0x0C;
 80027c0:	a902      	add	r1, sp, #8
 80027c2:	230c      	movs	r3, #12
 80027c4:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_UART_Transmit(DBG_UART_PORT, &clear_page, 1, 250);
 80027c8:	2201      	movs	r2, #1
 80027ca:	23fa      	movs	r3, #250	; 0xfa
 80027cc:	6800      	ldr	r0, [r0, #0]
 80027ce:	f7ff fb37 	bl	8001e40 <HAL_UART_Transmit>
}
 80027d2:	b003      	add	sp, #12
 80027d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027d8:	200030a0 	.word	0x200030a0

080027dc <DBG_println>:

void DBG_println(const char *fmt, ...)
{
 80027dc:	b40f      	push	{r0, r1, r2, r3}
 80027de:	b507      	push	{r0, r1, r2, lr}
 80027e0:	a904      	add	r1, sp, #16
 80027e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list args;
	va_start(args, fmt);
 80027e6:	9101      	str	r1, [sp, #4]
	vprintf(fmt, args);
 80027e8:	f000 ff44 	bl	8003674 <vprintf_>
	va_end(args);

	HAL_UART_Transmit(DBG_UART_PORT, (uint8_t *) "\r\n", strlen("\r\n"), 250);
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <DBG_println+0x28>)
 80027ee:	4906      	ldr	r1, [pc, #24]	; (8002808 <DBG_println+0x2c>)
 80027f0:	6800      	ldr	r0, [r0, #0]
 80027f2:	23fa      	movs	r3, #250	; 0xfa
 80027f4:	2202      	movs	r2, #2
 80027f6:	f7ff fb23 	bl	8001e40 <HAL_UART_Transmit>
}
 80027fa:	b003      	add	sp, #12
 80027fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002800:	b004      	add	sp, #16
 8002802:	4770      	bx	lr
 8002804:	200030a0 	.word	0x200030a0
 8002808:	08007d9c 	.word	0x08007d9c

0800280c <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800280c:	4770      	bx	lr

0800280e <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800280e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002812:	461f      	mov	r7, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 8002816:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800281a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800281e:	460e      	mov	r6, r1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002820:	0799      	lsls	r1, r3, #30
{
 8002822:	4605      	mov	r5, r0
 8002824:	4614      	mov	r4, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002826:	d106      	bne.n	8002836 <_out_rev+0x28>
    for (size_t i = len; i < width; i++) {
 8002828:	eba9 0a02 	sub.w	sl, r9, r2
 800282c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800282e:	eb0a 0302 	add.w	r3, sl, r2
 8002832:	4299      	cmp	r1, r3
 8002834:	d812      	bhi.n	800285c <_out_rev+0x4e>
 8002836:	eb08 0a09 	add.w	sl, r8, r9
 800283a:	4491      	add	r9, r2
 800283c:	eba9 020a 	sub.w	r2, r9, sl
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  while (len) {
 8002840:	45c2      	cmp	sl, r8
 8002842:	4442      	add	r2, r8
 8002844:	d112      	bne.n	800286c <_out_rev+0x5e>
    out(buf[--len], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002848:	079b      	lsls	r3, r3, #30
 800284a:	d504      	bpl.n	8002856 <_out_rev+0x48>
    while (idx - start_idx < width) {
 800284c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800284e:	eba9 0304 	sub.w	r3, r9, r4
 8002852:	429a      	cmp	r2, r3
 8002854:	d810      	bhi.n	8002878 <_out_rev+0x6a>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 8002856:	4648      	mov	r0, r9
 8002858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      out(' ', buffer, idx++, maxlen);
 800285c:	f102 0b01 	add.w	fp, r2, #1
 8002860:	463b      	mov	r3, r7
 8002862:	4631      	mov	r1, r6
 8002864:	2020      	movs	r0, #32
 8002866:	47a8      	blx	r5
 8002868:	465a      	mov	r2, fp
 800286a:	e7df      	b.n	800282c <_out_rev+0x1e>
    out(buf[--len], buffer, idx++, maxlen);
 800286c:	463b      	mov	r3, r7
 800286e:	4631      	mov	r1, r6
 8002870:	f81a 0d01 	ldrb.w	r0, [sl, #-1]!
 8002874:	47a8      	blx	r5
 8002876:	e7e1      	b.n	800283c <_out_rev+0x2e>
      out(' ', buffer, idx++, maxlen);
 8002878:	464a      	mov	r2, r9
 800287a:	f109 0801 	add.w	r8, r9, #1
 800287e:	463b      	mov	r3, r7
 8002880:	4631      	mov	r1, r6
 8002882:	2020      	movs	r0, #32
 8002884:	47a8      	blx	r5
 8002886:	46c1      	mov	r9, r8
 8002888:	e7e0      	b.n	800284c <_out_rev+0x3e>

0800288a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800288a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800288e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8002890:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002894:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
 8002898:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800289c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80028a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80028a2:	f016 0f02 	tst.w	r6, #2
 80028a6:	d11d      	bne.n	80028e4 <_ntoa_format+0x5a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80028a8:	b14f      	cbz	r7, 80028be <_ntoa_format+0x34>
 80028aa:	f016 0f01 	tst.w	r6, #1
 80028ae:	d006      	beq.n	80028be <_ntoa_format+0x34>
 80028b0:	f1bc 0f00 	cmp.w	ip, #0
 80028b4:	d102      	bne.n	80028bc <_ntoa_format+0x32>
 80028b6:	f016 0f0c 	tst.w	r6, #12
 80028ba:	d000      	beq.n	80028be <_ntoa_format+0x34>
      width--;
 80028bc:	3f01      	subs	r7, #1
 80028be:	eb05 0904 	add.w	r9, r5, r4
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80028c2:	f04f 0a30 	mov.w	sl, #48	; 0x30
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028c6:	4544      	cmp	r4, r8
 80028c8:	d341      	bcc.n	800294e <_ntoa_format+0xc4>
 80028ca:	eb05 0904 	add.w	r9, r5, r4
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028ce:	f006 0a01 	and.w	sl, r6, #1
      buf[len++] = '0';
 80028d2:	f04f 0b30 	mov.w	fp, #48	; 0x30
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028d6:	f1ba 0f00 	cmp.w	sl, #0
 80028da:	d003      	beq.n	80028e4 <_ntoa_format+0x5a>
 80028dc:	42bc      	cmp	r4, r7
 80028de:	d201      	bcs.n	80028e4 <_ntoa_format+0x5a>
 80028e0:	2c1f      	cmp	r4, #31
 80028e2:	d93a      	bls.n	800295a <_ntoa_format+0xd0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80028e4:	f016 0f10 	tst.w	r6, #16
 80028e8:	d01f      	beq.n	800292a <_ntoa_format+0xa0>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80028ea:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80028ee:	d139      	bne.n	8002964 <_ntoa_format+0xda>
 80028f0:	b3c4      	cbz	r4, 8002964 <_ntoa_format+0xda>
 80028f2:	4544      	cmp	r4, r8
 80028f4:	d001      	beq.n	80028fa <_ntoa_format+0x70>
 80028f6:	42bc      	cmp	r4, r7
 80028f8:	d134      	bne.n	8002964 <_ntoa_format+0xda>
      len--;
      if (len && (base == 16U)) {
 80028fa:	f1b4 0801 	subs.w	r8, r4, #1
 80028fe:	d030      	beq.n	8002962 <_ntoa_format+0xd8>
 8002900:	f1be 0f10 	cmp.w	lr, #16
 8002904:	d13e      	bne.n	8002984 <_ntoa_format+0xfa>
        len--;
 8002906:	3c02      	subs	r4, #2
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002908:	f016 0f20 	tst.w	r6, #32
 800290c:	d135      	bne.n	800297a <_ntoa_format+0xf0>
 800290e:	2c1f      	cmp	r4, #31
 8002910:	d815      	bhi.n	800293e <_ntoa_format+0xb4>
      buf[len++] = 'x';
 8002912:	f04f 0e78 	mov.w	lr, #120	; 0x78
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'b';
 8002916:	f805 e004 	strb.w	lr, [r5, r4]
 800291a:	3401      	adds	r4, #1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800291c:	2c1f      	cmp	r4, #31
 800291e:	d80e      	bhi.n	800293e <_ntoa_format+0xb4>
      buf[len++] = '0';
 8002920:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002924:	f805 e004 	strb.w	lr, [r5, r4]
 8002928:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800292a:	2c1f      	cmp	r4, #31
 800292c:	d807      	bhi.n	800293e <_ntoa_format+0xb4>
    if (negative) {
 800292e:	f1bc 0f00 	cmp.w	ip, #0
 8002932:	d029      	beq.n	8002988 <_ntoa_format+0xfe>
      buf[len++] = '-';
 8002934:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
 8002938:	f805 e004 	strb.w	lr, [r5, r4]
 800293c:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800293e:	960c      	str	r6, [sp, #48]	; 0x30
 8002940:	970b      	str	r7, [sp, #44]	; 0x2c
 8002942:	940a      	str	r4, [sp, #40]	; 0x28
 8002944:	9509      	str	r5, [sp, #36]	; 0x24
}
 8002946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800294a:	f7ff bf60 	b.w	800280e <_out_rev>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800294e:	2c1f      	cmp	r4, #31
 8002950:	d8bb      	bhi.n	80028ca <_ntoa_format+0x40>
      buf[len++] = '0';
 8002952:	3401      	adds	r4, #1
 8002954:	f809 ab01 	strb.w	sl, [r9], #1
 8002958:	e7b5      	b.n	80028c6 <_ntoa_format+0x3c>
      buf[len++] = '0';
 800295a:	3401      	adds	r4, #1
 800295c:	f809 bb01 	strb.w	fp, [r9], #1
 8002960:	e7b9      	b.n	80028d6 <_ntoa_format+0x4c>
 8002962:	4644      	mov	r4, r8
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002964:	f1be 0f10 	cmp.w	lr, #16
 8002968:	d0ce      	beq.n	8002908 <_ntoa_format+0x7e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800296a:	f1be 0f02 	cmp.w	lr, #2
 800296e:	d1d5      	bne.n	800291c <_ntoa_format+0x92>
 8002970:	2c1f      	cmp	r4, #31
 8002972:	d8e4      	bhi.n	800293e <_ntoa_format+0xb4>
      buf[len++] = 'b';
 8002974:	f04f 0e62 	mov.w	lr, #98	; 0x62
 8002978:	e7cd      	b.n	8002916 <_ntoa_format+0x8c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800297a:	2c1f      	cmp	r4, #31
 800297c:	d8df      	bhi.n	800293e <_ntoa_format+0xb4>
      buf[len++] = 'X';
 800297e:	f04f 0e58 	mov.w	lr, #88	; 0x58
 8002982:	e7c8      	b.n	8002916 <_ntoa_format+0x8c>
 8002984:	4644      	mov	r4, r8
 8002986:	e7f0      	b.n	800296a <_ntoa_format+0xe0>
    else if (flags & FLAGS_PLUS) {
 8002988:	f016 0f04 	tst.w	r6, #4
 800298c:	d002      	beq.n	8002994 <_ntoa_format+0x10a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800298e:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 8002992:	e7d1      	b.n	8002938 <_ntoa_format+0xae>
    else if (flags & FLAGS_SPACE) {
 8002994:	f016 0f08 	tst.w	r6, #8
 8002998:	d0d1      	beq.n	800293e <_ntoa_format+0xb4>
      buf[len++] = ' ';
 800299a:	f04f 0e20 	mov.w	lr, #32
 800299e:	e7cb      	b.n	8002938 <_ntoa_format+0xae>

080029a0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80029a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a4:	b090      	sub	sp, #64	; 0x40
 80029a6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80029a8:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80029ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80029ae:	b90d      	cbnz	r5, 80029b4 <_ntoa_long+0x14>
    flags &= ~FLAGS_HASH;
 80029b0:	f027 0710 	bic.w	r7, r7, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80029b4:	057c      	lsls	r4, r7, #21
 80029b6:	d500      	bpl.n	80029ba <_ntoa_long+0x1a>
 80029b8:	b385      	cbz	r5, 8002a1c <_ntoa_long+0x7c>
 80029ba:	f017 0f20 	tst.w	r7, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80029be:	f04f 0600 	mov.w	r6, #0
 80029c2:	bf14      	ite	ne
 80029c4:	f04f 0c37 	movne.w	ip, #55	; 0x37
 80029c8:	f04f 0c57 	moveq.w	ip, #87	; 0x57
      const char digit = (char)(value % base);
 80029cc:	fbb5 f4fe 	udiv	r4, r5, lr
 80029d0:	fb0e 5414 	mls	r4, lr, r4, r5
 80029d4:	b2e4      	uxtb	r4, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80029d6:	2c09      	cmp	r4, #9
 80029d8:	f106 0601 	add.w	r6, r6, #1
 80029dc:	f10d 0820 	add.w	r8, sp, #32
 80029e0:	bf94      	ite	ls
 80029e2:	3430      	addls	r4, #48	; 0x30
 80029e4:	4464      	addhi	r4, ip
 80029e6:	44b0      	add	r8, r6
 80029e8:	b2e4      	uxtb	r4, r4
 80029ea:	f808 4c01 	strb.w	r4, [r8, #-1]
      value /= base;
 80029ee:	fbb5 f5fe 	udiv	r5, r5, lr
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80029f2:	b10d      	cbz	r5, 80029f8 <_ntoa_long+0x58>
 80029f4:	2e20      	cmp	r6, #32
 80029f6:	d1e9      	bne.n	80029cc <_ntoa_long+0x2c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80029f8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80029fa:	9405      	str	r4, [sp, #20]
 80029fc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80029fe:	9404      	str	r4, [sp, #16]
 8002a00:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8002a04:	9402      	str	r4, [sp, #8]
 8002a06:	ac08      	add	r4, sp, #32
 8002a08:	9706      	str	r7, [sp, #24]
 8002a0a:	f8cd e00c 	str.w	lr, [sp, #12]
 8002a0e:	9601      	str	r6, [sp, #4]
 8002a10:	9400      	str	r4, [sp, #0]
 8002a12:	f7ff ff3a 	bl	800288a <_ntoa_format>
}
 8002a16:	b010      	add	sp, #64	; 0x40
 8002a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  size_t len = 0U;
 8002a1c:	462e      	mov	r6, r5
 8002a1e:	e7eb      	b.n	80029f8 <_ntoa_long+0x58>

08002a20 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	b095      	sub	sp, #84	; 0x54
 8002a26:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8002a2a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8002a2c:	9009      	str	r0, [sp, #36]	; 0x24
 8002a2e:	469b      	mov	fp, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8002a30:	ea58 0309 	orrs.w	r3, r8, r9
    flags &= ~FLAGS_HASH;
 8002a34:	bf08      	it	eq
 8002a36:	f025 0510 	biceq.w	r5, r5, #16
{
 8002a3a:	4692      	mov	sl, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002a3c:	056a      	lsls	r2, r5, #21
{
 8002a3e:	910a      	str	r1, [sp, #40]	; 0x28
 8002a40:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8002a42:	9f23      	ldr	r7, [sp, #140]	; 0x8c
  if (!(flags & FLAGS_PRECISION) || value) {
 8002a44:	d502      	bpl.n	8002a4c <_ntoa_long_long+0x2c>
 8002a46:	ea58 0309 	orrs.w	r3, r8, r9
 8002a4a:	d03d      	beq.n	8002ac8 <_ntoa_long_long+0xa8>
 8002a4c:	f015 0f20 	tst.w	r5, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002a50:	bf14      	ite	ne
 8002a52:	2337      	movne	r3, #55	; 0x37
 8002a54:	2357      	moveq	r3, #87	; 0x57
 8002a56:	2400      	movs	r4, #0
 8002a58:	930b      	str	r3, [sp, #44]	; 0x2c
      const char digit = (char)(value % base);
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	4632      	mov	r2, r6
 8002a60:	463b      	mov	r3, r7
 8002a62:	f7fe f8cf 	bl	8000c04 <__aeabi_uldivmod>
 8002a66:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002a68:	2a09      	cmp	r2, #9
 8002a6a:	bf88      	it	hi
 8002a6c:	9b0b      	ldrhi	r3, [sp, #44]	; 0x2c
 8002a6e:	f104 0401 	add.w	r4, r4, #1
 8002a72:	bf88      	it	hi
 8002a74:	18d2      	addhi	r2, r2, r3
 8002a76:	ab0c      	add	r3, sp, #48	; 0x30
 8002a78:	bf98      	it	ls
 8002a7a:	3230      	addls	r2, #48	; 0x30
 8002a7c:	4423      	add	r3, r4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f803 2c01 	strb.w	r2, [r3, #-1]
      value /= base;
 8002a84:	4640      	mov	r0, r8
 8002a86:	463b      	mov	r3, r7
 8002a88:	4649      	mov	r1, r9
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	f7fe f8ba 	bl	8000c04 <__aeabi_uldivmod>
 8002a90:	4680      	mov	r8, r0
 8002a92:	4689      	mov	r9, r1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002a94:	ea58 0309 	orrs.w	r3, r8, r9
 8002a98:	d001      	beq.n	8002a9e <_ntoa_long_long+0x7e>
 8002a9a:	2c20      	cmp	r4, #32
 8002a9c:	d1dd      	bne.n	8002a5a <_ntoa_long_long+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002a9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002aa0:	9305      	str	r3, [sp, #20]
 8002aa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002aa4:	9304      	str	r3, [sp, #16]
 8002aa6:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8002aaa:	9302      	str	r3, [sp, #8]
 8002aac:	ab0c      	add	r3, sp, #48	; 0x30
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	9506      	str	r5, [sp, #24]
 8002ab2:	9603      	str	r6, [sp, #12]
 8002ab4:	9401      	str	r4, [sp, #4]
 8002ab6:	465b      	mov	r3, fp
 8002ab8:	4652      	mov	r2, sl
 8002aba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002abe:	f7ff fee4 	bl	800288a <_ntoa_format>
}
 8002ac2:	b015      	add	sp, #84	; 0x54
 8002ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t len = 0U;
 8002ac8:	2400      	movs	r4, #0
 8002aca:	e7e8      	b.n	8002a9e <_ntoa_long_long+0x7e>

08002acc <_out_char>:
  if (character) {
 8002acc:	b108      	cbz	r0, 8002ad2 <_out_char+0x6>
    _putchar(character);
 8002ace:	f7ff be5f 	b.w	8002790 <_putchar>
 8002ad2:	4770      	bx	lr
 8002ad4:	0000      	movs	r0, r0
	...

08002ad8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002adc:	b097      	sub	sp, #92	; 0x5c
 8002ade:	4692      	mov	sl, r2
 8002ae0:	469b      	mov	fp, r3

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002ae2:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
{
 8002ae6:	9007      	str	r0, [sp, #28]
 8002ae8:	9108      	str	r1, [sp, #32]
  if (value != value)
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
{
 8002aee:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 8002af2:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8002af4:	9e24      	ldr	r6, [sp, #144]	; 0x90
  if (value != value)
 8002af6:	f7fe f80b 	bl	8000b10 <__aeabi_dcmpeq>
 8002afa:	b960      	cbnz	r0, 8002b16 <_ftoa+0x3e>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002afc:	2303      	movs	r3, #3
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	4ba7      	ldr	r3, [pc, #668]	; (8002da0 <_ftoa+0x2c8>)
 8002b02:	9603      	str	r6, [sp, #12]
 8002b04:	9702      	str	r7, [sp, #8]
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4652      	mov	r2, sl
 8002b0a:	465b      	mov	r3, fp
 8002b0c:	9908      	ldr	r1, [sp, #32]
 8002b0e:	9807      	ldr	r0, [sp, #28]
 8002b10:	f7ff fe7d 	bl	800280e <_out_rev>
 8002b14:	e042      	b.n	8002b9c <_ftoa+0xc4>
  if (value < -DBL_MAX)
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002b1e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002b22:	f7fd ffff 	bl	8000b24 <__aeabi_dcmplt>
 8002b26:	b128      	cbz	r0, 8002b34 <_ftoa+0x5c>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002b28:	2304      	movs	r3, #4
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	9603      	str	r6, [sp, #12]
 8002b2e:	9702      	str	r7, [sp, #8]
 8002b30:	4b9c      	ldr	r3, [pc, #624]	; (8002da4 <_ftoa+0x2cc>)
 8002b32:	e7e8      	b.n	8002b06 <_ftoa+0x2e>
  if (value > DBL_MAX)
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	4b9b      	ldr	r3, [pc, #620]	; (8002da8 <_ftoa+0x2d0>)
 8002b3a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002b3e:	f7fe f80f 	bl	8000b60 <__aeabi_dcmpgt>
 8002b42:	b168      	cbz	r0, 8002b60 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002b44:	4a99      	ldr	r2, [pc, #612]	; (8002dac <_ftoa+0x2d4>)
 8002b46:	9603      	str	r6, [sp, #12]
 8002b48:	f006 0304 	and.w	r3, r6, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf08      	it	eq
 8002b50:	2203      	moveq	r2, #3
 8002b52:	4b97      	ldr	r3, [pc, #604]	; (8002db0 <_ftoa+0x2d8>)
 8002b54:	9702      	str	r7, [sp, #8]
 8002b56:	bf1c      	itt	ne
 8002b58:	4613      	movne	r3, r2
 8002b5a:	2204      	movne	r2, #4
 8002b5c:	9201      	str	r2, [sp, #4]
 8002b5e:	e7d2      	b.n	8002b06 <_ftoa+0x2e>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002b60:	a38b      	add	r3, pc, #556	; (adr r3, 8002d90 <_ftoa+0x2b8>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002b6a:	f7fd fff9 	bl	8000b60 <__aeabi_dcmpgt>
 8002b6e:	b938      	cbnz	r0, 8002b80 <_ftoa+0xa8>
 8002b70:	a389      	add	r3, pc, #548	; (adr r3, 8002d98 <_ftoa+0x2c0>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002b7a:	f7fd ffd3 	bl	8000b24 <__aeabi_dcmplt>
 8002b7e:	b180      	cbz	r0, 8002ba2 <_ftoa+0xca>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002b80:	ed9d 7b20 	vldr	d7, [sp, #128]	; 0x80
 8002b84:	9604      	str	r6, [sp, #16]
 8002b86:	9703      	str	r7, [sp, #12]
 8002b88:	f8cd 9008 	str.w	r9, [sp, #8]
 8002b8c:	ed8d 7b00 	vstr	d7, [sp]
 8002b90:	465b      	mov	r3, fp
 8002b92:	4652      	mov	r2, sl
 8002b94:	9908      	ldr	r1, [sp, #32]
 8002b96:	9807      	ldr	r0, [sp, #28]
 8002b98:	f000 f912 	bl	8002dc0 <_etoa>
}
 8002b9c:	b017      	add	sp, #92	; 0x5c
 8002b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (value < 0) {
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002baa:	f7fd ffbb 	bl	8000b24 <__aeabi_dcmplt>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d076      	beq.n	8002ca0 <_ftoa+0x1c8>
    value = 0 - value;
 8002bb2:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	f7fd fb8d 	bl	80002d8 <__aeabi_dsub>
 8002bbe:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
    negative = true;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	9309      	str	r3, [sp, #36]	; 0x24
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002bc6:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002bca:	bf08      	it	eq
 8002bcc:	f04f 0906 	moveq.w	r9, #6
 8002bd0:	2300      	movs	r3, #0
    buf[len++] = '0';
 8002bd2:	aa0e      	add	r2, sp, #56	; 0x38
 8002bd4:	2130      	movs	r1, #48	; 0x30
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002bd6:	f1b9 0f09 	cmp.w	r9, #9
 8002bda:	461c      	mov	r4, r3
 8002bdc:	d906      	bls.n	8002bec <_ftoa+0x114>
    buf[len++] = '0';
 8002bde:	54d1      	strb	r1, [r2, r3]
 8002be0:	1c63      	adds	r3, r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002be2:	2b20      	cmp	r3, #32
    prec--;
 8002be4:	f109 39ff 	add.w	r9, r9, #4294967295
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002be8:	d1f5      	bne.n	8002bd6 <_ftoa+0xfe>
 8002bea:	461c      	mov	r4, r3
  int whole = (int)value;
 8002bec:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002bf0:	f7fd ffc0 	bl	8000b74 <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 8002bf4:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <_ftoa+0x2dc>)
 8002bf6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002bfa:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
 8002bfe:	4605      	mov	r5, r0
  double tmp = (value - whole) * pow10[prec];
 8002c00:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002c04:	f7fd fcb6 	bl	8000574 <__aeabi_i2d>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002c10:	f7fd fb62 	bl	80002d8 <__aeabi_dsub>
 8002c14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002c18:	f7fd fd12 	bl	8000640 <__aeabi_dmul>
 8002c1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8002c20:	f7fd ffd0 	bl	8000bc4 <__aeabi_d2uiz>
 8002c24:	4680      	mov	r8, r0
  diff = tmp - frac;
 8002c26:	f7fd fc95 	bl	8000554 <__aeabi_ui2d>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c32:	f7fd fb51 	bl	80002d8 <__aeabi_dsub>
  if (diff > 0.5) {
 8002c36:	2200      	movs	r2, #0
 8002c38:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <_ftoa+0x2e0>)
  diff = tmp - frac;
 8002c3a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  if (diff > 0.5) {
 8002c3e:	f7fd ff8f 	bl	8000b60 <__aeabi_dcmpgt>
 8002c42:	b378      	cbz	r0, 8002ca4 <_ftoa+0x1cc>
    ++frac;
 8002c44:	f108 0801 	add.w	r8, r8, #1
    if (frac >= pow10[prec]) {
 8002c48:	4640      	mov	r0, r8
 8002c4a:	f7fd fc83 	bl	8000554 <__aeabi_ui2d>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002c56:	f7fd ff6f 	bl	8000b38 <__aeabi_dcmple>
 8002c5a:	b110      	cbz	r0, 8002c62 <_ftoa+0x18a>
      ++whole;
 8002c5c:	3501      	adds	r5, #1
      frac = 0;
 8002c5e:	f04f 0800 	mov.w	r8, #0
  if (prec == 0U) {
 8002c62:	f1b9 0f00 	cmp.w	r9, #0
 8002c66:	d14b      	bne.n	8002d00 <_ftoa+0x228>
    diff = value - (double)whole;
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f7fd fc83 	bl	8000574 <__aeabi_i2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8002c76:	f7fd fb2f 	bl	80002d8 <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <_ftoa+0x2e0>)
    diff = value - (double)whole;
 8002c7e:	4680      	mov	r8, r0
 8002c80:	4689      	mov	r9, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002c82:	f7fd ff4f 	bl	8000b24 <__aeabi_dcmplt>
 8002c86:	b130      	cbz	r0, 8002c96 <_ftoa+0x1be>
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <_ftoa+0x2e0>)
 8002c8c:	4640      	mov	r0, r8
 8002c8e:	4649      	mov	r1, r9
 8002c90:	f7fd ff66 	bl	8000b60 <__aeabi_dcmpgt>
 8002c94:	b110      	cbz	r0, 8002c9c <_ftoa+0x1c4>
 8002c96:	07e8      	lsls	r0, r5, #31
 8002c98:	d500      	bpl.n	8002c9c <_ftoa+0x1c4>
      ++whole;
 8002c9a:	3501      	adds	r5, #1
    buf[len++] = (char)(48 + (whole % 10));
 8002c9c:	230a      	movs	r3, #10
 8002c9e:	e058      	b.n	8002d52 <_ftoa+0x27a>
  bool negative = false;
 8002ca0:	9009      	str	r0, [sp, #36]	; 0x24
 8002ca2:	e790      	b.n	8002bc6 <_ftoa+0xee>
  else if (diff < 0.5) {
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <_ftoa+0x2e0>)
 8002ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002cac:	f7fd ff3a 	bl	8000b24 <__aeabi_dcmplt>
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d1d6      	bne.n	8002c62 <_ftoa+0x18a>
  else if ((frac == 0U) || (frac & 1U)) {
 8002cb4:	f1b8 0f00 	cmp.w	r8, #0
 8002cb8:	d002      	beq.n	8002cc0 <_ftoa+0x1e8>
 8002cba:	f018 0f01 	tst.w	r8, #1
 8002cbe:	d0d0      	beq.n	8002c62 <_ftoa+0x18a>
    ++frac;
 8002cc0:	f108 0801 	add.w	r8, r8, #1
 8002cc4:	e7cd      	b.n	8002c62 <_ftoa+0x18a>
      buf[len++] = (char)(48U + (frac % 10U));
 8002cc6:	3401      	adds	r4, #1
 8002cc8:	fbb8 f1f3 	udiv	r1, r8, r3
 8002ccc:	1910      	adds	r0, r2, r4
 8002cce:	fb03 8811 	mls	r8, r3, r1, r8
 8002cd2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8002cd6:	f800 8c01 	strb.w	r8, [r0, #-1]
      --count;
 8002cda:	f109 39ff 	add.w	r9, r9, #4294967295
      if (!(frac /= 10U)) {
 8002cde:	4688      	mov	r8, r1
 8002ce0:	b981      	cbnz	r1, 8002d04 <_ftoa+0x22c>
 8002ce2:	44a1      	add	r9, r4
      buf[len++] = '0';
 8002ce4:	2130      	movs	r1, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ce6:	2c20      	cmp	r4, #32
 8002ce8:	d00e      	beq.n	8002d08 <_ftoa+0x230>
 8002cea:	45a1      	cmp	r9, r4
 8002cec:	f104 0301 	add.w	r3, r4, #1
 8002cf0:	d11f      	bne.n	8002d32 <_ftoa+0x25a>
      buf[len++] = '.';
 8002cf2:	aa16      	add	r2, sp, #88	; 0x58
 8002cf4:	4414      	add	r4, r2
 8002cf6:	222e      	movs	r2, #46	; 0x2e
 8002cf8:	f804 2c20 	strb.w	r2, [r4, #-32]
 8002cfc:	461c      	mov	r4, r3
 8002cfe:	e7cd      	b.n	8002c9c <_ftoa+0x1c4>
      buf[len++] = (char)(48U + (frac % 10U));
 8002d00:	aa0e      	add	r2, sp, #56	; 0x38
 8002d02:	230a      	movs	r3, #10
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d04:	2c20      	cmp	r4, #32
 8002d06:	d1de      	bne.n	8002cc6 <_ftoa+0x1ee>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002d08:	f006 0303 	and.w	r3, r6, #3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	ab0e      	add	r3, sp, #56	; 0x38
 8002d10:	d125      	bne.n	8002d5e <_ftoa+0x286>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002d12:	b327      	cbz	r7, 8002d5e <_ftoa+0x286>
 8002d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d16:	b912      	cbnz	r2, 8002d1e <_ftoa+0x246>
 8002d18:	f016 0f0c 	tst.w	r6, #12
 8002d1c:	d000      	beq.n	8002d20 <_ftoa+0x248>
      width--;
 8002d1e:	3f01      	subs	r7, #1
      buf[len++] = '0';
 8002d20:	2230      	movs	r2, #48	; 0x30
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002d22:	42a7      	cmp	r7, r4
 8002d24:	d91b      	bls.n	8002d5e <_ftoa+0x286>
 8002d26:	2c1f      	cmp	r4, #31
 8002d28:	d916      	bls.n	8002d58 <_ftoa+0x280>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002d2a:	9603      	str	r6, [sp, #12]
 8002d2c:	9702      	str	r7, [sp, #8]
 8002d2e:	9401      	str	r4, [sp, #4]
 8002d30:	e6e9      	b.n	8002b06 <_ftoa+0x2e>
      buf[len++] = '0';
 8002d32:	5511      	strb	r1, [r2, r4]
 8002d34:	461c      	mov	r4, r3
 8002d36:	e7d6      	b.n	8002ce6 <_ftoa+0x20e>
    buf[len++] = (char)(48 + (whole % 10));
 8002d38:	aa0e      	add	r2, sp, #56	; 0x38
 8002d3a:	3401      	adds	r4, #1
 8002d3c:	1911      	adds	r1, r2, r4
 8002d3e:	fb95 f2f3 	sdiv	r2, r5, r3
 8002d42:	fb03 5512 	mls	r5, r3, r2, r5
 8002d46:	3530      	adds	r5, #48	; 0x30
 8002d48:	f801 5c01 	strb.w	r5, [r1, #-1]
    if (!(whole /= 10)) {
 8002d4c:	4615      	mov	r5, r2
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	d0da      	beq.n	8002d08 <_ftoa+0x230>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d52:	2c1f      	cmp	r4, #31
 8002d54:	d9f0      	bls.n	8002d38 <_ftoa+0x260>
 8002d56:	e7d7      	b.n	8002d08 <_ftoa+0x230>
      buf[len++] = '0';
 8002d58:	551a      	strb	r2, [r3, r4]
 8002d5a:	3401      	adds	r4, #1
 8002d5c:	e7e1      	b.n	8002d22 <_ftoa+0x24a>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d5e:	2c1f      	cmp	r4, #31
 8002d60:	d8e3      	bhi.n	8002d2a <_ftoa+0x252>
    if (negative) {
 8002d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d64:	b132      	cbz	r2, 8002d74 <_ftoa+0x29c>
      buf[len++] = '-';
 8002d66:	aa16      	add	r2, sp, #88	; 0x58
 8002d68:	4422      	add	r2, r4
 8002d6a:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 8002d6c:	f802 1c20 	strb.w	r1, [r2, #-32]
 8002d70:	3401      	adds	r4, #1
 8002d72:	e7da      	b.n	8002d2a <_ftoa+0x252>
    else if (flags & FLAGS_PLUS) {
 8002d74:	0771      	lsls	r1, r6, #29
 8002d76:	d503      	bpl.n	8002d80 <_ftoa+0x2a8>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002d78:	aa16      	add	r2, sp, #88	; 0x58
 8002d7a:	4422      	add	r2, r4
 8002d7c:	212b      	movs	r1, #43	; 0x2b
 8002d7e:	e7f5      	b.n	8002d6c <_ftoa+0x294>
    else if (flags & FLAGS_SPACE) {
 8002d80:	0732      	lsls	r2, r6, #28
 8002d82:	d5d2      	bpl.n	8002d2a <_ftoa+0x252>
      buf[len++] = ' ';
 8002d84:	aa16      	add	r2, sp, #88	; 0x58
 8002d86:	4422      	add	r2, r4
 8002d88:	2120      	movs	r1, #32
 8002d8a:	e7ef      	b.n	8002d6c <_ftoa+0x294>
 8002d8c:	f3af 8000 	nop.w
 8002d90:	00000000 	.word	0x00000000
 8002d94:	41cdcd65 	.word	0x41cdcd65
 8002d98:	00000000 	.word	0x00000000
 8002d9c:	c1cdcd65 	.word	0xc1cdcd65
 8002da0:	08007da8 	.word	0x08007da8
 8002da4:	08007dac 	.word	0x08007dac
 8002da8:	7fefffff 	.word	0x7fefffff
 8002dac:	08007d9f 	.word	0x08007d9f
 8002db0:	08007da4 	.word	0x08007da4
 8002db4:	08007db8 	.word	0x08007db8
 8002db8:	3fe00000 	.word	0x3fe00000
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	b093      	sub	sp, #76	; 0x4c
 8002dc6:	ed9d 7b1c 	vldr	d7, [sp, #112]	; 0x70
 8002dca:	469b      	mov	fp, r3
 8002dcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002dce:	920d      	str	r2, [sp, #52]	; 0x34
 8002dd0:	930c      	str	r3, [sp, #48]	; 0x30
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002dd2:	ec53 2b17 	vmov	r2, r3, d7
{
 8002dd6:	9008      	str	r0, [sp, #32]
 8002dd8:	9109      	str	r1, [sp, #36]	; 0x24
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002dda:	ee17 0a10 	vmov	r0, s14
 8002dde:	4619      	mov	r1, r3
{
 8002de0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002de4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002de6:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002dea:	f7fd fe91 	bl	8000b10 <__aeabi_dcmpeq>
 8002dee:	b180      	cbz	r0, 8002e12 <_etoa+0x52>
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <_etoa+0x78>)
 8002df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dfa:	f7fd feb1 	bl	8000b60 <__aeabi_dcmpgt>
 8002dfe:	b940      	cbnz	r0, 8002e12 <_etoa+0x52>
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002e08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e0c:	f7fd fe8a 	bl	8000b24 <__aeabi_dcmplt>
 8002e10:	b1a0      	cbz	r0, 8002e3c <_etoa+0x7c>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e12:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e1c:	9808      	ldr	r0, [sp, #32]
 8002e1e:	931f      	str	r3, [sp, #124]	; 0x7c
 8002e20:	465b      	mov	r3, fp
 8002e22:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 8002e26:	951e      	str	r5, [sp, #120]	; 0x78
 8002e28:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 8002e2c:	b013      	add	sp, #76	; 0x4c
 8002e2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e32:	f7ff be51 	b.w	8002ad8 <_ftoa>
 8002e36:	bf00      	nop
 8002e38:	7fefffff 	.word	0x7fefffff
  if (negative) {
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e44:	f7fd fe6e 	bl	8000b24 <__aeabi_dcmplt>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	f000 813a 	beq.w	80030c2 <_etoa+0x302>
    value = -value;
 8002e4e:	9b07      	ldr	r3, [sp, #28]
 8002e50:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002e54:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002e58:	f3c9 500a 	ubfx	r0, r9, #20, #11
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002e5c:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e60:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002e64:	bf08      	it	eq
 8002e66:	2506      	moveq	r5, #6
 8002e68:	930f      	str	r3, [sp, #60]	; 0x3c
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e6a:	f7fd fb83 	bl	8000574 <__aeabi_i2d>
 8002e6e:	a3b5      	add	r3, pc, #724	; (adr r3, 8003144 <_etoa+0x384>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbe4 	bl	8000640 <__aeabi_dmul>
 8002e78:	a3b4      	add	r3, pc, #720	; (adr r3, 800314c <_etoa+0x38c>)
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f7fd fa2d 	bl	80002dc <__adddf3>
 8002e82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002e86:	49a8      	ldr	r1, [pc, #672]	; (8003128 <_etoa+0x368>)
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e88:	4fa8      	ldr	r7, [pc, #672]	; (800312c <_etoa+0x36c>)
 8002e8a:	4ba9      	ldr	r3, [pc, #676]	; (8003130 <_etoa+0x370>)
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	ea00 0008 	and.w	r0, r0, r8
 8002e94:	ea01 0109 	and.w	r1, r1, r9
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e98:	2600      	movs	r6, #0
 8002e9a:	4306      	orrs	r6, r0
 8002e9c:	430f      	orrs	r7, r1
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	f7fd fa18 	bl	80002d8 <__aeabi_dsub>
 8002ea8:	a393      	add	r3, pc, #588	; (adr r3, 80030f8 <_etoa+0x338>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fbc7 	bl	8000640 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002eba:	f7fd fa0f 	bl	80002dc <__adddf3>
 8002ebe:	f7fd fe59 	bl	8000b74 <__aeabi_d2iz>
 8002ec2:	4604      	mov	r4, r0
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002ec4:	f7fd fb56 	bl	8000574 <__aeabi_i2d>
 8002ec8:	a38d      	add	r3, pc, #564	; (adr r3, 8003100 <_etoa+0x340>)
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	4606      	mov	r6, r0
 8002ed0:	460f      	mov	r7, r1
 8002ed2:	f7fd fbb5 	bl	8000640 <__aeabi_dmul>
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4b96      	ldr	r3, [pc, #600]	; (8003134 <_etoa+0x374>)
 8002eda:	f7fd f9ff 	bl	80002dc <__adddf3>
 8002ede:	f7fd fe49 	bl	8000b74 <__aeabi_d2iz>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002ee2:	a389      	add	r3, pc, #548	; (adr r3, 8003108 <_etoa+0x348>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002ee8:	900e      	str	r0, [sp, #56]	; 0x38
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002eea:	4639      	mov	r1, r7
 8002eec:	4630      	mov	r0, r6
 8002eee:	f7fd fba7 	bl	8000640 <__aeabi_dmul>
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002ef6:	460f      	mov	r7, r1
 8002ef8:	f7fd fb3c 	bl	8000574 <__aeabi_i2d>
 8002efc:	a384      	add	r3, pc, #528	; (adr r3, 8003110 <_etoa+0x350>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd fb9d 	bl	8000640 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	4639      	mov	r1, r7
 8002f0e:	f7fd f9e3 	bl	80002d8 <__aeabi_dsub>
  const double z2 = z * z;
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002f16:	4606      	mov	r6, r0
 8002f18:	460f      	mov	r7, r1
  const double z2 = z * z;
 8002f1a:	f7fd fb91 	bl	8000640 <__aeabi_dmul>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002f1e:	4632      	mov	r2, r6
  const double z2 = z * z;
 8002f20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002f24:	463b      	mov	r3, r7
 8002f26:	4630      	mov	r0, r6
 8002f28:	4639      	mov	r1, r7
 8002f2a:	f7fd f9d7 	bl	80002dc <__adddf3>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002f34:	4b80      	ldr	r3, [pc, #512]	; (8003138 <_etoa+0x378>)
 8002f36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f3a:	f7fd fcab 	bl	8000894 <__aeabi_ddiv>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4b7e      	ldr	r3, [pc, #504]	; (800313c <_etoa+0x37c>)
 8002f42:	f7fd f9cb 	bl	80002dc <__adddf3>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f4e:	f7fd fca1 	bl	8000894 <__aeabi_ddiv>
 8002f52:	2200      	movs	r2, #0
 8002f54:	4b7a      	ldr	r3, [pc, #488]	; (8003140 <_etoa+0x380>)
 8002f56:	f7fd f9c1 	bl	80002dc <__adddf3>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f62:	f7fd fc97 	bl	8000894 <__aeabi_ddiv>
 8002f66:	4632      	mov	r2, r6
 8002f68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002f74:	f7fd f9b0 	bl	80002d8 <__aeabi_dsub>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f80:	f7fd f9ac 	bl	80002dc <__adddf3>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f8c:	f7fd fc82 	bl	8000894 <__aeabi_ddiv>
 8002f90:	2200      	movs	r2, #0
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <_etoa+0x36c>)
 8002f94:	f7fd f9a2 	bl	80002dc <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f9a:	f203 36ff 	addw	r6, r3, #1023	; 0x3ff
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	0533      	lsls	r3, r6, #20
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002fa2:	f7fd fb4d 	bl	8000640 <__aeabi_dmul>
 8002fa6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (value < conv.F) {
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4640      	mov	r0, r8
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	f7fd fdb7 	bl	8000b24 <__aeabi_dcmplt>
 8002fb6:	b140      	cbz	r0, 8002fca <_etoa+0x20a>
    conv.F /= 10;
 8002fb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	; (800313c <_etoa+0x37c>)
 8002fc0:	f7fd fc68 	bl	8000894 <__aeabi_ddiv>
 8002fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    expval--;
 8002fc8:	3c01      	subs	r4, #1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002fca:	f104 0363 	add.w	r3, r4, #99	; 0x63
 8002fce:	2bc7      	cmp	r3, #199	; 0xc7
 8002fd0:	bf34      	ite	cc
 8002fd2:	2604      	movcc	r6, #4
 8002fd4:	2605      	movcs	r6, #5
  if (flags & FLAGS_ADAPT_EXP) {
 8002fd6:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 8002fda:	d01d      	beq.n	8003018 <_etoa+0x258>
    if ((value >= 1e-4) && (value < 1e6)) {
 8002fdc:	a34e      	add	r3, pc, #312	; (adr r3, 8003118 <_etoa+0x358>)
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	f7fd fdb1 	bl	8000b4c <__aeabi_dcmpge>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d06c      	beq.n	80030c8 <_etoa+0x308>
 8002fee:	a34c      	add	r3, pc, #304	; (adr r3, 8003120 <_etoa+0x360>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd fd94 	bl	8000b24 <__aeabi_dcmplt>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d063      	beq.n	80030c8 <_etoa+0x308>
      if ((int)prec > expval) {
 8003000:	42ac      	cmp	r4, r5
        prec = (unsigned)((int)prec - expval - 1);
 8003002:	bfb8      	it	lt
 8003004:	1b2d      	sublt	r5, r5, r4
      minwidth = 0U;
 8003006:	f04f 0600 	mov.w	r6, #0
        prec = (unsigned)((int)prec - expval - 1);
 800300a:	bfb4      	ite	lt
 800300c:	f105 35ff 	addlt.w	r5, r5, #4294967295
      if ((int)prec > expval) {
 8003010:	2500      	movge	r5, #0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003012:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
      expval   = 0;
 8003016:	4634      	mov	r4, r6
  if (width > minwidth) {
 8003018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800301a:	42b3      	cmp	r3, r6
    fwidth -= minwidth;
 800301c:	bf8c      	ite	hi
 800301e:	1b9f      	subhi	r7, r3, r6
    fwidth = 0U;
 8003020:	2700      	movls	r7, #0
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003022:	f01a 0302 	ands.w	r3, sl, #2
 8003026:	930e      	str	r3, [sp, #56]	; 0x38
 8003028:	d002      	beq.n	8003030 <_etoa+0x270>
    fwidth = 0U;
 800302a:	2e00      	cmp	r6, #0
 800302c:	bf18      	it	ne
 800302e:	2700      	movne	r7, #0
  if (expval) {
 8003030:	b13c      	cbz	r4, 8003042 <_etoa+0x282>
    value /= conv.F;
 8003032:	4640      	mov	r0, r8
 8003034:	4649      	mov	r1, r9
 8003036:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800303a:	f7fd fc2b 	bl	8000894 <__aeabi_ddiv>
 800303e:	4680      	mov	r8, r0
 8003040:	4689      	mov	r9, r1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003042:	2200      	movs	r2, #0
 8003044:	2300      	movs	r3, #0
 8003046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800304a:	f7fd fd6b 	bl	8000b24 <__aeabi_dcmplt>
 800304e:	b110      	cbz	r0, 8003056 <_etoa+0x296>
 8003050:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003054:	4699      	mov	r9, r3
 8003056:	f42a 6300 	bic.w	r3, sl, #2048	; 0x800
 800305a:	9304      	str	r3, [sp, #16]
 800305c:	9703      	str	r7, [sp, #12]
 800305e:	9502      	str	r5, [sp, #8]
 8003060:	e9cd 8900 	strd	r8, r9, [sp]
 8003064:	465b      	mov	r3, fp
 8003066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800306a:	9808      	ldr	r0, [sp, #32]
 800306c:	f7ff fd34 	bl	8002ad8 <_ftoa>
  if (minwidth) {
 8003070:	b326      	cbz	r6, 80030bc <_etoa+0x2fc>
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003072:	f01a 0f20 	tst.w	sl, #32
 8003076:	f100 0501 	add.w	r5, r0, #1
 800307a:	4602      	mov	r2, r0
 800307c:	465b      	mov	r3, fp
 800307e:	bf14      	ite	ne
 8003080:	2045      	movne	r0, #69	; 0x45
 8003082:	2065      	moveq	r0, #101	; 0x65
 8003084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003086:	9f08      	ldr	r7, [sp, #32]
 8003088:	47b8      	blx	r7
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800308a:	2305      	movs	r3, #5
 800308c:	9305      	str	r3, [sp, #20]
 800308e:	2300      	movs	r3, #0
 8003090:	9303      	str	r3, [sp, #12]
 8003092:	2c00      	cmp	r4, #0
 8003094:	f04f 030a 	mov.w	r3, #10
 8003098:	9302      	str	r3, [sp, #8]
 800309a:	f106 36ff 	add.w	r6, r6, #4294967295
 800309e:	ea4f 73d4 	mov.w	r3, r4, lsr #31
 80030a2:	bfb8      	it	lt
 80030a4:	4264      	neglt	r4, r4
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	9604      	str	r6, [sp, #16]
 80030aa:	465b      	mov	r3, fp
 80030ac:	9400      	str	r4, [sp, #0]
 80030ae:	462a      	mov	r2, r5
 80030b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030b2:	9808      	ldr	r0, [sp, #32]
 80030b4:	f7ff fc74 	bl	80029a0 <_ntoa_long>
    if (flags & FLAGS_LEFT) {
 80030b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030ba:	b9a3      	cbnz	r3, 80030e6 <_etoa+0x326>
}
 80030bc:	b013      	add	sp, #76	; 0x4c
 80030be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (negative) {
 80030c2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80030c6:	e6c7      	b.n	8002e58 <_etoa+0x98>
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	d0a5      	beq.n	8003018 <_etoa+0x258>
 80030cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0a2      	beq.n	8003018 <_etoa+0x258>
        --prec;
 80030d2:	3d01      	subs	r5, #1
 80030d4:	e7a0      	b.n	8003018 <_etoa+0x258>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80030d6:	1c44      	adds	r4, r0, #1
 80030d8:	4602      	mov	r2, r0
 80030da:	465b      	mov	r3, fp
 80030dc:	2020      	movs	r0, #32
 80030de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030e0:	9d08      	ldr	r5, [sp, #32]
 80030e2:	47a8      	blx	r5
 80030e4:	4620      	mov	r0, r4
 80030e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030ea:	1ac3      	subs	r3, r0, r3
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d8f2      	bhi.n	80030d6 <_etoa+0x316>
 80030f0:	e7e4      	b.n	80030bc <_etoa+0x2fc>
 80030f2:	bf00      	nop
 80030f4:	f3af 8000 	nop.w
 80030f8:	636f4361 	.word	0x636f4361
 80030fc:	3fd287a7 	.word	0x3fd287a7
 8003100:	0979a371 	.word	0x0979a371
 8003104:	400a934f 	.word	0x400a934f
 8003108:	bbb55516 	.word	0xbbb55516
 800310c:	40026bb1 	.word	0x40026bb1
 8003110:	fefa39ef 	.word	0xfefa39ef
 8003114:	3fe62e42 	.word	0x3fe62e42
 8003118:	eb1c432d 	.word	0xeb1c432d
 800311c:	3f1a36e2 	.word	0x3f1a36e2
 8003120:	00000000 	.word	0x00000000
 8003124:	412e8480 	.word	0x412e8480
 8003128:	000fffff 	.word	0x000fffff
 800312c:	3ff00000 	.word	0x3ff00000
 8003130:	3ff80000 	.word	0x3ff80000
 8003134:	3fe00000 	.word	0x3fe00000
 8003138:	402c0000 	.word	0x402c0000
 800313c:	40240000 	.word	0x40240000
 8003140:	40180000 	.word	0x40180000
 8003144:	509f79fb 	.word	0x509f79fb
 8003148:	3fd34413 	.word	0x3fd34413
 800314c:	8b60c8b3 	.word	0x8b60c8b3
 8003150:	3fc68a28 	.word	0x3fc68a28

08003154 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003158:	b091      	sub	sp, #68	; 0x44
 800315a:	461e      	mov	r6, r3
 800315c:	920a      	str	r2, [sp, #40]	; 0x28
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
 800315e:	4ab3      	ldr	r2, [pc, #716]	; (800342c <_vsnprintf+0x2d8>)
 8003160:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8003162:	4613      	mov	r3, r2
 8003164:	2900      	cmp	r1, #0
 8003166:	bf18      	it	ne
 8003168:	4603      	movne	r3, r0
 800316a:	4688      	mov	r8, r1
 800316c:	930b      	str	r3, [sp, #44]	; 0x2c
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800316e:	2400      	movs	r4, #0
  while (*format)
 8003170:	7830      	ldrb	r0, [r6, #0]
 8003172:	b970      	cbnz	r0, 8003192 <_vsnprintf+0x3e>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003176:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003178:	429c      	cmp	r4, r3
 800317a:	bf2c      	ite	cs
 800317c:	f103 32ff 	addcs.w	r2, r3, #4294967295
 8003180:	4622      	movcc	r2, r4
 8003182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003184:	4641      	mov	r1, r8
 8003186:	2000      	movs	r0, #0
 8003188:	47a8      	blx	r5

  // return written chars without terminating \0
  return (int)idx;
}
 800318a:	4620      	mov	r0, r4
 800318c:	b011      	add	sp, #68	; 0x44
 800318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*format != '%') {
 8003192:	2825      	cmp	r0, #37	; 0x25
 8003194:	f106 0601 	add.w	r6, r6, #1
 8003198:	d008      	beq.n	80031ac <_vsnprintf+0x58>
      out(*format, buffer, idx++, maxlen);
 800319a:	f104 0901 	add.w	r9, r4, #1
 800319e:	4622      	mov	r2, r4
 80031a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80031a4:	4641      	mov	r1, r8
 80031a6:	47a0      	blx	r4
        out(*format, buffer, idx++, maxlen);
 80031a8:	464c      	mov	r4, r9
        break;
 80031aa:	e7e1      	b.n	8003170 <_vsnprintf+0x1c>
      format++;
 80031ac:	4633      	mov	r3, r6
    flags = 0U;
 80031ae:	2200      	movs	r2, #0
      switch (*format) {
 80031b0:	4618      	mov	r0, r3
 80031b2:	461e      	mov	r6, r3
 80031b4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80031b8:	292b      	cmp	r1, #43	; 0x2b
 80031ba:	d016      	beq.n	80031ea <_vsnprintf+0x96>
 80031bc:	d80a      	bhi.n	80031d4 <_vsnprintf+0x80>
 80031be:	2920      	cmp	r1, #32
 80031c0:	d016      	beq.n	80031f0 <_vsnprintf+0x9c>
 80031c2:	2923      	cmp	r1, #35	; 0x23
 80031c4:	d017      	beq.n	80031f6 <_vsnprintf+0xa2>
    if (_is_digit(*format)) {
 80031c6:	f1a1 0e30 	sub.w	lr, r1, #48	; 0x30
 80031ca:	f1be 0f09 	cmp.w	lr, #9
 80031ce:	d857      	bhi.n	8003280 <_vsnprintf+0x12c>
 80031d0:	2100      	movs	r1, #0
 80031d2:	e018      	b.n	8003206 <_vsnprintf+0xb2>
      switch (*format) {
 80031d4:	292d      	cmp	r1, #45	; 0x2d
 80031d6:	d005      	beq.n	80031e4 <_vsnprintf+0x90>
 80031d8:	2930      	cmp	r1, #48	; 0x30
 80031da:	d1f4      	bne.n	80031c6 <_vsnprintf+0x72>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80031dc:	f042 0201 	orr.w	r2, r2, #1
    out = _out_null;
 80031e0:	4603      	mov	r3, r0
 80031e2:	e7e5      	b.n	80031b0 <_vsnprintf+0x5c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80031e4:	f042 0202 	orr.w	r2, r2, #2
 80031e8:	e7fa      	b.n	80031e0 <_vsnprintf+0x8c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80031ea:	f042 0204 	orr.w	r2, r2, #4
 80031ee:	e7f7      	b.n	80031e0 <_vsnprintf+0x8c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80031f0:	f042 0208 	orr.w	r2, r2, #8
 80031f4:	e7f4      	b.n	80031e0 <_vsnprintf+0x8c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80031f6:	f042 0210 	orr.w	r2, r2, #16
 80031fa:	e7f1      	b.n	80031e0 <_vsnprintf+0x8c>
 80031fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80031fe:	260a      	movs	r6, #10
 8003200:	fb06 1100 	mla	r1, r6, r0, r1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003204:	3930      	subs	r1, #48	; 0x30
 8003206:	910c      	str	r1, [sp, #48]	; 0x30
 8003208:	461e      	mov	r6, r3
  while (_is_digit(**str)) {
 800320a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800320e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8003212:	2809      	cmp	r0, #9
 8003214:	d9f2      	bls.n	80031fc <_vsnprintf+0xa8>
    if (*format == '.') {
 8003216:	7833      	ldrb	r3, [r6, #0]
 8003218:	2b2e      	cmp	r3, #46	; 0x2e
 800321a:	d151      	bne.n	80032c0 <_vsnprintf+0x16c>
      if (_is_digit(*format)) {
 800321c:	7871      	ldrb	r1, [r6, #1]
 800321e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8003222:	2809      	cmp	r0, #9
      flags |= FLAGS_PRECISION;
 8003224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      format++;
 8003228:	f106 0301 	add.w	r3, r6, #1
      if (_is_digit(*format)) {
 800322c:	d83f      	bhi.n	80032ae <_vsnprintf+0x15a>
 800322e:	f04f 0900 	mov.w	r9, #0
 8003232:	461e      	mov	r6, r3
  while (_is_digit(**str)) {
 8003234:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003238:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800323c:	2809      	cmp	r0, #9
 800323e:	d930      	bls.n	80032a2 <_vsnprintf+0x14e>
    switch (*format) {
 8003240:	7833      	ldrb	r3, [r6, #0]
 8003242:	2b6c      	cmp	r3, #108	; 0x6c
 8003244:	d046      	beq.n	80032d4 <_vsnprintf+0x180>
 8003246:	d83e      	bhi.n	80032c6 <_vsnprintf+0x172>
 8003248:	2b68      	cmp	r3, #104	; 0x68
 800324a:	d04a      	beq.n	80032e2 <_vsnprintf+0x18e>
 800324c:	2b6a      	cmp	r3, #106	; 0x6a
 800324e:	d052      	beq.n	80032f6 <_vsnprintf+0x1a2>
    switch (*format) {
 8003250:	7830      	ldrb	r0, [r6, #0]
 8003252:	2865      	cmp	r0, #101	; 0x65
 8003254:	f000 8156 	beq.w	8003504 <_vsnprintf+0x3b0>
 8003258:	f200 809a 	bhi.w	8003390 <_vsnprintf+0x23c>
 800325c:	2847      	cmp	r0, #71	; 0x47
 800325e:	f000 8151 	beq.w	8003504 <_vsnprintf+0x3b0>
 8003262:	d84b      	bhi.n	80032fc <_vsnprintf+0x1a8>
 8003264:	2845      	cmp	r0, #69	; 0x45
 8003266:	f000 814d 	beq.w	8003504 <_vsnprintf+0x3b0>
 800326a:	f200 8132 	bhi.w	80034d2 <_vsnprintf+0x37e>
        out(*format, buffer, idx++, maxlen);
 800326e:	4622      	mov	r2, r4
 8003270:	f104 0901 	add.w	r9, r4, #1
 8003274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003276:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003278:	4641      	mov	r1, r8
 800327a:	47a0      	blx	r4
        format++;
 800327c:	3601      	adds	r6, #1
 800327e:	e793      	b.n	80031a8 <_vsnprintf+0x54>
    else if (*format == '*') {
 8003280:	292a      	cmp	r1, #42	; 0x2a
 8003282:	d10b      	bne.n	800329c <_vsnprintf+0x148>
      const int w = va_arg(va, int);
 8003284:	682b      	ldr	r3, [r5, #0]
      if (w < 0) {
 8003286:	2b00      	cmp	r3, #0
      const int w = va_arg(va, int);
 8003288:	f105 0104 	add.w	r1, r5, #4
        width = (unsigned int)-w;
 800328c:	bfbc      	itt	lt
 800328e:	425b      	neglt	r3, r3
        flags |= FLAGS_LEFT;    // reverse padding
 8003290:	f042 0202 	orrlt.w	r2, r2, #2
        width = (unsigned int)w;
 8003294:	930c      	str	r3, [sp, #48]	; 0x30
      format++;
 8003296:	4606      	mov	r6, r0
      const int w = va_arg(va, int);
 8003298:	460d      	mov	r5, r1
 800329a:	e7bc      	b.n	8003216 <_vsnprintf+0xc2>
    width = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	930c      	str	r3, [sp, #48]	; 0x30
 80032a0:	e7b9      	b.n	8003216 <_vsnprintf+0xc2>
 80032a2:	200a      	movs	r0, #10
 80032a4:	fb00 1909 	mla	r9, r0, r9, r1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80032a8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 80032ac:	e7c1      	b.n	8003232 <_vsnprintf+0xde>
      else if (*format == '*') {
 80032ae:	292a      	cmp	r1, #42	; 0x2a
 80032b0:	d105      	bne.n	80032be <_vsnprintf+0x16a>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80032b2:	682b      	ldr	r3, [r5, #0]
        format++;
 80032b4:	3602      	adds	r6, #2
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80032b6:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
        const int prec = (int)va_arg(va, int);
 80032ba:	3504      	adds	r5, #4
 80032bc:	e7c0      	b.n	8003240 <_vsnprintf+0xec>
      format++;
 80032be:	461e      	mov	r6, r3
    precision = 0U;
 80032c0:	f04f 0900 	mov.w	r9, #0
 80032c4:	e7bc      	b.n	8003240 <_vsnprintf+0xec>
    switch (*format) {
 80032c6:	2b74      	cmp	r3, #116	; 0x74
 80032c8:	d001      	beq.n	80032ce <_vsnprintf+0x17a>
 80032ca:	2b7a      	cmp	r3, #122	; 0x7a
 80032cc:	d1c0      	bne.n	8003250 <_vsnprintf+0xfc>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d2:	e00b      	b.n	80032ec <_vsnprintf+0x198>
        if (*format == 'l') {
 80032d4:	7873      	ldrb	r3, [r6, #1]
 80032d6:	2b6c      	cmp	r3, #108	; 0x6c
 80032d8:	d1f9      	bne.n	80032ce <_vsnprintf+0x17a>
          flags |= FLAGS_LONG_LONG;
 80032da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
          format++;
 80032de:	3602      	adds	r6, #2
 80032e0:	e7b6      	b.n	8003250 <_vsnprintf+0xfc>
        if (*format == 'h') {
 80032e2:	7873      	ldrb	r3, [r6, #1]
 80032e4:	2b68      	cmp	r3, #104	; 0x68
 80032e6:	d003      	beq.n	80032f0 <_vsnprintf+0x19c>
        flags |= FLAGS_SHORT;
 80032e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        format++;
 80032ec:	3601      	adds	r6, #1
        break;
 80032ee:	e7af      	b.n	8003250 <_vsnprintf+0xfc>
          flags |= FLAGS_CHAR;
 80032f0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80032f4:	e7f3      	b.n	80032de <_vsnprintf+0x18a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	e7f7      	b.n	80032ec <_vsnprintf+0x198>
    switch (*format) {
 80032fc:	2862      	cmp	r0, #98	; 0x62
 80032fe:	d103      	bne.n	8003308 <_vsnprintf+0x1b4>
          base =  2U;
 8003300:	2302      	movs	r3, #2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003302:	f022 020c 	bic.w	r2, r2, #12
 8003306:	e013      	b.n	8003330 <_vsnprintf+0x1dc>
    switch (*format) {
 8003308:	d805      	bhi.n	8003316 <_vsnprintf+0x1c2>
 800330a:	2858      	cmp	r0, #88	; 0x58
 800330c:	d1af      	bne.n	800326e <_vsnprintf+0x11a>
          flags |= FLAGS_UPPERCASE;
 800330e:	f042 0220 	orr.w	r2, r2, #32
          base = 16U;
 8003312:	2310      	movs	r3, #16
 8003314:	e7f5      	b.n	8003302 <_vsnprintf+0x1ae>
    switch (*format) {
 8003316:	2863      	cmp	r0, #99	; 0x63
 8003318:	f000 8115 	beq.w	8003546 <_vsnprintf+0x3f2>
 800331c:	2864      	cmp	r0, #100	; 0x64
 800331e:	d1a6      	bne.n	800326e <_vsnprintf+0x11a>
        if ((*format != 'i') && (*format != 'd')) {
 8003320:	2869      	cmp	r0, #105	; 0x69
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003322:	f022 0210 	bic.w	r2, r2, #16
          base = 10U;
 8003326:	f04f 030a 	mov.w	r3, #10
        if ((*format != 'i') && (*format != 'd')) {
 800332a:	d001      	beq.n	8003330 <_vsnprintf+0x1dc>
 800332c:	2864      	cmp	r0, #100	; 0x64
 800332e:	d1e8      	bne.n	8003302 <_vsnprintf+0x1ae>
        if (flags & FLAGS_PRECISION) {
 8003330:	0557      	lsls	r7, r2, #21
          flags &= ~FLAGS_ZEROPAD;
 8003332:	bf48      	it	mi
 8003334:	f022 0201 	bicmi.w	r2, r2, #1
        if ((*format == 'i') || (*format == 'd')) {
 8003338:	2869      	cmp	r0, #105	; 0x69
 800333a:	f402 7100 	and.w	r1, r2, #512	; 0x200
 800333e:	d002      	beq.n	8003346 <_vsnprintf+0x1f2>
 8003340:	2864      	cmp	r0, #100	; 0x64
 8003342:	f040 8092 	bne.w	800346a <_vsnprintf+0x316>
          if (flags & FLAGS_LONG_LONG) {
 8003346:	2900      	cmp	r1, #0
 8003348:	d053      	beq.n	80033f2 <_vsnprintf+0x29e>
            const long long value = va_arg(va, long long);
 800334a:	3507      	adds	r5, #7
 800334c:	f025 0107 	bic.w	r1, r5, #7
 8003350:	f101 0508 	add.w	r5, r1, #8
 8003354:	c903      	ldmia	r1, {r0, r1}
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003356:	9304      	str	r3, [sp, #16]
 8003358:	2300      	movs	r3, #0
 800335a:	9305      	str	r3, [sp, #20]
 800335c:	0fcb      	lsrs	r3, r1, #31
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	2800      	cmp	r0, #0
 8003362:	460b      	mov	r3, r1
 8003364:	9208      	str	r2, [sp, #32]
 8003366:	f173 0100 	sbcs.w	r1, r3, #0
 800336a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800336c:	9207      	str	r2, [sp, #28]
 800336e:	f8cd 9018 	str.w	r9, [sp, #24]
 8003372:	4602      	mov	r2, r0
 8003374:	da02      	bge.n	800337c <_vsnprintf+0x228>
 8003376:	4242      	negs	r2, r0
 8003378:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800337c:	e9cd 2300 	strd	r2, r3, [sp]
 8003380:	4641      	mov	r1, r8
 8003382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003384:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003386:	4622      	mov	r2, r4
 8003388:	f7ff fb4a 	bl	8002a20 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800338c:	4604      	mov	r4, r0
 800338e:	e04b      	b.n	8003428 <_vsnprintf+0x2d4>
    switch (*format) {
 8003390:	286f      	cmp	r0, #111	; 0x6f
 8003392:	d101      	bne.n	8003398 <_vsnprintf+0x244>
          base =  8U;
 8003394:	2308      	movs	r3, #8
 8003396:	e7b4      	b.n	8003302 <_vsnprintf+0x1ae>
    switch (*format) {
 8003398:	d806      	bhi.n	80033a8 <_vsnprintf+0x254>
 800339a:	2867      	cmp	r0, #103	; 0x67
 800339c:	f000 80b2 	beq.w	8003504 <_vsnprintf+0x3b0>
 80033a0:	f0c0 8097 	bcc.w	80034d2 <_vsnprintf+0x37e>
 80033a4:	2869      	cmp	r0, #105	; 0x69
 80033a6:	e7ba      	b.n	800331e <_vsnprintf+0x1ca>
 80033a8:	2873      	cmp	r0, #115	; 0x73
 80033aa:	f000 8106 	beq.w	80035ba <_vsnprintf+0x466>
 80033ae:	d81b      	bhi.n	80033e8 <_vsnprintf+0x294>
 80033b0:	2870      	cmp	r0, #112	; 0x70
 80033b2:	f47f af5c 	bne.w	800326e <_vsnprintf+0x11a>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80033b6:	2308      	movs	r3, #8
 80033b8:	9304      	str	r3, [sp, #16]
 80033ba:	2310      	movs	r3, #16
 80033bc:	9302      	str	r3, [sp, #8]
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80033be:	f042 0221 	orr.w	r2, r2, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80033c2:	2300      	movs	r3, #0
 80033c4:	9205      	str	r2, [sp, #20]
 80033c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	4622      	mov	r2, r4
 80033d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80033d6:	4641      	mov	r1, r8
 80033d8:	f7ff fae2 	bl	80029a0 <_ntoa_long>
 80033dc:	f105 0a04 	add.w	sl, r5, #4
 80033e0:	4604      	mov	r4, r0
        format++;
 80033e2:	3601      	adds	r6, #1
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80033e4:	4655      	mov	r5, sl
        break;
 80033e6:	e6c3      	b.n	8003170 <_vsnprintf+0x1c>
    switch (*format) {
 80033e8:	2875      	cmp	r0, #117	; 0x75
 80033ea:	d099      	beq.n	8003320 <_vsnprintf+0x1cc>
 80033ec:	2878      	cmp	r0, #120	; 0x78
 80033ee:	d090      	beq.n	8003312 <_vsnprintf+0x1be>
 80033f0:	e73d      	b.n	800326e <_vsnprintf+0x11a>
          else if (flags & FLAGS_LONG) {
 80033f2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80033f6:	f105 0a04 	add.w	sl, r5, #4
 80033fa:	d019      	beq.n	8003430 <_vsnprintf+0x2dc>
            const long value = va_arg(va, long);
 80033fc:	6829      	ldr	r1, [r5, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80033fe:	9205      	str	r2, [sp, #20]
 8003400:	2900      	cmp	r1, #0
 8003402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003404:	9302      	str	r3, [sp, #8]
 8003406:	ea4f 73d1 	mov.w	r3, r1, lsr #31
 800340a:	bfb8      	it	lt
 800340c:	4249      	neglt	r1, r1
 800340e:	9204      	str	r2, [sp, #16]
 8003410:	f8cd 900c 	str.w	r9, [sp, #12]
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	9100      	str	r1, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003418:	4622      	mov	r2, r4
 800341a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800341c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800341e:	4641      	mov	r1, r8
 8003420:	f7ff fabe 	bl	80029a0 <_ntoa_long>
 8003424:	4655      	mov	r5, sl
 8003426:	4604      	mov	r4, r0
        format++;
 8003428:	3601      	adds	r6, #1
        break;
 800342a:	e6a1      	b.n	8003170 <_vsnprintf+0x1c>
 800342c:	0800280d 	.word	0x0800280d
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003430:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003434:	6829      	ldr	r1, [r5, #0]
 8003436:	d014      	beq.n	8003462 <_vsnprintf+0x30e>
 8003438:	b2c9      	uxtb	r1, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800343a:	9205      	str	r2, [sp, #20]
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003440:	9204      	str	r2, [sp, #16]
 8003442:	0fcb      	lsrs	r3, r1, #31
 8003444:	2900      	cmp	r1, #0
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003446:	4655      	mov	r5, sl
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003448:	f8cd 900c 	str.w	r9, [sp, #12]
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	bfb8      	it	lt
 8003450:	4249      	neglt	r1, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003452:	9100      	str	r1, [sp, #0]
 8003454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003456:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003458:	4622      	mov	r2, r4
 800345a:	4641      	mov	r1, r8
 800345c:	f7ff faa0 	bl	80029a0 <_ntoa_long>
 8003460:	e794      	b.n	800338c <_vsnprintf+0x238>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003462:	0615      	lsls	r5, r2, #24
 8003464:	bf48      	it	mi
 8003466:	b209      	sxthmi	r1, r1
 8003468:	e7e7      	b.n	800343a <_vsnprintf+0x2e6>
          if (flags & FLAGS_LONG_LONG) {
 800346a:	b181      	cbz	r1, 800348e <_vsnprintf+0x33a>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800346c:	3507      	adds	r5, #7
 800346e:	9208      	str	r2, [sp, #32]
 8003470:	9304      	str	r3, [sp, #16]
 8003472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003474:	9207      	str	r2, [sp, #28]
 8003476:	2300      	movs	r3, #0
 8003478:	f025 0107 	bic.w	r1, r5, #7
 800347c:	f8cd 9018 	str.w	r9, [sp, #24]
 8003480:	9305      	str	r3, [sp, #20]
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	f101 0508 	add.w	r5, r1, #8
 8003488:	e9d1 2300 	ldrd	r2, r3, [r1]
 800348c:	e776      	b.n	800337c <_vsnprintf+0x228>
          else if (flags & FLAGS_LONG) {
 800348e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003492:	f105 0a04 	add.w	sl, r5, #4
 8003496:	d009      	beq.n	80034ac <_vsnprintf+0x358>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003498:	9205      	str	r2, [sp, #20]
 800349a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800349c:	9204      	str	r2, [sp, #16]
 800349e:	f8cd 900c 	str.w	r9, [sp, #12]
 80034a2:	9302      	str	r3, [sp, #8]
 80034a4:	9101      	str	r1, [sp, #4]
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	e7b5      	b.n	8003418 <_vsnprintf+0x2c4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80034ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034b0:	6829      	ldr	r1, [r5, #0]
 80034b2:	d00a      	beq.n	80034ca <_vsnprintf+0x376>
 80034b4:	b2c9      	uxtb	r1, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80034b6:	9205      	str	r2, [sp, #20]
 80034b8:	9302      	str	r3, [sp, #8]
 80034ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034bc:	9204      	str	r2, [sp, #16]
 80034be:	2300      	movs	r3, #0
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80034c0:	4655      	mov	r5, sl
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80034c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	e7c3      	b.n	8003452 <_vsnprintf+0x2fe>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80034ca:	0610      	lsls	r0, r2, #24
 80034cc:	bf48      	it	mi
 80034ce:	b289      	uxthmi	r1, r1
 80034d0:	e7f1      	b.n	80034b6 <_vsnprintf+0x362>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80034d2:	2846      	cmp	r0, #70	; 0x46
 80034d4:	bf08      	it	eq
 80034d6:	f042 0220 	orreq.w	r2, r2, #32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80034da:	9204      	str	r2, [sp, #16]
 80034dc:	3507      	adds	r5, #7
 80034de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034e0:	9203      	str	r2, [sp, #12]
 80034e2:	f025 0307 	bic.w	r3, r5, #7
 80034e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80034ea:	f103 0508 	add.w	r5, r3, #8
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	4641      	mov	r1, r8
 80034f4:	e9cd 2300 	strd	r2, r3, [sp]
 80034f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80034fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034fc:	4622      	mov	r2, r4
 80034fe:	f7ff faeb 	bl	8002ad8 <_ftoa>
 8003502:	e743      	b.n	800338c <_vsnprintf+0x238>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003504:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8003508:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800350a:	bf04      	itt	eq
 800350c:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003510:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003514:	2845      	cmp	r0, #69	; 0x45
 8003516:	bf08      	it	eq
 8003518:	f042 0220 	orreq.w	r2, r2, #32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800351c:	9204      	str	r2, [sp, #16]
 800351e:	3507      	adds	r5, #7
 8003520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003522:	9203      	str	r2, [sp, #12]
 8003524:	f025 0307 	bic.w	r3, r5, #7
 8003528:	f8cd 9008 	str.w	r9, [sp, #8]
 800352c:	f103 0508 	add.w	r5, r3, #8
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	4641      	mov	r1, r8
 8003536:	e9cd 2300 	strd	r2, r3, [sp]
 800353a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800353c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800353e:	4622      	mov	r2, r4
 8003540:	f7ff fc3e 	bl	8002dc0 <_etoa>
 8003544:	e722      	b.n	800338c <_vsnprintf+0x238>
        if (!(flags & FLAGS_LEFT)) {
 8003546:	f012 0302 	ands.w	r3, r2, #2
 800354a:	930d      	str	r3, [sp, #52]	; 0x34
 800354c:	d128      	bne.n	80035a0 <_vsnprintf+0x44c>
 800354e:	469b      	mov	fp, r3
          while (l++ < width) {
 8003550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003552:	eb04 0a0b 	add.w	sl, r4, fp
 8003556:	f10b 0902 	add.w	r9, fp, #2
 800355a:	f10b 0b01 	add.w	fp, fp, #1
 800355e:	455b      	cmp	r3, fp
 8003560:	d817      	bhi.n	8003592 <_vsnprintf+0x43e>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003564:	7828      	ldrb	r0, [r5, #0]
 8003566:	f105 0b04 	add.w	fp, r5, #4
 800356a:	4652      	mov	r2, sl
 800356c:	4641      	mov	r1, r8
 800356e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003570:	47a8      	blx	r5
        if (flags & FLAGS_LEFT) {
 8003572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003574:	f10a 0401 	add.w	r4, sl, #1
        if (flags & FLAGS_LEFT) {
 8003578:	b143      	cbz	r3, 800358c <_vsnprintf+0x438>
 800357a:	f109 39ff 	add.w	r9, r9, #4294967295
 800357e:	eba9 0a0a 	sub.w	sl, r9, sl
          while (l++ < width) {
 8003582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003584:	eb04 030a 	add.w	r3, r4, sl
 8003588:	429a      	cmp	r2, r3
 800358a:	d80d      	bhi.n	80035a8 <_vsnprintf+0x454>
        format++;
 800358c:	3601      	adds	r6, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800358e:	465d      	mov	r5, fp
        break;
 8003590:	e5ee      	b.n	8003170 <_vsnprintf+0x1c>
            out(' ', buffer, idx++, maxlen);
 8003592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003594:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003596:	4652      	mov	r2, sl
 8003598:	4641      	mov	r1, r8
 800359a:	2020      	movs	r0, #32
 800359c:	47b8      	blx	r7
 800359e:	e7d7      	b.n	8003550 <_vsnprintf+0x3fc>
 80035a0:	46a2      	mov	sl, r4
        unsigned int l = 1U;
 80035a2:	f04f 0901 	mov.w	r9, #1
 80035a6:	e7dc      	b.n	8003562 <_vsnprintf+0x40e>
            out(' ', buffer, idx++, maxlen);
 80035a8:	1c65      	adds	r5, r4, #1
 80035aa:	4622      	mov	r2, r4
 80035ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80035b0:	4641      	mov	r1, r8
 80035b2:	2020      	movs	r0, #32
 80035b4:	47a0      	blx	r4
 80035b6:	462c      	mov	r4, r5
 80035b8:	e7e3      	b.n	8003582 <_vsnprintf+0x42e>
        const char* p = va_arg(va, char*);
 80035ba:	1d2b      	adds	r3, r5, #4
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80035bc:	f1b9 0f00 	cmp.w	r9, #0
        const char* p = va_arg(va, char*);
 80035c0:	682d      	ldr	r5, [r5, #0]
 80035c2:	930f      	str	r3, [sp, #60]	; 0x3c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80035c4:	bf14      	ite	ne
 80035c6:	464b      	movne	r3, r9
 80035c8:	f04f 33ff 	moveq.w	r3, #4294967295
 80035cc:	442b      	add	r3, r5
 80035ce:	46ab      	mov	fp, r5
  for (s = str; *s && maxsize--; ++s);
 80035d0:	f89b 1000 	ldrb.w	r1, [fp]
 80035d4:	b109      	cbz	r1, 80035da <_vsnprintf+0x486>
 80035d6:	455b      	cmp	r3, fp
 80035d8:	d130      	bne.n	800363c <_vsnprintf+0x4e8>
        if (flags & FLAGS_PRECISION) {
 80035da:	f412 6380 	ands.w	r3, r2, #1024	; 0x400
  return (unsigned int)(s - str);
 80035de:	ebab 0b05 	sub.w	fp, fp, r5
        if (flags & FLAGS_PRECISION) {
 80035e2:	930d      	str	r3, [sp, #52]	; 0x34
 80035e4:	d002      	beq.n	80035ec <_vsnprintf+0x498>
          l = (l < precision ? l : precision);
 80035e6:	45cb      	cmp	fp, r9
 80035e8:	bf28      	it	cs
 80035ea:	46cb      	movcs	fp, r9
        if (!(flags & FLAGS_LEFT)) {
 80035ec:	f012 0302 	ands.w	r3, r2, #2
 80035f0:	930e      	str	r3, [sp, #56]	; 0x38
 80035f2:	d12d      	bne.n	8003650 <_vsnprintf+0x4fc>
 80035f4:	465b      	mov	r3, fp
 80035f6:	1ae4      	subs	r4, r4, r3
          while (l++ < width) {
 80035f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035fa:	4299      	cmp	r1, r3
 80035fc:	eb04 0203 	add.w	r2, r4, r3
 8003600:	f103 0b01 	add.w	fp, r3, #1
 8003604:	d81d      	bhi.n	8003642 <_vsnprintf+0x4ee>
 8003606:	eba2 0a05 	sub.w	sl, r2, r5
 800360a:	eb0a 0205 	add.w	r2, sl, r5
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800360e:	f815 0b01 	ldrb.w	r0, [r5], #1
 8003612:	b130      	cbz	r0, 8003622 <_vsnprintf+0x4ce>
 8003614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003616:	b1f3      	cbz	r3, 8003656 <_vsnprintf+0x502>
 8003618:	f109 33ff 	add.w	r3, r9, #4294967295
 800361c:	f1b9 0f00 	cmp.w	r9, #0
 8003620:	d118      	bne.n	8003654 <_vsnprintf+0x500>
        if (flags & FLAGS_LEFT) {
 8003622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003624:	4614      	mov	r4, r2
 8003626:	b133      	cbz	r3, 8003636 <_vsnprintf+0x4e2>
 8003628:	ebab 0b02 	sub.w	fp, fp, r2
          while (l++ < width) {
 800362c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800362e:	eb04 030b 	add.w	r3, r4, fp
 8003632:	429a      	cmp	r2, r3
 8003634:	d814      	bhi.n	8003660 <_vsnprintf+0x50c>
        format++;
 8003636:	3601      	adds	r6, #1
        const char* p = va_arg(va, char*);
 8003638:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
        break;
 800363a:	e599      	b.n	8003170 <_vsnprintf+0x1c>
  for (s = str; *s && maxsize--; ++s);
 800363c:	f10b 0b01 	add.w	fp, fp, #1
 8003640:	e7c6      	b.n	80035d0 <_vsnprintf+0x47c>
            out(' ', buffer, idx++, maxlen);
 8003642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003644:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003646:	4641      	mov	r1, r8
 8003648:	2020      	movs	r0, #32
 800364a:	47b8      	blx	r7
          while (l++ < width) {
 800364c:	465b      	mov	r3, fp
 800364e:	e7d3      	b.n	80035f8 <_vsnprintf+0x4a4>
 8003650:	4622      	mov	r2, r4
 8003652:	e7d8      	b.n	8003606 <_vsnprintf+0x4b2>
 8003654:	4699      	mov	r9, r3
          out(*(p++), buffer, idx++, maxlen);
 8003656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003658:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800365a:	4641      	mov	r1, r8
 800365c:	47a0      	blx	r4
 800365e:	e7d4      	b.n	800360a <_vsnprintf+0x4b6>
            out(' ', buffer, idx++, maxlen);
 8003660:	f104 0901 	add.w	r9, r4, #1
 8003664:	4622      	mov	r2, r4
 8003666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003668:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800366a:	4641      	mov	r1, r8
 800366c:	2020      	movs	r0, #32
 800366e:	47a0      	blx	r4
 8003670:	464c      	mov	r4, r9
 8003672:	e7db      	b.n	800362c <_vsnprintf+0x4d8>

08003674 <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 8003674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003676:	4603      	mov	r3, r0
 8003678:	9100      	str	r1, [sp, #0]
 800367a:	f04f 32ff 	mov.w	r2, #4294967295
 800367e:	a903      	add	r1, sp, #12
 8003680:	4802      	ldr	r0, [pc, #8]	; (800368c <vprintf_+0x18>)
 8003682:	f7ff fd67 	bl	8003154 <_vsnprintf>
}
 8003686:	b005      	add	sp, #20
 8003688:	f85d fb04 	ldr.w	pc, [sp], #4
 800368c:	08002acd 	.word	0x08002acd

08003690 <lfs_pair_isnull>:
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	d004      	beq.n	80036a0 <lfs_pair_isnull+0x10>
 8003696:	6840      	ldr	r0, [r0, #4]
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	4258      	negs	r0, r3
 800369c:	4158      	adcs	r0, r3
 800369e:	4770      	bx	lr
 80036a0:	2001      	movs	r0, #1
}
 80036a2:	4770      	bx	lr

080036a4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80036a4:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80036a6:	680b      	ldr	r3, [r1, #0]
 80036a8:	6804      	ldr	r4, [r0, #0]
 80036aa:	429c      	cmp	r4, r3
 80036ac:	d009      	beq.n	80036c2 <lfs_pair_cmp+0x1e>
 80036ae:	6840      	ldr	r0, [r0, #4]
 80036b0:	684a      	ldr	r2, [r1, #4]
 80036b2:	4290      	cmp	r0, r2
 80036b4:	d005      	beq.n	80036c2 <lfs_pair_cmp+0x1e>
 80036b6:	4294      	cmp	r4, r2
 80036b8:	d003      	beq.n	80036c2 <lfs_pair_cmp+0x1e>
 80036ba:	1a18      	subs	r0, r3, r0
 80036bc:	bf18      	it	ne
 80036be:	2001      	movne	r0, #1
 80036c0:	bd10      	pop	{r4, pc}
 80036c2:	2000      	movs	r0, #0
             paira[0] == pairb[1] || paira[1] == pairb[0]);
}
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <lfs_tag_dsize>:
static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
    return !(tag & 0x80000000);
}

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
 80036c6:	f340 0309 	sbfx	r3, r0, #0, #10
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	bf08      	it	eq
 80036d0:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
 80036d2:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 80036d6:	3004      	adds	r0, #4
 80036d8:	4770      	bx	lr

080036da <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80036da:	b510      	push	{r4, lr}
 80036dc:	1f03      	subs	r3, r0, #4
 80036de:	3904      	subs	r1, #4
 80036e0:	3008      	adds	r0, #8
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80036e8:	4062      	eors	r2, r4
 80036ea:	f843 2f04 	str.w	r2, [r3, #4]!
    for (int i = 0; i < 3; i++) {
 80036ee:	4283      	cmp	r3, r0
 80036f0:	d1f7      	bne.n	80036e2 <lfs_gstate_xor+0x8>
    }
}
 80036f2:	bd10      	pop	{r4, pc}

080036f4 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
 80036f4:	6803      	ldr	r3, [r0, #0]
 80036f6:	b933      	cbnz	r3, 8003706 <lfs_gstate_iszero+0x12>
 80036f8:	6842      	ldr	r2, [r0, #4]
 80036fa:	b922      	cbnz	r2, 8003706 <lfs_gstate_iszero+0x12>
 80036fc:	6880      	ldr	r0, [r0, #8]
 80036fe:	fab0 f080 	clz	r0, r0
 8003702:	0940      	lsrs	r0, r0, #5
 8003704:	4770      	bx	lr
            return false;
 8003706:	2000      	movs	r0, #0
 8003708:	4770      	bx	lr

0800370a <lfs_gstate_hasmovehere>:
static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800370a:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003710:	f413 63e0 	ands.w	r3, r3, #1792	; 0x700
 8003714:	d006      	beq.n	8003724 <lfs_gstate_hasmovehere+0x1a>
 8003716:	3004      	adds	r0, #4
 8003718:	f7ff ffc4 	bl	80036a4 <lfs_pair_cmp>
 800371c:	fab0 f080 	clz	r0, r0
 8003720:	0940      	lsrs	r0, r0, #5
 8003722:	bd08      	pop	{r3, pc}
 8003724:	4618      	mov	r0, r3
}
 8003726:	bd08      	pop	{r3, pc}

08003728 <lfs_alloc_lookahead>:

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8003728:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
 8003732:	fbb1 f3f2 	udiv	r3, r1, r2
 8003736:	fb02 1113 	mls	r1, r2, r3, r1

    if (off < lfs->free.size) {
 800373a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800373c:	4299      	cmp	r1, r3
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800373e:	b510      	push	{r4, lr}
    if (off < lfs->free.size) {
 8003740:	d20b      	bcs.n	800375a <lfs_alloc_lookahead+0x32>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8003742:	094c      	lsrs	r4, r1, #5
 8003744:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003746:	2301      	movs	r3, #1
 8003748:	f001 011f 	and.w	r1, r1, #31
 800374c:	fa03 f101 	lsl.w	r1, r3, r1
 8003750:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003754:	430b      	orrs	r3, r1
 8003756:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    }

    return 0;
}
 800375a:	2000      	movs	r0, #0
 800375c:	bd10      	pop	{r4, pc}
	...

08003760 <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <lfs_dir_traverse_filter+0x5c>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8003762:	6803      	ldr	r3, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 8003764:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003766:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 800376a:	4c15      	ldr	r4, [pc, #84]	; (80037c0 <lfs_dir_traverse_filter+0x60>)
    if ((mask & tag) == (mask & *filtertag) ||
 800376c:	ea81 0503 	eor.w	r5, r1, r3
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003770:	bf18      	it	ne
 8003772:	4614      	movne	r4, r2
    if ((mask & tag) == (mask & *filtertag) ||
 8003774:	4225      	tst	r5, r4
 8003776:	d01f      	beq.n	80037b8 <lfs_dir_traverse_filter+0x58>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003778:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 800377c:	3401      	adds	r4, #1
 800377e:	d01b      	beq.n	80037b8 <lfs_dir_traverse_filter+0x58>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8003780:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <lfs_dir_traverse_filter+0x64>)
 8003786:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003788:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
 800378c:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003790:	4294      	cmp	r4, r2
 8003792:	d011      	beq.n	80037b8 <lfs_dir_traverse_filter+0x58>
    return (tag & 0x70000000) >> 20;
 8003794:	0d0a      	lsrs	r2, r1, #20
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003796:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
 800379a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800379e:	d109      	bne.n	80037b4 <lfs_dir_traverse_filter+0x54>
 80037a0:	f3c3 2489 	ubfx	r4, r3, #10, #10
 80037a4:	f3c1 2189 	ubfx	r1, r1, #10, #10
 80037a8:	428c      	cmp	r4, r1
 80037aa:	d303      	bcc.n	80037b4 <lfs_dir_traverse_filter+0x54>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80037ac:	b252      	sxtb	r2, r2
 80037ae:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80037b2:	6003      	str	r3, [r0, #0]
    }

    return false;
 80037b4:	2000      	movs	r0, #0
}
 80037b6:	bd30      	pop	{r4, r5, pc}
        return true;
 80037b8:	2001      	movs	r0, #1
 80037ba:	bd30      	pop	{r4, r5, pc}
 80037bc:	7ffffc00 	.word	0x7ffffc00
 80037c0:	700ffc00 	.word	0x700ffc00
 80037c4:	000ffc00 	.word	0x000ffc00

080037c8 <lfs_dir_commit_size>:
    }

    return 0;
}

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80037c8:	4602      	mov	r2, r0
 80037ca:	b508      	push	{r3, lr}
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80037cc:	4608      	mov	r0, r1
 80037ce:	f7ff ff7a 	bl	80036c6 <lfs_tag_dsize>
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	4418      	add	r0, r3
 80037d6:	6010      	str	r0, [r2, #0]
    return 0;
}
 80037d8:	2000      	movs	r0, #0
 80037da:	bd08      	pop	{r3, pc}

080037dc <lfs_fs_size_count>:
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 80037dc:	6803      	ldr	r3, [r0, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	6003      	str	r3, [r0, #0]
    return 0;
}
 80037e2:	2000      	movs	r0, #0
 80037e4:	4770      	bx	lr

080037e6 <lfs_deinit>:
    if (!lfs->cfg->read_buffer) {
 80037e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
static int lfs_deinit(lfs_t *lfs) {
 80037ea:	b510      	push	{r4, lr}
 80037ec:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 80037ee:	b913      	cbnz	r3, 80037f6 <lfs_deinit+0x10>
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
 80037f0:	68c0      	ldr	r0, [r0, #12]
 80037f2:	f003 f96b 	bl	8006acc <free>
    if (!lfs->cfg->prog_buffer) {
 80037f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	b913      	cbnz	r3, 8003802 <lfs_deinit+0x1c>
 80037fc:	69e0      	ldr	r0, [r4, #28]
 80037fe:	f003 f965 	bl	8006acc <free>
    if (!lfs->cfg->lookahead_buffer) {
 8003802:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	b913      	cbnz	r3, 800380e <lfs_deinit+0x28>
 8003808:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800380a:	f003 f95f 	bl	8006acc <free>
}
 800380e:	2000      	movs	r0, #0
 8003810:	bd10      	pop	{r4, pc}

08003812 <lfs_fs_preporphans.isra.13>:
    lfs->gstate.tag += orphans;
 8003812:	6803      	ldr	r3, [r0, #0]
 8003814:	4419      	add	r1, r3
    return tag & 0x000003ff;
 8003816:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
 800381a:	3300      	adds	r3, #0
 800381c:	bf18      	it	ne
 800381e:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8003820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003824:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
 8003828:	6001      	str	r1, [r0, #0]
 800382a:	4770      	bx	lr

0800382c <lfs_bd_read.isra.14>:
static int lfs_bd_read(lfs_t *lfs,
 800382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003830:	4690      	mov	r8, r2
 8003832:	b085      	sub	sp, #20
    if (block >= lfs->cfg->block_count ||
 8003834:	6802      	ldr	r2, [r0, #0]
static int lfs_bd_read(lfs_t *lfs,
 8003836:	9303      	str	r3, [sp, #12]
 8003838:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    if (block >= lfs->cfg->block_count ||
 800383c:	6a13      	ldr	r3, [r2, #32]
static int lfs_bd_read(lfs_t *lfs,
 800383e:	9002      	str	r0, [sp, #8]
    if (block >= lfs->cfg->block_count ||
 8003840:	454b      	cmp	r3, r9
static int lfs_bd_read(lfs_t *lfs,
 8003842:	468a      	mov	sl, r1
 8003844:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003846:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if (block >= lfs->cfg->block_count ||
 8003848:	f240 809b 	bls.w	8003982 <lfs_bd_read.isra.14+0x156>
 800384c:	69d2      	ldr	r2, [r2, #28]
            off+size > lfs->cfg->block_size) {
 800384e:	19a3      	adds	r3, r4, r6
    if (block >= lfs->cfg->block_count ||
 8003850:	4293      	cmp	r3, r2
 8003852:	f200 8096 	bhi.w	8003982 <lfs_bd_read.isra.14+0x156>
 8003856:	9f10      	ldr	r7, [sp, #64]	; 0x40
    while (size > 0) {
 8003858:	b90e      	cbnz	r6, 800385e <lfs_bd_read.isra.14+0x32>
    return 0;
 800385a:	4630      	mov	r0, r6
 800385c:	e064      	b.n	8003928 <lfs_bd_read.isra.14+0xfc>
        if (pcache && block == pcache->block &&
 800385e:	f1ba 0f00 	cmp.w	sl, #0
 8003862:	d040      	beq.n	80038e6 <lfs_bd_read.isra.14+0xba>
 8003864:	f8da 3000 	ldr.w	r3, [sl]
 8003868:	4599      	cmp	r9, r3
 800386a:	d13c      	bne.n	80038e6 <lfs_bd_read.isra.14+0xba>
                off < pcache->off + pcache->size) {
 800386c:	f8da 5004 	ldr.w	r5, [sl, #4]
 8003870:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003874:	eb05 0b03 	add.w	fp, r5, r3
        if (pcache && block == pcache->block &&
 8003878:	45a3      	cmp	fp, r4
 800387a:	d934      	bls.n	80038e6 <lfs_bd_read.isra.14+0xba>
            if (off >= pcache->off) {
 800387c:	42a5      	cmp	r5, r4
 800387e:	d811      	bhi.n	80038a4 <lfs_bd_read.isra.14+0x78>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003880:	ebab 0b04 	sub.w	fp, fp, r4
    return (a < b) ? a : b;
 8003884:	45b3      	cmp	fp, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003886:	f8da 100c 	ldr.w	r1, [sl, #12]
 800388a:	bf28      	it	cs
 800388c:	46b3      	movcs	fp, r6
 800388e:	1b65      	subs	r5, r4, r5
 8003890:	4638      	mov	r0, r7
 8003892:	465a      	mov	r2, fp
 8003894:	4429      	add	r1, r5
 8003896:	f003 f930 	bl	8006afa <memcpy>
                data += diff;
 800389a:	445f      	add	r7, fp
                off += diff;
 800389c:	445c      	add	r4, fp
                size -= diff;
 800389e:	eba6 060b 	sub.w	r6, r6, fp
 80038a2:	e7d9      	b.n	8003858 <lfs_bd_read.isra.14+0x2c>
            diff = lfs_min(diff, pcache->off-off);
 80038a4:	1b2d      	subs	r5, r5, r4
 80038a6:	42b5      	cmp	r5, r6
 80038a8:	bf28      	it	cs
 80038aa:	4635      	movcs	r5, r6
        if (block == rcache->block &&
 80038ac:	f8d8 3000 	ldr.w	r3, [r8]
 80038b0:	4599      	cmp	r9, r3
 80038b2:	d11e      	bne.n	80038f2 <lfs_bd_read.isra.14+0xc6>
                off < rcache->off + rcache->size) {
 80038b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80038b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80038bc:	440b      	add	r3, r1
        if (block == rcache->block &&
 80038be:	429c      	cmp	r4, r3
 80038c0:	d217      	bcs.n	80038f2 <lfs_bd_read.isra.14+0xc6>
            if (off >= rcache->off) {
 80038c2:	428c      	cmp	r4, r1
 80038c4:	d311      	bcc.n	80038ea <lfs_bd_read.isra.14+0xbe>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80038c6:	1b1b      	subs	r3, r3, r4
 80038c8:	429d      	cmp	r5, r3
 80038ca:	bf28      	it	cs
 80038cc:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80038ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80038d2:	1a61      	subs	r1, r4, r1
 80038d4:	462a      	mov	r2, r5
 80038d6:	4419      	add	r1, r3
 80038d8:	4638      	mov	r0, r7
 80038da:	f003 f90e 	bl	8006afa <memcpy>
            data += diff;
 80038de:	442f      	add	r7, r5
            off += diff;
 80038e0:	442c      	add	r4, r5
            size -= diff;
 80038e2:	1b76      	subs	r6, r6, r5
 80038e4:	e7b8      	b.n	8003858 <lfs_bd_read.isra.14+0x2c>
        if (pcache && block == pcache->block &&
 80038e6:	4635      	mov	r5, r6
 80038e8:	e7e0      	b.n	80038ac <lfs_bd_read.isra.14+0x80>
            diff = lfs_min(diff, rcache->off-off);
 80038ea:	1b09      	subs	r1, r1, r4
 80038ec:	428d      	cmp	r5, r1
 80038ee:	bf28      	it	cs
 80038f0:	460d      	movcs	r5, r1
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80038f2:	9b03      	ldr	r3, [sp, #12]
 80038f4:	429e      	cmp	r6, r3
 80038f6:	9b02      	ldr	r3, [sp, #8]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	d318      	bcc.n	800392e <lfs_bd_read.isra.14+0x102>
 80038fc:	6943      	ldr	r3, [r0, #20]
 80038fe:	fbb4 f2f3 	udiv	r2, r4, r3
 8003902:	fb03 4212 	mls	r2, r3, r2, r4
 8003906:	b992      	cbnz	r2, 800392e <lfs_bd_read.isra.14+0x102>
 8003908:	429e      	cmp	r6, r3
 800390a:	d310      	bcc.n	800392e <lfs_bd_read.isra.14+0x102>
    return a - (a % alignment);
 800390c:	fbb5 f2f3 	udiv	r2, r5, r3
 8003910:	fb03 5312 	mls	r3, r3, r2, r5
 8003914:	1aed      	subs	r5, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8003916:	9500      	str	r5, [sp, #0]
 8003918:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800391c:	463b      	mov	r3, r7
 800391e:	4622      	mov	r2, r4
 8003920:	4649      	mov	r1, r9
 8003922:	47d8      	blx	fp
            if (err) {
 8003924:	2800      	cmp	r0, #0
 8003926:	d0da      	beq.n	80038de <lfs_bd_read.isra.14+0xb2>
}
 8003928:	b005      	add	sp, #20
 800392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800392e:	6941      	ldr	r1, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
 8003930:	9d03      	ldr	r5, [sp, #12]
    return a - (a % alignment);
 8003932:	fbb4 f2f1 	udiv	r2, r4, r1
    return lfs_aligndown(a + alignment-1, alignment);
 8003936:	1e4b      	subs	r3, r1, #1
 8003938:	442b      	add	r3, r5
 800393a:	4423      	add	r3, r4
    return a - (a % alignment);
 800393c:	fb01 4212 	mls	r2, r1, r2, r4
 8003940:	fbb3 f5f1 	udiv	r5, r3, r1
 8003944:	fb01 3115 	mls	r1, r1, r5, r3
 8003948:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 800394a:	69c1      	ldr	r1, [r0, #28]
        rcache->block = block;
 800394c:	f8c8 9000 	str.w	r9, [r8]
    return a - (a % alignment);
 8003950:	1aa2      	subs	r2, r4, r2
        rcache->size = lfs_min(
 8003952:	428b      	cmp	r3, r1
 8003954:	bf94      	ite	ls
 8003956:	ebc2 0303 	rsbls	r3, r2, r3
 800395a:	ebc2 0301 	rsbhi	r3, r2, r1
    return (a < b) ? a : b;
 800395e:	6a81      	ldr	r1, [r0, #40]	; 0x28
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003960:	f8c8 2004 	str.w	r2, [r8, #4]
 8003964:	428b      	cmp	r3, r1
 8003966:	bf28      	it	cs
 8003968:	460b      	movcs	r3, r1
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800396a:	9300      	str	r3, [sp, #0]
        rcache->size = lfs_min(
 800396c:	f8c8 3008 	str.w	r3, [r8, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003970:	6845      	ldr	r5, [r0, #4]
 8003972:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003976:	4649      	mov	r1, r9
 8003978:	47a8      	blx	r5
        if (err) {
 800397a:	2800      	cmp	r0, #0
 800397c:	f43f af6c 	beq.w	8003858 <lfs_bd_read.isra.14+0x2c>
 8003980:	e7d2      	b.n	8003928 <lfs_bd_read.isra.14+0xfc>
        return LFS_ERR_CORRUPT;
 8003982:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8003986:	e7cf      	b.n	8003928 <lfs_bd_read.isra.14+0xfc>

08003988 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8003988:	b530      	push	{r4, r5, lr}
 800398a:	4613      	mov	r3, r2
 800398c:	b087      	sub	sp, #28
    lfs_t *lfs = find->lfs;
 800398e:	6802      	ldr	r2, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 8003990:	4605      	mov	r5, r0
    int err = lfs_bd_read(lfs,
 8003992:	ac04      	add	r4, sp, #16
 8003994:	2008      	movs	r0, #8
 8003996:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8003998:	9003      	str	r0, [sp, #12]
 800399a:	9402      	str	r4, [sp, #8]
 800399c:	6858      	ldr	r0, [r3, #4]
 800399e:	9001      	str	r0, [sp, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	69cb      	ldr	r3, [r1, #28]
 80039a6:	f102 0068 	add.w	r0, r2, #104	; 0x68
 80039aa:	f102 0110 	add.w	r1, r2, #16
 80039ae:	f7ff ff3d 	bl	800382c <lfs_bd_read.isra.14>
    if (err) {
 80039b2:	b930      	cbnz	r0, 80039c2 <lfs_fs_parent_match+0x3a>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 80039b4:	1d29      	adds	r1, r5, #4
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff fe74 	bl	80036a4 <lfs_pair_cmp>
 80039bc:	3000      	adds	r0, #0
 80039be:	bf18      	it	ne
 80039c0:	2001      	movne	r0, #1
}
 80039c2:	b007      	add	sp, #28
 80039c4:	bd30      	pop	{r4, r5, pc}
	...

080039c8 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	b095      	sub	sp, #84	; 0x54
 80039ce:	4617      	mov	r7, r2
 80039d0:	930b      	str	r3, [sp, #44]	; 0x2c
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80039d6:	6a12      	ldr	r2, [r2, #32]
 80039d8:	4293      	cmp	r3, r2
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80039da:	4606      	mov	r6, r0
 80039dc:	460d      	mov	r5, r1
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80039de:	f080 81de 	bcs.w	8003d9e <lfs_dir_fetchmatch+0x3d6>
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	428a      	cmp	r2, r1
 80039e6:	f240 81da 	bls.w	8003d9e <lfs_dir_fetchmatch+0x3d6>
 80039ea:	f100 0268 	add.w	r2, r0, #104	; 0x68
    uint32_t revs[2] = {0, 0};
 80039ee:	2100      	movs	r1, #0
 80039f0:	9205      	str	r2, [sp, #20]
        int err = lfs_bd_read(lfs,
 80039f2:	2404      	movs	r4, #4
 80039f4:	aa0e      	add	r2, sp, #56	; 0x38
 80039f6:	9202      	str	r2, [sp, #8]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	4602      	mov	r2, r0
 80039fc:	9403      	str	r4, [sp, #12]
 80039fe:	9101      	str	r1, [sp, #4]
 8003a00:	4623      	mov	r3, r4
 8003a02:	9805      	ldr	r0, [sp, #20]
    uint32_t revs[2] = {0, 0};
 8003a04:	910e      	str	r1, [sp, #56]	; 0x38
 8003a06:	910f      	str	r1, [sp, #60]	; 0x3c
        int err = lfs_bd_read(lfs,
 8003a08:	f7ff ff10 	bl	800382c <lfs_bd_read.isra.14>
        if (err && err != LFS_ERR_CORRUPT) {
 8003a0c:	b110      	cbz	r0, 8003a14 <lfs_dir_fetchmatch+0x4c>
 8003a0e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003a12:	d110      	bne.n	8003a36 <lfs_dir_fetchmatch+0x6e>
        int err = lfs_bd_read(lfs,
 8003a14:	9403      	str	r4, [sp, #12]
 8003a16:	ab0f      	add	r3, sp, #60	; 0x3c
 8003a18:	2400      	movs	r4, #0
 8003a1a:	9302      	str	r3, [sp, #8]
 8003a1c:	9401      	str	r4, [sp, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	4632      	mov	r2, r6
 8003a24:	2304      	movs	r3, #4
 8003a26:	4621      	mov	r1, r4
 8003a28:	9805      	ldr	r0, [sp, #20]
 8003a2a:	f7ff feff 	bl	800382c <lfs_bd_read.isra.14>
        if (err && err != LFS_ERR_CORRUPT) {
 8003a2e:	b138      	cbz	r0, 8003a40 <lfs_dir_fetchmatch+0x78>
 8003a30:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003a34:	d00b      	beq.n	8003a4e <lfs_dir_fetchmatch+0x86>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003a36:	4604      	mov	r4, r0
}
 8003a38:	4620      	mov	r0, r4
 8003a3a:	b015      	add	sp, #84	; 0x54
 8003a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (int)(unsigned)(a - b);
 8003a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a42:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003a44:	1ae4      	subs	r4, r4, r3
        if (err != LFS_ERR_CORRUPT &&
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	bfd4      	ite	le
 8003a4a:	2400      	movle	r4, #0
 8003a4c:	2401      	movgt	r4, #1
    dir->pair[0] = pair[(r+0)%2];
 8003a4e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8003a52:	602b      	str	r3, [r5, #0]
    dir->pair[1] = pair[(r+1)%2];
 8003a54:	f084 0301 	eor.w	r3, r4, #1
 8003a58:	930a      	str	r3, [sp, #40]	; 0x28
 8003a5a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003a5e:	606b      	str	r3, [r5, #4]
    dir->rev = revs[(r+0)%2];
 8003a60:	ab14      	add	r3, sp, #80	; 0x50
 8003a62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    dir->off = 0; // nonzero = found some commits
 8003a66:	2202      	movs	r2, #2
    dir->rev = revs[(r+0)%2];
 8003a68:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8003a6c:	60ab      	str	r3, [r5, #8]
    dir->off = 0; // nonzero = found some commits
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60eb      	str	r3, [r5, #12]
 8003a72:	9209      	str	r2, [sp, #36]	; 0x24
    lfs_stag_t besttag = -1;
 8003a74:	f04f 34ff 	mov.w	r4, #4294967295
        bool tempsplit = false;
 8003a78:	9308      	str	r3, [sp, #32]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8003a7a:	4ab9      	ldr	r2, [pc, #740]	; (8003d60 <lfs_dir_fetchmatch+0x398>)
 8003a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a80:	ab10      	add	r3, sp, #64	; 0x40
 8003a82:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8003a86:	2204      	movs	r2, #4
 8003a88:	f105 0108 	add.w	r1, r5, #8
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f002 ffa4 	bl	80069dc <lfs_crc>
        bool tempsplit = false;
 8003a94:	2300      	movs	r3, #0
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8003a96:	9004      	str	r0, [sp, #16]
 8003a98:	4627      	mov	r7, r4
        bool tempsplit = false;
 8003a9a:	9307      	str	r3, [sp, #28]
        uint16_t tempcount = 0;
 8003a9c:	9306      	str	r3, [sp, #24]
        lfs_tag_t ptag = 0xffffffff;
 8003a9e:	f04f 39ff 	mov.w	r9, #4294967295
        lfs_off_t off = 0;
 8003aa2:	469a      	mov	sl, r3
            off += lfs_tag_dsize(ptag);
 8003aa4:	4648      	mov	r0, r9
 8003aa6:	f7ff fe0e 	bl	80036c6 <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
 8003aaa:	2204      	movs	r2, #4
 8003aac:	9203      	str	r2, [sp, #12]
            off += lfs_tag_dsize(ptag);
 8003aae:	4482      	add	sl, r0
            int err = lfs_bd_read(lfs,
 8003ab0:	682a      	ldr	r2, [r5, #0]
 8003ab2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003ab4:	9200      	str	r2, [sp, #0]
 8003ab6:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8003aba:	f8cd b008 	str.w	fp, [sp, #8]
 8003abe:	f8cd a004 	str.w	sl, [sp, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	9805      	ldr	r0, [sp, #20]
 8003ac6:	4632      	mov	r2, r6
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f7ff feaf 	bl	800382c <lfs_bd_read.isra.14>
            if (err) {
 8003ace:	4680      	mov	r8, r0
 8003ad0:	b138      	cbz	r0, 8003ae2 <lfs_dir_fetchmatch+0x11a>
                if (err == LFS_ERR_CORRUPT) {
 8003ad2:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003ad6:	f040 8124 	bne.w	8003d22 <lfs_dir_fetchmatch+0x35a>
                        dir->erased = false;
 8003ada:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003ade:	75ab      	strb	r3, [r5, #22]
 8003ae0:	e022      	b.n	8003b28 <lfs_dir_fetchmatch+0x160>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003ae2:	4659      	mov	r1, fp
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	9804      	ldr	r0, [sp, #16]
 8003ae8:	f002 ff78 	bl	80069dc <lfs_crc>
    return __builtin_bswap32(a);
 8003aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aee:	9004      	str	r0, [sp, #16]
 8003af0:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
 8003af2:	ea89 0b03 	eor.w	fp, r9, r3
            if (!lfs_tag_isvalid(tag)) {
 8003af6:	f1bb 0f00 	cmp.w	fp, #0
            tag = lfs_frombe32(tag) ^ ptag;
 8003afa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag)) {
 8003afe:	da2e      	bge.n	8003b5e <lfs_dir_fetchmatch+0x196>
    return (tag & 0x70000000) >> 20;
 8003b00:	ea4f 5a19 	mov.w	sl, r9, lsr #20
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8003b04:	f40a 6ae0 	and.w	sl, sl, #1792	; 0x700
 8003b08:	f5ba 6fa0 	cmp.w	sl, #1280	; 0x500
 8003b0c:	d10a      	bne.n	8003b24 <lfs_dir_fetchmatch+0x15c>
                        dir->off % lfs->cfg->prog_size == 0);
 8003b0e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003b10:	68ea      	ldr	r2, [r5, #12]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	fbb2 f8f3 	udiv	r8, r2, r3
 8003b18:	fb03 2818 	mls	r8, r3, r8, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8003b1c:	fab8 f888 	clz	r8, r8
 8003b20:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003b24:	f885 8016 	strb.w	r8, [r5, #22]
        if (dir->off > 0) {
 8003b28:	68eb      	ldr	r3, [r5, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 811e 	beq.w	8003d6c <lfs_dir_fetchmatch+0x3a4>
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8003b30:	4629      	mov	r1, r5
 8003b32:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8003b36:	f7ff fde8 	bl	800370a <lfs_gstate_hasmovehere>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	f000 80fa 	beq.w	8003d34 <lfs_dir_fetchmatch+0x36c>
    return (tag & 0x000ffc00) >> 10;
 8003b40:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8003b42:	f3c4 2289 	ubfx	r2, r4, #10, #10
 8003b46:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	f040 80eb 	bne.w	8003d26 <lfs_dir_fetchmatch+0x35e>
                    besttag |= 0x80000000;
 8003b50:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
            if (id) {
 8003b54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 80ee 	bne.w	8003d38 <lfs_dir_fetchmatch+0x370>
 8003b5c:	e0f7      	b.n	8003d4e <lfs_dir_fetchmatch+0x386>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8003b5e:	4658      	mov	r0, fp
 8003b60:	f7ff fdb1 	bl	80036c6 <lfs_tag_dsize>
 8003b64:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	4450      	add	r0, sl
 8003b6a:	4298      	cmp	r0, r3
 8003b6c:	d8b5      	bhi.n	8003ada <lfs_dir_fetchmatch+0x112>
    return (tag & 0x70000000) >> 20;
 8003b6e:	ea4f 521b 	mov.w	r2, fp, lsr #20
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8003b72:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003b76:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003b7a:	d044      	beq.n	8003c06 <lfs_dir_fetchmatch+0x23e>
 8003b7c:	f04f 0904 	mov.w	r9, #4
                err = lfs_bd_read(lfs,
 8003b80:	f10d 0834 	add.w	r8, sp, #52	; 0x34
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8003b84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003b86:	f7ff fd9e 	bl	80036c6 <lfs_tag_dsize>
 8003b8a:	4581      	cmp	r9, r0
 8003b8c:	d218      	bcs.n	8003bc0 <lfs_dir_fetchmatch+0x1f8>
                err = lfs_bd_read(lfs,
 8003b8e:	2201      	movs	r2, #1
 8003b90:	9203      	str	r2, [sp, #12]
 8003b92:	eb09 020a 	add.w	r2, r9, sl
 8003b96:	9201      	str	r2, [sp, #4]
 8003b98:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003b9a:	682a      	ldr	r2, [r5, #0]
 8003b9c:	9200      	str	r2, [sp, #0]
 8003b9e:	f8cd 8008 	str.w	r8, [sp, #8]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	9805      	ldr	r0, [sp, #20]
 8003ba6:	4632      	mov	r2, r6
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f7ff fe3f 	bl	800382c <lfs_bd_read.isra.14>
                if (err) {
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d061      	beq.n	8003c76 <lfs_dir_fetchmatch+0x2ae>
                    if (err == LFS_ERR_CORRUPT) {
 8003bb2:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003bb6:	f47f af3e 	bne.w	8003a36 <lfs_dir_fetchmatch+0x6e>
                        dir->erased = false;
 8003bba:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003bbe:	75ab      	strb	r3, [r5, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8003bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 8003bc2:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8003bc4:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
 8003bc8:	d15e      	bne.n	8003c88 <lfs_dir_fetchmatch+0x2c0>
                if (lfs_tag_id(tag) >= tempcount) {
 8003bca:	9a06      	ldr	r2, [sp, #24]
    return (tag & 0x000ffc00) >> 10;
 8003bcc:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d801      	bhi.n	8003bd8 <lfs_dir_fetchmatch+0x210>
                    tempcount = lfs_tag_id(tag) + 1;
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	9306      	str	r3, [sp, #24]
            if ((fmask & tag) == (fmask & ftag)) {
 8003bd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bde:	404b      	eors	r3, r1
 8003be0:	4213      	tst	r3, r2
 8003be2:	d10d      	bne.n	8003c00 <lfs_dir_fetchmatch+0x238>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	9312      	str	r3, [sp, #72]	; 0x48
                        dir->pair[0], off+sizeof(tag)});
 8003be8:	f10a 0304 	add.w	r3, sl, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003bec:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bee:	aa12      	add	r2, sp, #72	; 0x48
 8003bf0:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003bf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003bf4:	4798      	blx	r3
                if (res < 0) {
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	db14      	blt.n	8003c24 <lfs_dir_fetchmatch+0x25c>
 8003bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                if (res == LFS_CMP_EQ) {
 8003bfc:	d17c      	bne.n	8003cf8 <lfs_dir_fetchmatch+0x330>
                    tempbesttag = tag;
 8003bfe:	461f      	mov	r7, r3
 8003c00:	463b      	mov	r3, r7
 8003c02:	4627      	mov	r7, r4
 8003c04:	e033      	b.n	8003c6e <lfs_dir_fetchmatch+0x2a6>
                err = lfs_bd_read(lfs,
 8003c06:	2204      	movs	r2, #4
 8003c08:	9203      	str	r2, [sp, #12]
 8003c0a:	aa0d      	add	r2, sp, #52	; 0x34
 8003c0c:	9202      	str	r2, [sp, #8]
 8003c0e:	f10a 0204 	add.w	r2, sl, #4
 8003c12:	9201      	str	r2, [sp, #4]
 8003c14:	682a      	ldr	r2, [r5, #0]
 8003c16:	9200      	str	r2, [sp, #0]
 8003c18:	4641      	mov	r1, r8
 8003c1a:	4632      	mov	r2, r6
 8003c1c:	9805      	ldr	r0, [sp, #20]
 8003c1e:	f7ff fe05 	bl	800382c <lfs_bd_read.isra.14>
                if (err) {
 8003c22:	b120      	cbz	r0, 8003c2e <lfs_dir_fetchmatch+0x266>
                    if (res == LFS_ERR_CORRUPT) {
 8003c24:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003c28:	f43f af57 	beq.w	8003ada <lfs_dir_fetchmatch+0x112>
 8003c2c:	e703      	b.n	8003a36 <lfs_dir_fetchmatch+0x6e>
                if (crc != dcrc) {
 8003c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c30:	9a04      	ldr	r2, [sp, #16]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	f47f af51 	bne.w	8003ada <lfs_dir_fetchmatch+0x112>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003c38:	980c      	ldr	r0, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
 8003c3a:	0d03      	lsrs	r3, r0, #20
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003c3c:	ea8b 7bc3 	eor.w	fp, fp, r3, lsl #31
                lfs->seed ^= crc;
 8003c40:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003c42:	4053      	eors	r3, r2
 8003c44:	62f3      	str	r3, [r6, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 8003c46:	f7ff fd3e 	bl	80036c6 <lfs_tag_dsize>
                dir->count = tempcount;
 8003c4a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8003c4e:	82ab      	strh	r3, [r5, #20]
                dir->tail[0] = temptail[0];
 8003c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c52:	61ab      	str	r3, [r5, #24]
                dir->tail[1] = temptail[1];
 8003c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c56:	61eb      	str	r3, [r5, #28]
                dir->off = off + lfs_tag_dsize(tag);
 8003c58:	4450      	add	r0, sl
                dir->split = tempsplit;
 8003c5a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003c5e:	75eb      	strb	r3, [r5, #23]
                crc = 0xffffffff;
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
                dir->off = off + lfs_tag_dsize(tag);
 8003c64:	60e8      	str	r0, [r5, #12]
                dir->etag = ptag;
 8003c66:	f8c5 b010 	str.w	fp, [r5, #16]
 8003c6a:	463b      	mov	r3, r7
                crc = 0xffffffff;
 8003c6c:	9204      	str	r2, [sp, #16]
 8003c6e:	463c      	mov	r4, r7
 8003c70:	46d9      	mov	r9, fp
 8003c72:	461f      	mov	r7, r3
 8003c74:	e716      	b.n	8003aa4 <lfs_dir_fetchmatch+0xdc>
                crc = lfs_crc(crc, &dat, 1);
 8003c76:	2201      	movs	r2, #1
 8003c78:	4641      	mov	r1, r8
 8003c7a:	9804      	ldr	r0, [sp, #16]
 8003c7c:	f002 feae 	bl	80069dc <lfs_crc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8003c80:	f109 0901 	add.w	r9, r9, #1
                crc = lfs_crc(crc, &dat, 1);
 8003c84:	9004      	str	r0, [sp, #16]
 8003c86:	e77d      	b.n	8003b84 <lfs_dir_fetchmatch+0x1bc>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8003c88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003c8c:	d11a      	bne.n	8003cc4 <lfs_dir_fetchmatch+0x2fc>
                tempcount += lfs_tag_splice(tag);
 8003c8e:	9906      	ldr	r1, [sp, #24]
    return (int8_t)lfs_tag_chunk(tag);
 8003c90:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
 8003c92:	4411      	add	r1, r2
 8003c94:	b289      	uxth	r1, r1
 8003c96:	9106      	str	r1, [sp, #24]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8003c98:	4932      	ldr	r1, [pc, #200]	; (8003d64 <lfs_dir_fetchmatch+0x39c>)
 8003c9a:	4039      	ands	r1, r7
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003c9c:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
 8003ca0:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d102      	bne.n	8003cae <lfs_dir_fetchmatch+0x2e6>
                    tempbesttag |= 0x80000000;
 8003ca8:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8003cac:	e794      	b.n	8003bd8 <lfs_dir_fetchmatch+0x210>
                } else if (tempbesttag != -1 &&
 8003cae:	1c78      	adds	r0, r7, #1
 8003cb0:	d092      	beq.n	8003bd8 <lfs_dir_fetchmatch+0x210>
 8003cb2:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8003cb6:	f3c7 2189 	ubfx	r1, r7, #10, #10
 8003cba:	428b      	cmp	r3, r1
 8003cbc:	d88c      	bhi.n	8003bd8 <lfs_dir_fetchmatch+0x210>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003cbe:	eb07 2782 	add.w	r7, r7, r2, lsl #10
 8003cc2:	e789      	b.n	8003bd8 <lfs_dir_fetchmatch+0x210>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8003cc4:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8003cc8:	d186      	bne.n	8003bd8 <lfs_dir_fetchmatch+0x210>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003cca:	f002 0301 	and.w	r3, r2, #1
                err = lfs_bd_read(lfs,
 8003cce:	2208      	movs	r2, #8
 8003cd0:	9203      	str	r2, [sp, #12]
 8003cd2:	aa10      	add	r2, sp, #64	; 0x40
 8003cd4:	9202      	str	r2, [sp, #8]
 8003cd6:	f10a 0204 	add.w	r2, sl, #4
 8003cda:	9201      	str	r2, [sp, #4]
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003cdc:	9307      	str	r3, [sp, #28]
                err = lfs_bd_read(lfs,
 8003cde:	682a      	ldr	r2, [r5, #0]
 8003ce0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003ce2:	9200      	str	r2, [sp, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	9805      	ldr	r0, [sp, #20]
 8003ce8:	4632      	mov	r2, r6
 8003cea:	2100      	movs	r1, #0
 8003cec:	f7ff fd9e 	bl	800382c <lfs_bd_read.isra.14>
                    if (err == LFS_ERR_CORRUPT) {
 8003cf0:	3054      	adds	r0, #84	; 0x54
 8003cf2:	f47f af71 	bne.w	8003bd8 <lfs_dir_fetchmatch+0x210>
 8003cf6:	e6f0      	b.n	8003ada <lfs_dir_fetchmatch+0x112>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8003cf8:	491b      	ldr	r1, [pc, #108]	; (8003d68 <lfs_dir_fetchmatch+0x3a0>)
 8003cfa:	ea83 0207 	eor.w	r2, r3, r7
 8003cfe:	420a      	tst	r2, r1
 8003d00:	d00c      	beq.n	8003d1c <lfs_dir_fetchmatch+0x354>
                } else if (res == LFS_CMP_GT &&
 8003d02:	2802      	cmp	r0, #2
 8003d04:	f47f af7c 	bne.w	8003c00 <lfs_dir_fetchmatch+0x238>
 8003d08:	f3c7 2289 	ubfx	r2, r7, #10, #10
 8003d0c:	f3c3 2189 	ubfx	r1, r3, #10, #10
 8003d10:	428a      	cmp	r2, r1
 8003d12:	f4ff af75 	bcc.w	8003c00 <lfs_dir_fetchmatch+0x238>
                    tempbesttag = tag | 0x80000000;
 8003d16:	f043 4700 	orr.w	r7, r3, #2147483648	; 0x80000000
 8003d1a:	e771      	b.n	8003c00 <lfs_dir_fetchmatch+0x238>
                    tempbesttag = -1;
 8003d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d20:	e76e      	b.n	8003c00 <lfs_dir_fetchmatch+0x238>
            int err = lfs_bd_read(lfs,
 8003d22:	4604      	mov	r4, r0
 8003d24:	e688      	b.n	8003a38 <lfs_dir_fetchmatch+0x70>
                } else if (besttag != -1 &&
 8003d26:	1c61      	adds	r1, r4, #1
 8003d28:	f43f af14 	beq.w	8003b54 <lfs_dir_fetchmatch+0x18c>
 8003d2c:	429a      	cmp	r2, r3
                    besttag -= LFS_MKTAG(0, 1, 0);
 8003d2e:	bf88      	it	hi
 8003d30:	f5a4 6480 	subhi.w	r4, r4, #1024	; 0x400
            if (id) {
 8003d34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d36:	b13b      	cbz	r3, 8003d48 <lfs_dir_fetchmatch+0x380>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8003d38:	8aaa      	ldrh	r2, [r5, #20]
 8003d3a:	f3c4 2389 	ubfx	r3, r4, #10, #10
    return (a < b) ? a : b;
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	bf28      	it	cs
 8003d42:	4613      	movcs	r3, r2
 8003d44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003d46:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
 8003d48:	2c00      	cmp	r4, #0
 8003d4a:	f6bf ae75 	bge.w	8003a38 <lfs_dir_fetchmatch+0x70>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8003d4e:	8aab      	ldrh	r3, [r5, #20]
 8003d50:	f3c4 2489 	ubfx	r4, r4, #10, #10
                return LFS_ERR_NOENT;
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	bf94      	ite	ls
 8003d58:	2400      	movls	r4, #0
 8003d5a:	f06f 0401 	mvnhi.w	r4, #1
 8003d5e:	e66b      	b.n	8003a38 <lfs_dir_fetchmatch+0x70>
 8003d60:	08007990 	.word	0x08007990
 8003d64:	000ffc00 	.word	0x000ffc00
 8003d68:	7ffffc00 	.word	0x7ffffc00
        dir->rev = revs[(r+1)%2];
 8003d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d6e:	a814      	add	r0, sp, #80	; 0x50
 8003d70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    pair[0] = pair[1];
 8003d74:	e895 000c 	ldmia.w	r5, {r2, r3}
        dir->rev = revs[(r+1)%2];
 8003d78:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8003d7c:	60a9      	str	r1, [r5, #8]
    for (int i = 0; i < 2; i++) {
 8003d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
    pair[0] = pair[1];
 8003d80:	602b      	str	r3, [r5, #0]
    for (int i = 0; i < 2; i++) {
 8003d82:	3901      	subs	r1, #1
    pair[1] = t;
 8003d84:	606a      	str	r2, [r5, #4]
    for (int i = 0; i < 2; i++) {
 8003d86:	9109      	str	r1, [sp, #36]	; 0x24
 8003d88:	f47f ae77 	bne.w	8003a7a <lfs_dir_fetchmatch+0xb2>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8003d8c:	4905      	ldr	r1, [pc, #20]	; (8003da4 <lfs_dir_fetchmatch+0x3dc>)
 8003d8e:	9101      	str	r1, [sp, #4]
 8003d90:	9200      	str	r2, [sp, #0]
 8003d92:	4905      	ldr	r1, [pc, #20]	; (8003da8 <lfs_dir_fetchmatch+0x3e0>)
 8003d94:	4805      	ldr	r0, [pc, #20]	; (8003dac <lfs_dir_fetchmatch+0x3e4>)
 8003d96:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003d9a:	f002 ff6d 	bl	8006c78 <iprintf>
        return LFS_ERR_CORRUPT;
 8003d9e:	f06f 0453 	mvn.w	r4, #83	; 0x53
 8003da2:	e649      	b.n	8003a38 <lfs_dir_fetchmatch+0x70>
 8003da4:	08007d9e 	.word	0x08007d9e
 8003da8:	08007f20 	.word	0x08007f20
 8003dac:	08007f3b 	.word	0x08007f3b

08003db0 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 8003db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    parent->tail[1] = 1;
 8003db4:	2301      	movs	r3, #1
    parent->tail[0] = 0;
 8003db6:	2400      	movs	r4, #0
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8003db8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8003e24 <lfs_fs_parent+0x74>
 8003dbc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003e28 <lfs_fs_parent+0x78>
 8003dc0:	f8df a068 	ldr.w	sl, [pc, #104]	; 8003e2c <lfs_fs_parent+0x7c>
    parent->tail[0] = 0;
 8003dc4:	6194      	str	r4, [r2, #24]
        lfs_mdir_t *parent) {
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	4606      	mov	r6, r0
 8003dca:	460f      	mov	r7, r1
 8003dcc:	4615      	mov	r5, r2
    parent->tail[1] = 1;
 8003dce:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(parent->tail)) {
 8003dd0:	f105 0218 	add.w	r2, r5, #24
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7ff fc5b 	bl	8003690 <lfs_pair_isnull>
 8003dda:	b110      	cbz	r0, 8003de2 <lfs_fs_parent+0x32>
    return LFS_ERR_NOENT;
 8003ddc:	f06f 0001 	mvn.w	r0, #1
 8003de0:	e01a      	b.n	8003e18 <lfs_fs_parent+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8003de2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8003dea:	d218      	bcs.n	8003e1e <lfs_fs_parent+0x6e>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9306      	str	r3, [sp, #24]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8003df4:	ab05      	add	r3, sp, #20
 8003df6:	9303      	str	r3, [sp, #12]
 8003df8:	9001      	str	r0, [sp, #4]
 8003dfa:	f8cd 8008 	str.w	r8, [sp, #8]
 8003dfe:	f8cd 9000 	str.w	r9, [sp]
 8003e02:	4653      	mov	r3, sl
 8003e04:	4629      	mov	r1, r5
 8003e06:	4630      	mov	r0, r6
        cycle += 1;
 8003e08:	3401      	adds	r4, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8003e0a:	9605      	str	r6, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8003e0c:	f7ff fddc 	bl	80039c8 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d0dd      	beq.n	8003dd0 <lfs_fs_parent+0x20>
 8003e14:	1c83      	adds	r3, r0, #2
 8003e16:	d0db      	beq.n	8003dd0 <lfs_fs_parent+0x20>
}
 8003e18:	b008      	add	sp, #32
 8003e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LFS_ERR_CORRUPT;
 8003e1e:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8003e22:	e7f9      	b.n	8003e18 <lfs_fs_parent+0x68>
 8003e24:	08003989 	.word	0x08003989
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	7ff003ff 	.word	0x7ff003ff

08003e30 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8003e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8003e32:	2300      	movs	r3, #0
 8003e34:	9303      	str	r3, [sp, #12]
 8003e36:	9302      	str	r3, [sp, #8]
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	f7ff fdc2 	bl	80039c8 <lfs_dir_fetchmatch>
}
 8003e44:	b005      	add	sp, #20
 8003e46:	f85d fb04 	ldr.w	pc, [sp], #4

08003e4a <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8003e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdir->tail[1] = 1;
 8003e4e:	2301      	movs	r3, #1
    pdir->tail[0] = 0;
 8003e50:	2400      	movs	r4, #0
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8003e52:	4607      	mov	r7, r0
 8003e54:	4688      	mov	r8, r1
 8003e56:	4615      	mov	r5, r2
    pdir->tail[0] = 0;
 8003e58:	6194      	str	r4, [r2, #24]
    pdir->tail[1] = 1;
 8003e5a:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(pdir->tail)) {
 8003e5c:	f102 0618 	add.w	r6, r2, #24
 8003e60:	4630      	mov	r0, r6
 8003e62:	f7ff fc15 	bl	8003690 <lfs_pair_isnull>
 8003e66:	b118      	cbz	r0, 8003e70 <lfs_fs_pred+0x26>
    return LFS_ERR_NOENT;
 8003e68:	f06f 0001 	mvn.w	r0, #1
 8003e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (cycle >= lfs->cfg->block_count/2) {
 8003e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8003e78:	d20e      	bcs.n	8003e98 <lfs_fs_pred+0x4e>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	4630      	mov	r0, r6
        cycle += 1;
 8003e7e:	3401      	adds	r4, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8003e80:	f7ff fc10 	bl	80036a4 <lfs_pair_cmp>
 8003e84:	b130      	cbz	r0, 8003e94 <lfs_fs_pred+0x4a>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8003e86:	4632      	mov	r2, r6
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff ffd0 	bl	8003e30 <lfs_dir_fetch>
        if (err) {
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0e5      	beq.n	8003e60 <lfs_fs_pred+0x16>
}
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LFS_ERR_CORRUPT;
 8003e98:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8003e9c:	e7fa      	b.n	8003e94 <lfs_fs_pred+0x4a>
	...

08003ea0 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea4:	b095      	sub	sp, #84	; 0x54
 8003ea6:	4692      	mov	sl, r2
 8003ea8:	461d      	mov	r5, r3
 8003eaa:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 8003eae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003eb0:	920d      	str	r2, [sp, #52]	; 0x34
 8003eb2:	f9bd b090 	ldrsh.w	fp, [sp, #144]	; 0x90
 8003eb6:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
 8003eba:	920e      	str	r2, [sp, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003ebc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800403c <lfs_dir_traverse+0x19c>
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003ec0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    return (tag & 0x000ffc00) >> 10;
 8003ec2:	f3c3 2289 	ubfx	r2, r3, #10, #10
 8003ec6:	920b      	str	r2, [sp, #44]	; 0x2c
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8003ec8:	ea4f 228b 	mov.w	r2, fp, lsl #10
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003ecc:	4607      	mov	r7, r0
 8003ece:	4688      	mov	r8, r1
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8003ed0:	920c      	str	r2, [sp, #48]	; 0x30
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003ed2:	ea03 0909 	and.w	r9, r3, r9
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f7ff fbf5 	bl	80036c6 <lfs_tag_dsize>
 8003edc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003ee0:	eb0a 0400 	add.w	r4, sl, r0
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d250      	bcs.n	8003f8a <lfs_dir_traverse+0xea>
            int err = lfs_bd_read(lfs,
 8003ee8:	aa11      	add	r2, sp, #68	; 0x44
 8003eea:	2304      	movs	r3, #4
 8003eec:	9202      	str	r2, [sp, #8]
 8003eee:	f8d8 2000 	ldr.w	r2, [r8]
 8003ef2:	9200      	str	r2, [sp, #0]
 8003ef4:	9303      	str	r3, [sp, #12]
 8003ef6:	9401      	str	r4, [sp, #4]
 8003ef8:	463a      	mov	r2, r7
 8003efa:	2100      	movs	r1, #0
 8003efc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003f00:	f7ff fc94 	bl	800382c <lfs_bd_read.isra.14>
            if (err) {
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d13d      	bne.n	8003f84 <lfs_dir_traverse+0xe4>
    return __builtin_bswap32(a);
 8003f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f0a:	ba1b      	rev	r3, r3
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003f0c:	405d      	eors	r5, r3
            disk.block = dir->pair[0];
 8003f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f12:	9312      	str	r3, [sp, #72]	; 0x48
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003f14:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
            disk.off = off+sizeof(lfs_tag_t);
 8003f18:	1d23      	adds	r3, r4, #4
 8003f1a:	46a2      	mov	sl, r4
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003f1c:	9511      	str	r5, [sp, #68]	; 0x44
            disk.off = off+sizeof(lfs_tag_t);
 8003f1e:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = &disk;
 8003f20:	ac12      	add	r4, sp, #72	; 0x48
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f26:	4053      	eors	r3, r2
 8003f28:	ea13 0309 	ands.w	r3, r3, r9
 8003f2c:	d1d3      	bne.n	8003ed6 <lfs_dir_traverse+0x36>
        if (lfs_tag_id(tmask) != 0) {
 8003f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f30:	2a00      	cmp	r2, #0
 8003f32:	d135      	bne.n	8003fa0 <lfs_dir_traverse+0x100>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003f34:	9911      	ldr	r1, [sp, #68]	; 0x44
    return (tag & 0x7ff00000) >> 20;
 8003f36:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0cb      	beq.n	8003ed6 <lfs_dir_traverse+0x36>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8003f3e:	f240 1201 	movw	r2, #257	; 0x101
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d14d      	bne.n	8003fe2 <lfs_dir_traverse+0x142>
            uint16_t fromid = lfs_tag_size(tag);
 8003f46:	f3c1 0309 	ubfx	r3, r1, #0, #10
            int err = lfs_dir_traverse(lfs,
 8003f4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f4c:	9208      	str	r2, [sp, #32]
    return (tag & 0x000ffc00) >> 10;
 8003f4e:	f3c1 2189 	ubfx	r1, r1, #10, #10
            int err = lfs_dir_traverse(lfs,
 8003f52:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8003f54:	9207      	str	r2, [sp, #28]
                    fromid, fromid+1, toid-fromid+diff,
 8003f56:	1ac9      	subs	r1, r1, r3
            int err = lfs_dir_traverse(lfs,
 8003f58:	1c5a      	adds	r2, r3, #1
                    fromid, fromid+1, toid-fromid+diff,
 8003f5a:	4459      	add	r1, fp
            int err = lfs_dir_traverse(lfs,
 8003f5c:	9304      	str	r3, [sp, #16]
 8003f5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f62:	b209      	sxth	r1, r1
 8003f64:	9205      	str	r2, [sp, #20]
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4b32      	ldr	r3, [pc, #200]	; (8004034 <lfs_dir_traverse+0x194>)
 8003f6c:	9106      	str	r1, [sp, #24]
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	9201      	str	r2, [sp, #4]
 8003f72:	9200      	str	r2, [sp, #0]
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	f7ff ff90 	bl	8003ea0 <lfs_dir_traverse>
            if (err) {
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d0a8      	beq.n	8003ed6 <lfs_dir_traverse+0x36>
}
 8003f84:	b015      	add	sp, #84	; 0x54
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (attrcount > 0) {
 8003f8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	dd4f      	ble.n	8004030 <lfs_dir_traverse+0x190>
            tag = attrs[0].tag;
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	9311      	str	r3, [sp, #68]	; 0x44
            attrcount -= 1;
 8003f94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
            buffer = attrs[0].buffer;
 8003f96:	6874      	ldr	r4, [r6, #4]
            attrcount -= 1;
 8003f98:	3b01      	subs	r3, #1
            attrs += 1;
 8003f9a:	3608      	adds	r6, #8
            attrcount -= 1;
 8003f9c:	931f      	str	r3, [sp, #124]	; 0x7c
 8003f9e:	e7c0      	b.n	8003f22 <lfs_dir_traverse+0x82>
            int filter = lfs_dir_traverse(lfs,
 8003fa0:	aa11      	add	r2, sp, #68	; 0x44
 8003fa2:	9208      	str	r2, [sp, #32]
 8003fa4:	9306      	str	r3, [sp, #24]
 8003fa6:	4a24      	ldr	r2, [pc, #144]	; (8004038 <lfs_dir_traverse+0x198>)
 8003fa8:	9305      	str	r3, [sp, #20]
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	9303      	str	r3, [sp, #12]
 8003fae:	9302      	str	r3, [sp, #8]
 8003fb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003fb2:	9207      	str	r2, [sp, #28]
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	9600      	str	r6, [sp, #0]
 8003fb8:	462b      	mov	r3, r5
 8003fba:	4652      	mov	r2, sl
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	f7ff ff6e 	bl	8003ea0 <lfs_dir_traverse>
            if (filter < 0) {
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	dbdd      	blt.n	8003f84 <lfs_dir_traverse+0xe4>
            if (filter) {
 8003fc8:	d185      	bne.n	8003ed6 <lfs_dir_traverse+0x36>
    return (tag & 0x000ffc00) >> 10;
 8003fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    return (tag & 0x000ffc00) >> 10;
 8003fce:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f63f af7f 	bhi.w	8003ed6 <lfs_dir_traverse+0x36>
 8003fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	f67f af7b 	bls.w	8003ed6 <lfs_dir_traverse+0x36>
 8003fe0:	e7a8      	b.n	8003f34 <lfs_dir_traverse+0x94>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8003fe2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8003fe6:	d11c      	bne.n	8004022 <lfs_dir_traverse+0x182>
 8003fe8:	2300      	movs	r3, #0
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003fea:	9911      	ldr	r1, [sp, #68]	; 0x44
    return tag & 0x000003ff;
 8003fec:	f3c1 0209 	ubfx	r2, r1, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	f4bf af70 	bcs.w	8003ed6 <lfs_dir_traverse+0x36>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8003ff6:	68a2      	ldr	r2, [r4, #8]
 8003ff8:	7820      	ldrb	r0, [r4, #0]
 8003ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ffc:	f3c1 2189 	ubfx	r1, r1, #10, #10
 8004000:	4459      	add	r1, fp
 8004002:	ea42 2181 	orr.w	r1, r2, r1, lsl #10
 8004006:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800400a:	6862      	ldr	r2, [r4, #4]
 800400c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800400e:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8004012:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004014:	4798      	blx	r3
 8004016:	340c      	adds	r4, #12
                if (err) {
 8004018:	2800      	cmp	r0, #0
 800401a:	d1b3      	bne.n	8003f84 <lfs_dir_traverse+0xe4>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800401c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800401e:	3301      	adds	r3, #1
 8004020:	e7e3      	b.n	8003fea <lfs_dir_traverse+0x14a>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8004022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004024:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004026:	4419      	add	r1, r3
 8004028:	4622      	mov	r2, r4
 800402a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800402c:	4798      	blx	r3
 800402e:	e7a7      	b.n	8003f80 <lfs_dir_traverse+0xe0>
            return 0;
 8004030:	2000      	movs	r0, #0
 8004032:	e7a7      	b.n	8003f84 <lfs_dir_traverse+0xe4>
 8004034:	600ffc00 	.word	0x600ffc00
 8004038:	08003761 	.word	0x08003761
 800403c:	7ff00000 	.word	0x7ff00000

08004040 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8004040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004044:	b089      	sub	sp, #36	; 0x24
 8004046:	4607      	mov	r7, r0
 8004048:	469a      	mov	sl, r3
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800404a:	303c      	adds	r0, #60	; 0x3c
    lfs_tag_t ntag = dir->etag;
 800404c:	690b      	ldr	r3, [r1, #16]
 800404e:	9307      	str	r3, [sp, #28]
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8004050:	4691      	mov	r9, r2
 8004052:	4688      	mov	r8, r1
    lfs_off_t off = dir->off;
 8004054:	68ce      	ldr	r6, [r1, #12]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004056:	f7ff fb58 	bl	800370a <lfs_gstate_hasmovehere>
 800405a:	ea4f 2399 	mov.w	r3, r9, lsr #10
 800405e:	2800      	cmp	r0, #0
 8004060:	f000 8081 	beq.w	8004166 <lfs_dir_getslice+0x126>
 8004064:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004068:	b14c      	cbz	r4, 800407e <lfs_dir_getslice+0x3e>
    return (tag & 0x000ffc00) >> 10;
 800406a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
        gdiff -= LFS_MKTAG(0, 1, 0);
 800406c:	4a3f      	ldr	r2, [pc, #252]	; (800416c <lfs_dir_getslice+0x12c>)
            lfs_tag_id(gmask) != 0 &&
 800406e:	f3c4 2489 	ubfx	r4, r4, #10, #10
 8004072:	f3ca 2089 	ubfx	r0, sl, #10, #10
        gdiff -= LFS_MKTAG(0, 1, 0);
 8004076:	4284      	cmp	r4, r0
 8004078:	bf94      	ite	ls
 800407a:	4614      	movls	r4, r2
 800407c:	2400      	movhi	r4, #0
    return (tag & 0x000ffc00) >> 10;
 800407e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004082:	9305      	str	r3, [sp, #20]
 8004084:	f107 0b68 	add.w	fp, r7, #104	; 0x68
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004088:	9d07      	ldr	r5, [sp, #28]
 800408a:	4628      	mov	r0, r5
 800408c:	f7ff fb1b 	bl	80036c6 <lfs_tag_dsize>
 8004090:	1d03      	adds	r3, r0, #4
 8004092:	429e      	cmp	r6, r3
 8004094:	d332      	bcc.n	80040fc <lfs_dir_getslice+0xbc>
        int err = lfs_bd_read(lfs,
 8004096:	aa07      	add	r2, sp, #28
        off -= lfs_tag_dsize(ntag);
 8004098:	1a36      	subs	r6, r6, r0
        int err = lfs_bd_read(lfs,
 800409a:	2304      	movs	r3, #4
 800409c:	9202      	str	r2, [sp, #8]
 800409e:	f8d8 2000 	ldr.w	r2, [r8]
 80040a2:	9200      	str	r2, [sp, #0]
 80040a4:	9303      	str	r3, [sp, #12]
 80040a6:	9601      	str	r6, [sp, #4]
 80040a8:	463a      	mov	r2, r7
 80040aa:	2100      	movs	r1, #0
 80040ac:	4658      	mov	r0, fp
 80040ae:	f7ff fbbd 	bl	800382c <lfs_bd_read.isra.14>
        if (err) {
 80040b2:	bb28      	cbnz	r0, 8004100 <lfs_dir_getslice+0xc0>
 80040b4:	9b07      	ldr	r3, [sp, #28]
 80040b6:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80040b8:	406b      	eors	r3, r5
 80040ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040be:	9307      	str	r3, [sp, #28]
        if (lfs_tag_id(gmask) != 0 &&
 80040c0:	9b05      	ldr	r3, [sp, #20]
 80040c2:	b31b      	cbz	r3, 800410c <lfs_dir_getslice+0xcc>
    return (tag & 0x70000000) >> 20;
 80040c4:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
 80040c6:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d11d      	bne.n	800410c <lfs_dir_getslice+0xcc>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80040d0:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80040d4:	f3c3 2089 	ubfx	r0, r3, #10, #10
 80040d8:	f3c5 2189 	ubfx	r1, r5, #10, #10
 80040dc:	4288      	cmp	r0, r1
 80040de:	d315      	bcc.n	800410c <lfs_dir_getslice+0xcc>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80040e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80040e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040e8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ec:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80040f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f8:	429d      	cmp	r5, r3
 80040fa:	d104      	bne.n	8004106 <lfs_dir_getslice+0xc6>
                return LFS_ERR_NOENT;
 80040fc:	f06f 0001 	mvn.w	r0, #1
}
 8004100:	b009      	add	sp, #36	; 0x24
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004106:	b252      	sxtb	r2, r2
 8004108:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800410c:	ebaa 0104 	sub.w	r1, sl, r4
 8004110:	4069      	eors	r1, r5
 8004112:	ea11 0109 	ands.w	r1, r1, r9
 8004116:	d1b7      	bne.n	8004088 <lfs_dir_getslice+0x48>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8004118:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
 800411c:	3301      	adds	r3, #1
 800411e:	d0ed      	beq.n	80040fc <lfs_dir_getslice+0xbc>
    return (a < b) ? a : b;
 8004120:	9b14      	ldr	r3, [sp, #80]	; 0x50
    return tag & 0x000003ff;
 8004122:	f3c5 0909 	ubfx	r9, r5, #0, #10
 8004126:	4599      	cmp	r9, r3
 8004128:	bf28      	it	cs
 800412a:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
 800412c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004132:	f8cd 900c 	str.w	r9, [sp, #12]
 8004136:	3304      	adds	r3, #4
 8004138:	441e      	add	r6, r3
 800413a:	f8d8 3000 	ldr.w	r3, [r8]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	9601      	str	r6, [sp, #4]
 8004142:	464b      	mov	r3, r9
 8004144:	463a      	mov	r2, r7
 8004146:	4658      	mov	r0, fp
 8004148:	f7ff fb70 	bl	800382c <lfs_bd_read.isra.14>
            if (err) {
 800414c:	2800      	cmp	r0, #0
 800414e:	d1d7      	bne.n	8004100 <lfs_dir_getslice+0xc0>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8004150:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004152:	eba3 0209 	sub.w	r2, r3, r9
 8004156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004158:	4601      	mov	r1, r0
 800415a:	eb03 0009 	add.w	r0, r3, r9
 800415e:	f002 fcd7 	bl	8006b10 <memset>
            return tag + gdiff;
 8004162:	1928      	adds	r0, r5, r4
 8004164:	e7cc      	b.n	8004100 <lfs_dir_getslice+0xc0>
    lfs_stag_t gdiff = 0;
 8004166:	4604      	mov	r4, r0
 8004168:	e789      	b.n	800407e <lfs_dir_getslice+0x3e>
 800416a:	bf00      	nop
 800416c:	fffffc00 	.word	0xfffffc00

08004170 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8004170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
 8004172:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 8004176:	9402      	str	r4, [sp, #8]
 8004178:	9c06      	ldr	r4, [sp, #24]
 800417a:	9401      	str	r4, [sp, #4]
 800417c:	2400      	movs	r4, #0
 800417e:	9400      	str	r4, [sp, #0]
 8004180:	f7ff ff5e 	bl	8004040 <lfs_dir_getslice>
}
 8004184:	b004      	add	sp, #16
 8004186:	bd10      	pop	{r4, pc}

08004188 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 8004188:	b530      	push	{r4, r5, lr}
 800418a:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800418c:	ac03      	add	r4, sp, #12
        lfs_gstate_t *gstate) {
 800418e:	4615      	mov	r5, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8004190:	9400      	str	r4, [sp, #0]
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <lfs_dir_getgstate+0x2c>)
 8004194:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <lfs_dir_getgstate+0x30>)
 8004196:	f7ff ffeb 	bl	8004170 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 800419a:	2800      	cmp	r0, #0
 800419c:	da04      	bge.n	80041a8 <lfs_dir_getgstate+0x20>
 800419e:	1c83      	adds	r3, r0, #2
 80041a0:	bf08      	it	eq
 80041a2:	2000      	moveq	r0, #0
}
 80041a4:	b007      	add	sp, #28
 80041a6:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
 80041a8:	4628      	mov	r0, r5
 80041aa:	4621      	mov	r1, r4
 80041ac:	f7ff fa95 	bl	80036da <lfs_gstate_xor>
    return 0;
 80041b0:	2000      	movs	r0, #0
 80041b2:	e7f7      	b.n	80041a4 <lfs_dir_getgstate+0x1c>
 80041b4:	7ff0000c 	.word	0x7ff0000c
 80041b8:	7ff00000 	.word	0x7ff00000

080041bc <lfs_dir_find>:
        const char **path, uint16_t *id) {
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	b08d      	sub	sp, #52	; 0x34
 80041c2:	4680      	mov	r8, r0
 80041c4:	460e      	mov	r6, r1
 80041c6:	9206      	str	r2, [sp, #24]
    const char *name = *path;
 80041c8:	6814      	ldr	r4, [r2, #0]
    if (id) {
 80041ca:	9305      	str	r3, [sp, #20]
 80041cc:	b11b      	cbz	r3, 80041d6 <lfs_dir_find+0x1a>
        *id = 0x3ff;
 80041ce:	9a05      	ldr	r2, [sp, #20]
 80041d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80041d4:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 80041d6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80041da:	61b3      	str	r3, [r6, #24]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80041dc:	f8df b130 	ldr.w	fp, [pc, #304]	; 8004310 <lfs_dir_find+0x154>
    dir->tail[1] = lfs->root[1];
 80041e0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80041e4:	61f3      	str	r3, [r6, #28]
        name += strspn(name, "/");
 80041e6:	4945      	ldr	r1, [pc, #276]	; (80042fc <lfs_dir_find+0x140>)
 80041e8:	4620      	mov	r0, r4
 80041ea:	f002 fd8d 	bl	8006d08 <strspn>
 80041ee:	1825      	adds	r5, r4, r0
 80041f0:	4682      	mov	sl, r0
        lfs_size_t namelen = strcspn(name, "/");
 80041f2:	4942      	ldr	r1, [pc, #264]	; (80042fc <lfs_dir_find+0x140>)
 80041f4:	4628      	mov	r0, r5
 80041f6:	f002 fd75 	bl	8006ce4 <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80041fa:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
 80041fc:	4607      	mov	r7, r0
 80041fe:	eb05 0900 	add.w	r9, r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004202:	d105      	bne.n	8004210 <lfs_dir_find+0x54>
 8004204:	f814 200a 	ldrb.w	r2, [r4, sl]
 8004208:	2a2e      	cmp	r2, #46	; 0x2e
 800420a:	d10a      	bne.n	8004222 <lfs_dir_find+0x66>
            name += namelen;
 800420c:	464c      	mov	r4, r9
            goto nextname;
 800420e:	e7ea      	b.n	80041e6 <lfs_dir_find+0x2a>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004210:	2802      	cmp	r0, #2
 8004212:	d106      	bne.n	8004222 <lfs_dir_find+0x66>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8004214:	4602      	mov	r2, r0
 8004216:	493a      	ldr	r1, [pc, #232]	; (8004300 <lfs_dir_find+0x144>)
 8004218:	4628      	mov	r0, r5
 800421a:	f002 fc5f 	bl	8006adc <memcmp>
 800421e:	2800      	cmp	r0, #0
 8004220:	d0f4      	beq.n	800420c <lfs_dir_find+0x50>
        const char *suffix = name + namelen;
 8004222:	464c      	mov	r4, r9
        int depth = 1;
 8004224:	f04f 0a01 	mov.w	sl, #1
            suffix += strspn(suffix, "/");
 8004228:	4934      	ldr	r1, [pc, #208]	; (80042fc <lfs_dir_find+0x140>)
 800422a:	4648      	mov	r0, r9
 800422c:	f002 fd6c 	bl	8006d08 <strspn>
 8004230:	4481      	add	r9, r0
            sufflen = strcspn(suffix, "/");
 8004232:	4932      	ldr	r1, [pc, #200]	; (80042fc <lfs_dir_find+0x140>)
 8004234:	4648      	mov	r0, r9
 8004236:	f002 fd55 	bl	8006ce4 <strcspn>
            if (sufflen == 0) {
 800423a:	4603      	mov	r3, r0
 800423c:	b198      	cbz	r0, 8004266 <lfs_dir_find+0xaa>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800423e:	2802      	cmp	r0, #2
 8004240:	d10d      	bne.n	800425e <lfs_dir_find+0xa2>
 8004242:	4602      	mov	r2, r0
 8004244:	9007      	str	r0, [sp, #28]
 8004246:	492e      	ldr	r1, [pc, #184]	; (8004300 <lfs_dir_find+0x144>)
 8004248:	4648      	mov	r0, r9
 800424a:	f002 fc47 	bl	8006adc <memcmp>
 800424e:	9b07      	ldr	r3, [sp, #28]
 8004250:	b928      	cbnz	r0, 800425e <lfs_dir_find+0xa2>
                if (depth == 0) {
 8004252:	f1ba 0a01 	subs.w	sl, sl, #1
 8004256:	d104      	bne.n	8004262 <lfs_dir_find+0xa6>
                    name = suffix + sufflen;
 8004258:	f109 0402 	add.w	r4, r9, #2
                    goto nextname;
 800425c:	e7c3      	b.n	80041e6 <lfs_dir_find+0x2a>
                depth += 1;
 800425e:	f10a 0a01 	add.w	sl, sl, #1
            suffix += sufflen;
 8004262:	4499      	add	r9, r3
            suffix += strspn(suffix, "/");
 8004264:	e7e0      	b.n	8004228 <lfs_dir_find+0x6c>
        if (name[0] == '\0') {
 8004266:	782a      	ldrb	r2, [r5, #0]
 8004268:	2a00      	cmp	r2, #0
 800426a:	d03f      	beq.n	80042ec <lfs_dir_find+0x130>
        *path = name;
 800426c:	9b06      	ldr	r3, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 800426e:	ea4f 521b 	mov.w	r2, fp, lsr #20
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004272:	2a02      	cmp	r2, #2
        *path = name;
 8004274:	601d      	str	r5, [r3, #0]
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004276:	d13d      	bne.n	80042f4 <lfs_dir_find+0x138>
    return (tag & 0x000ffc00) >> 10;
 8004278:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 800427c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004280:	4293      	cmp	r3, r2
 8004282:	f106 0918 	add.w	r9, r6, #24
 8004286:	d124      	bne.n	80042d2 <lfs_dir_find+0x116>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004288:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
 800428c:	212f      	movs	r1, #47	; 0x2f
 800428e:	4628      	mov	r0, r5
 8004290:	f002 fd1a 	bl	8006cc8 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004294:	2800      	cmp	r0, #0
 8004296:	9b05      	ldr	r3, [sp, #20]
 8004298:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <lfs_dir_find+0x148>)
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	bf18      	it	ne
 800429e:	2300      	movne	r3, #0
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	f8cd a00c 	str.w	sl, [sp, #12]
 80042a6:	9700      	str	r7, [sp, #0]
 80042a8:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80042ac:	464a      	mov	r2, r9
 80042ae:	4631      	mov	r1, r6
 80042b0:	4640      	mov	r0, r8
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80042b2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80042b6:	950a      	str	r5, [sp, #40]	; 0x28
 80042b8:	970b      	str	r7, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80042ba:	f7ff fb85 	bl	80039c8 <lfs_dir_fetchmatch>
            if (tag < 0) {
 80042be:	f1b0 0b00 	subs.w	fp, r0, #0
 80042c2:	db13      	blt.n	80042ec <lfs_dir_find+0x130>
            if (tag) {
 80042c4:	d18f      	bne.n	80041e6 <lfs_dir_find+0x2a>
            if (!dir->split) {
 80042c6:	7df3      	ldrb	r3, [r6, #23]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1df      	bne.n	800428c <lfs_dir_find+0xd0>
                return LFS_ERR_NOENT;
 80042cc:	f06f 0b01 	mvn.w	fp, #1
 80042d0:	e00c      	b.n	80042ec <lfs_dir_find+0x130>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80042d2:	4a0d      	ldr	r2, [pc, #52]	; (8004308 <lfs_dir_find+0x14c>)
 80042d4:	f8cd 9000 	str.w	r9, [sp]
 80042d8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 80042dc:	4631      	mov	r1, r6
 80042de:	4a0b      	ldr	r2, [pc, #44]	; (800430c <lfs_dir_find+0x150>)
 80042e0:	4640      	mov	r0, r8
 80042e2:	f7ff ff45 	bl	8004170 <lfs_dir_get>
            if (res < 0) {
 80042e6:	f1b0 0b00 	subs.w	fp, r0, #0
 80042ea:	dacd      	bge.n	8004288 <lfs_dir_find+0xcc>
}
 80042ec:	4658      	mov	r0, fp
 80042ee:	b00d      	add	sp, #52	; 0x34
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
 80042f4:	f06f 0b13 	mvn.w	fp, #19
 80042f8:	e7f8      	b.n	80042ec <lfs_dir_find+0x130>
 80042fa:	bf00      	nop
 80042fc:	08007f70 	.word	0x08007f70
 8004300:	08007a09 	.word	0x08007a09
 8004304:	08004a17 	.word	0x08004a17
 8004308:	20000008 	.word	0x20000008
 800430c:	700ffc00 	.word	0x700ffc00
 8004310:	002ffc00 	.word	0x002ffc00

08004314 <lfs_cache_zero.isra.15>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8004314:	b510      	push	{r4, lr}
 8004316:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8004318:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800431a:	68e0      	ldr	r0, [r4, #12]
 800431c:	21ff      	movs	r1, #255	; 0xff
 800431e:	f002 fbf7 	bl	8006b10 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	bd10      	pop	{r4, pc}

0800432a <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800432a:	b538      	push	{r3, r4, r5, lr}
 800432c:	4604      	mov	r4, r0
    if (lfs->cfg->read_buffer) {
 800432e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    lfs->cfg = cfg;
 8004330:	66a1      	str	r1, [r4, #104]	; 0x68
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8004332:	460d      	mov	r5, r1
    if (lfs->cfg->read_buffer) {
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02f      	beq.n	8004398 <lfs_init+0x6e>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8004338:	60c3      	str	r3, [r0, #12]
    if (lfs->cfg->prog_buffer) {
 800433a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800433c:	2b00      	cmp	r3, #0
 800433e:	d037      	beq.n	80043b0 <lfs_init+0x86>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8004340:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 8004342:	4628      	mov	r0, r5
 8004344:	4621      	mov	r1, r4
 8004346:	f7ff ffe5 	bl	8004314 <lfs_cache_zero.isra.15>
    lfs_cache_zero(lfs, &lfs->pcache);
 800434a:	f104 0110 	add.w	r1, r4, #16
 800434e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004350:	f7ff ffe0 	bl	8004314 <lfs_cache_zero.isra.15>
    if (lfs->cfg->lookahead_buffer) {
 8004354:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8004356:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d030      	beq.n	80043be <lfs_init+0x94>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800435c:	6663      	str	r3, [r4, #100]	; 0x64
    lfs->name_max = lfs->cfg->name_max;
 800435e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    if (!lfs->name_max) {
 8004360:	2b00      	cmp	r3, #0
 8004362:	d033      	beq.n	80043cc <lfs_init+0xa2>
        lfs->name_max = LFS_NAME_MAX;
 8004364:	66e3      	str	r3, [r4, #108]	; 0x6c
    lfs->file_max = lfs->cfg->file_max;
 8004366:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (!lfs->file_max) {
 8004368:	2b00      	cmp	r3, #0
 800436a:	d031      	beq.n	80043d0 <lfs_init+0xa6>
        lfs->file_max = LFS_FILE_MAX;
 800436c:	6723      	str	r3, [r4, #112]	; 0x70
    lfs->attr_max = lfs->cfg->attr_max;
 800436e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    if (!lfs->attr_max) {
 8004370:	2b00      	cmp	r3, #0
 8004372:	d030      	beq.n	80043d6 <lfs_init+0xac>
    lfs->mlist = NULL;
 8004374:	2000      	movs	r0, #0
        lfs->attr_max = LFS_ATTR_MAX;
 8004376:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = LFS_BLOCK_NULL;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800437e:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
 8004380:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
 8004382:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8004384:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004386:	6420      	str	r0, [r4, #64]	; 0x40
 8004388:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
 800438a:	6320      	str	r0, [r4, #48]	; 0x30
 800438c:	6360      	str	r0, [r4, #52]	; 0x34
 800438e:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 8004390:	64a0      	str	r0, [r4, #72]	; 0x48
 8004392:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004394:	6520      	str	r0, [r4, #80]	; 0x50
    return 0;
 8004396:	bd38      	pop	{r3, r4, r5, pc}
    return malloc(size);
 8004398:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800439a:	f002 fb8f 	bl	8006abc <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800439e:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d1ca      	bne.n	800433a <lfs_init+0x10>
    lfs_deinit(lfs);
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff fa1e 	bl	80037e6 <lfs_deinit>
    return err;
 80043aa:	f06f 000b 	mvn.w	r0, #11
}
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80043b2:	f002 fb83 	bl	8006abc <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80043b6:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d1c2      	bne.n	8004342 <lfs_init+0x18>
 80043bc:	e7f2      	b.n	80043a4 <lfs_init+0x7a>
 80043be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80043c0:	f002 fb7c 	bl	8006abc <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80043c4:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d1c9      	bne.n	800435e <lfs_init+0x34>
 80043ca:	e7eb      	b.n	80043a4 <lfs_init+0x7a>
        lfs->name_max = LFS_NAME_MAX;
 80043cc:	23ff      	movs	r3, #255	; 0xff
 80043ce:	e7c9      	b.n	8004364 <lfs_init+0x3a>
        lfs->file_max = LFS_FILE_MAX;
 80043d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80043d4:	e7ca      	b.n	800436c <lfs_init+0x42>
        lfs->attr_max = LFS_ATTR_MAX;
 80043d6:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80043da:	e7cb      	b.n	8004374 <lfs_init+0x4a>

080043dc <lfs_ctz_index.isra.17>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80043de:	69c5      	ldr	r5, [r0, #28]
    lfs_off_t size = *off;
 80043e0:	680e      	ldr	r6, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80043e2:	3d08      	subs	r5, #8
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80043e4:	460f      	mov	r7, r1
    lfs_off_t i = size / b;
 80043e6:	fbb6 f0f5 	udiv	r0, r6, r5
    if (i == 0) {
 80043ea:	b180      	cbz	r0, 800440e <lfs_ctz_index.isra.17+0x32>
    return __builtin_popcount(a);
 80043ec:	3801      	subs	r0, #1
 80043ee:	f7fc fc21 	bl	8000c34 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80043f2:	1c84      	adds	r4, r0, #2
 80043f4:	eba6 0484 	sub.w	r4, r6, r4, lsl #2
 80043f8:	fbb4 f4f5 	udiv	r4, r4, r5
 80043fc:	4620      	mov	r0, r4
 80043fe:	f7fc fc19 	bl	8000c34 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
 8004402:	fb04 6515 	mls	r5, r4, r5, r6
 8004406:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 800440a:	603d      	str	r5, [r7, #0]
    return i;
 800440c:	4620      	mov	r0, r4
}
 800440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004410 <lfs_ctz_traverse.part.18>:
static int lfs_ctz_traverse(lfs_t *lfs,
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	b088      	sub	sp, #32
 8004416:	461e      	mov	r6, r3
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004418:	9b10      	ldr	r3, [sp, #64]	; 0x40
static int lfs_ctz_traverse(lfs_t *lfs,
 800441a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800441e:	4689      	mov	r9, r1
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004420:	4607      	mov	r7, r0
 8004422:	a908      	add	r1, sp, #32
 8004424:	3b01      	subs	r3, #1
 8004426:	f841 3d0c 	str.w	r3, [r1, #-12]!
 800442a:	f857 0f68 	ldr.w	r0, [r7, #104]!
static int lfs_ctz_traverse(lfs_t *lfs,
 800442e:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004430:	f7ff ffd4 	bl	80043dc <lfs_ctz_index.isra.17>
 8004434:	4605      	mov	r5, r0
        int err = cb(data, head);
 8004436:	4631      	mov	r1, r6
 8004438:	9812      	ldr	r0, [sp, #72]	; 0x48
 800443a:	47c0      	blx	r8
        if (err) {
 800443c:	b980      	cbnz	r0, 8004460 <lfs_ctz_traverse.part.18+0x50>
        if (index == 0) {
 800443e:	b17d      	cbz	r5, 8004460 <lfs_ctz_traverse.part.18+0x50>
        int count = 2 - (index & 1);
 8004440:	f005 0401 	and.w	r4, r5, #1
 8004444:	f1c4 0402 	rsb	r4, r4, #2
        err = lfs_bd_read(lfs,
 8004448:	aa06      	add	r2, sp, #24
                pcache, rcache, count*sizeof(head),
 800444a:	00a3      	lsls	r3, r4, #2
        err = lfs_bd_read(lfs,
 800444c:	9202      	str	r2, [sp, #8]
 800444e:	9001      	str	r0, [sp, #4]
 8004450:	9303      	str	r3, [sp, #12]
 8004452:	9600      	str	r6, [sp, #0]
 8004454:	4652      	mov	r2, sl
 8004456:	4649      	mov	r1, r9
 8004458:	4638      	mov	r0, r7
 800445a:	f7ff f9e7 	bl	800382c <lfs_bd_read.isra.14>
        if (err) {
 800445e:	b188      	cbz	r0, 8004484 <lfs_ctz_traverse.part.18+0x74>
}
 8004460:	b008      	add	sp, #32
 8004462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            err = cb(data, heads[i]);
 8004466:	9906      	ldr	r1, [sp, #24]
 8004468:	9812      	ldr	r0, [sp, #72]	; 0x48
 800446a:	47c0      	blx	r8
        for (int i = 0; i < count-1; i++) {
 800446c:	2301      	movs	r3, #1
            if (err) {
 800446e:	2800      	cmp	r0, #0
 8004470:	d1f6      	bne.n	8004460 <lfs_ctz_traverse.part.18+0x50>
        for (int i = 0; i < count-1; i++) {
 8004472:	42b3      	cmp	r3, r6
 8004474:	dbf7      	blt.n	8004466 <lfs_ctz_traverse.part.18+0x56>
        head = heads[count-1];
 8004476:	ab08      	add	r3, sp, #32
 8004478:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        index -= count;
 800447c:	1b2d      	subs	r5, r5, r4
        head = heads[count-1];
 800447e:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8004482:	e7d8      	b.n	8004436 <lfs_ctz_traverse.part.18+0x26>
        if (err) {
 8004484:	4603      	mov	r3, r0
        for (int i = 0; i < count-1; i++) {
 8004486:	1e66      	subs	r6, r4, #1
 8004488:	e7f3      	b.n	8004472 <lfs_ctz_traverse.part.18+0x62>

0800448a <lfs_ctz_find.constprop.24>:
static int lfs_ctz_find(lfs_t *lfs,
 800448a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	4605      	mov	r5, r0
 8004492:	4689      	mov	r9, r1
 8004494:	9205      	str	r2, [sp, #20]
 8004496:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    if (size == 0) {
 8004498:	b943      	cbnz	r3, 80044ac <lfs_ctz_find.constprop.24+0x22>
        *block = LFS_BLOCK_NULL;
 800449a:	f04f 32ff 	mov.w	r2, #4294967295
 800449e:	603a      	str	r2, [r7, #0]
    *off = pos;
 80044a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    return 0;
 80044a2:	2000      	movs	r0, #0
    *off = pos;
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	b009      	add	sp, #36	; 0x24
 80044a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80044ac:	a908      	add	r1, sp, #32
 80044ae:	3b01      	subs	r3, #1
 80044b0:	f841 3d04 	str.w	r3, [r1, #-4]!
 80044b4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80044b6:	f7ff ff91 	bl	80043dc <lfs_ctz_index.isra.17>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80044ba:	a912      	add	r1, sp, #72	; 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80044bc:	4606      	mov	r6, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80044be:	f855 0f68 	ldr.w	r0, [r5, #104]!
 80044c2:	f7ff ff8b 	bl	80043dc <lfs_ctz_index.isra.17>
        int err = lfs_bd_read(lfs,
 80044c6:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80044ca:	4680      	mov	r8, r0
        int err = lfs_bd_read(lfs,
 80044cc:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
 80044d0:	45b0      	cmp	r8, r6
 80044d2:	9905      	ldr	r1, [sp, #20]
 80044d4:	d302      	bcc.n	80044dc <lfs_ctz_find.constprop.24+0x52>
    *block = head;
 80044d6:	6039      	str	r1, [r7, #0]
    *off = pos;
 80044d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044da:	e7e1      	b.n	80044a0 <lfs_ctz_find.constprop.24+0x16>
                lfs_npw2(current-target+1) - 1,
 80044dc:	eba6 0408 	sub.w	r4, r6, r8
    return 32 - __builtin_clz(a-1);
 80044e0:	fab4 f384 	clz	r3, r4
    return __builtin_ctz(a);
 80044e4:	fa96 f4a6 	rbit	r4, r6
 80044e8:	fab4 f284 	clz	r2, r4
        lfs_size_t skip = lfs_min(
 80044ec:	f1c3 041f 	rsb	r4, r3, #31
    return (a < b) ? a : b;
 80044f0:	4294      	cmp	r4, r2
 80044f2:	bf28      	it	cs
 80044f4:	4614      	movcs	r4, r2
        int err = lfs_bd_read(lfs,
 80044f6:	00a3      	lsls	r3, r4, #2
 80044f8:	e88d 000a 	stmia.w	sp, {r1, r3}
 80044fc:	f8cd a00c 	str.w	sl, [sp, #12]
 8004500:	f8cd b008 	str.w	fp, [sp, #8]
 8004504:	2304      	movs	r3, #4
 8004506:	464a      	mov	r2, r9
 8004508:	2100      	movs	r1, #0
 800450a:	4628      	mov	r0, r5
 800450c:	f7ff f98e 	bl	800382c <lfs_bd_read.isra.14>
        if (err) {
 8004510:	2800      	cmp	r0, #0
 8004512:	d1c8      	bne.n	80044a6 <lfs_ctz_find.constprop.24+0x1c>
        current -= 1 << skip;
 8004514:	2301      	movs	r3, #1
 8004516:	fa03 f404 	lsl.w	r4, r3, r4
 800451a:	1b36      	subs	r6, r6, r4
 800451c:	e7d8      	b.n	80044d0 <lfs_ctz_find.constprop.24+0x46>
	...

08004520 <lfs_dir_getread.constprop.25>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	b087      	sub	sp, #28
 8004526:	4615      	mov	r5, r2
    if (off+size > lfs->cfg->block_size) {
 8004528:	6e82      	ldr	r2, [r0, #104]	; 0x68
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 800452a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800452c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
 800452e:	69d2      	ldr	r2, [r2, #28]
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 8004530:	468a      	mov	sl, r1
    if (off+size > lfs->cfg->block_size) {
 8004532:	19a1      	adds	r1, r4, r6
 8004534:	4291      	cmp	r1, r2
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 8004536:	4680      	mov	r8, r0
    if (off+size > lfs->cfg->block_size) {
 8004538:	d84b      	bhi.n	80045d2 <lfs_dir_getread.constprop.25+0xb2>
 800453a:	9f12      	ldr	r7, [sp, #72]	; 0x48
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800453c:	f8df b098 	ldr.w	fp, [pc, #152]	; 80045d8 <lfs_dir_getread.constprop.25+0xb8>
    return lfs_aligndown(a + alignment-1, alignment);
 8004540:	f103 39ff 	add.w	r9, r3, #4294967295
    while (size > 0) {
 8004544:	b90e      	cbnz	r6, 800454a <lfs_dir_getread.constprop.25+0x2a>
    return 0;
 8004546:	4630      	mov	r0, r6
 8004548:	e040      	b.n	80045cc <lfs_dir_getread.constprop.25+0xac>
        if (rcache->block == LFS_BLOCK_INLINE &&
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	68e8      	ldr	r0, [r5, #12]
 800454e:	3302      	adds	r3, #2
 8004550:	d116      	bne.n	8004580 <lfs_dir_getread.constprop.25+0x60>
                off < rcache->off + rcache->size) {
 8004552:	6869      	ldr	r1, [r5, #4]
 8004554:	68ab      	ldr	r3, [r5, #8]
 8004556:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 8004558:	429c      	cmp	r4, r3
 800455a:	d211      	bcs.n	8004580 <lfs_dir_getread.constprop.25+0x60>
            if (off >= rcache->off) {
 800455c:	428c      	cmp	r4, r1
 800455e:	d30f      	bcc.n	8004580 <lfs_dir_getread.constprop.25+0x60>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004560:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 8004562:	42b3      	cmp	r3, r6
 8004564:	bf28      	it	cs
 8004566:	4633      	movcs	r3, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8004568:	1a61      	subs	r1, r4, r1
 800456a:	461a      	mov	r2, r3
 800456c:	4401      	add	r1, r0
 800456e:	4638      	mov	r0, r7
 8004570:	9305      	str	r3, [sp, #20]
 8004572:	f002 fac2 	bl	8006afa <memcpy>
                data += diff;
 8004576:	9b05      	ldr	r3, [sp, #20]
 8004578:	441f      	add	r7, r3
                off += diff;
 800457a:	441c      	add	r4, r3
                size -= diff;
 800457c:	1af6      	subs	r6, r6, r3
 800457e:	e7e1      	b.n	8004544 <lfs_dir_getread.constprop.25+0x24>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004580:	f8d8 e068 	ldr.w	lr, [r8, #104]	; 0x68
 8004584:	f8de 1014 	ldr.w	r1, [lr, #20]
    return a - (a % alignment);
 8004588:	fbb4 f2f1 	udiv	r2, r4, r1
        rcache->block = LFS_BLOCK_INLINE;
 800458c:	f06f 0301 	mvn.w	r3, #1
 8004590:	602b      	str	r3, [r5, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8004592:	eb09 0301 	add.w	r3, r9, r1
 8004596:	4423      	add	r3, r4
    return a - (a % alignment);
 8004598:	fb01 4212 	mls	r2, r1, r2, r4
 800459c:	fbb3 fcf1 	udiv	ip, r3, r1
 80045a0:	fb01 311c 	mls	r1, r1, ip, r3
 80045a4:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 80045a6:	f8de 1028 	ldr.w	r1, [lr, #40]	; 0x28
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80045aa:	9001      	str	r0, [sp, #4]
 80045ac:	428b      	cmp	r3, r1
 80045ae:	bf28      	it	cs
 80045b0:	460b      	movcs	r3, r1
    return a - (a % alignment);
 80045b2:	1aa2      	subs	r2, r4, r2
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80045b4:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80045b6:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80045b8:	9302      	str	r3, [sp, #8]
 80045ba:	9200      	str	r2, [sp, #0]
 80045bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045be:	465a      	mov	r2, fp
 80045c0:	4651      	mov	r1, sl
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fd3c 	bl	8004040 <lfs_dir_getslice>
        if (err < 0) {
 80045c8:	2800      	cmp	r0, #0
 80045ca:	dabb      	bge.n	8004544 <lfs_dir_getread.constprop.25+0x24>
}
 80045cc:	b007      	add	sp, #28
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 80045d2:	f06f 0053 	mvn.w	r0, #83	; 0x53
 80045d6:	e7f9      	b.n	80045cc <lfs_dir_getread.constprop.25+0xac>
 80045d8:	fff7fc00 	.word	0xfff7fc00

080045dc <lfs_bd_cmp.constprop.27>:
static int lfs_bd_cmp(lfs_t *lfs,
 80045dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e0:	b087      	sub	sp, #28
 80045e2:	4699      	mov	r9, r3
 80045e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80045e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045e8:	460e      	mov	r6, r1
 80045ea:	4690      	mov	r8, r2
 80045ec:	18ef      	adds	r7, r5, r3
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 80045ee:	462c      	mov	r4, r5
        int err = lfs_bd_read(lfs,
 80045f0:	f100 0a68 	add.w	sl, r0, #104	; 0x68
 80045f4:	f10d 0b17 	add.w	fp, sp, #23
    for (lfs_off_t i = 0; i < size; i++) {
 80045f8:	42bc      	cmp	r4, r7
 80045fa:	d101      	bne.n	8004600 <lfs_bd_cmp.constprop.27+0x24>
    return LFS_CMP_EQ;
 80045fc:	2000      	movs	r0, #0
 80045fe:	e01b      	b.n	8004638 <lfs_bd_cmp.constprop.27+0x5c>
        int err = lfs_bd_read(lfs,
 8004600:	2201      	movs	r2, #1
 8004602:	9203      	str	r2, [sp, #12]
 8004604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004606:	f8cd b008 	str.w	fp, [sp, #8]
 800460a:	1b52      	subs	r2, r2, r5
 800460c:	4422      	add	r2, r4
 800460e:	eba8 0304 	sub.w	r3, r8, r4
 8004612:	9201      	str	r2, [sp, #4]
 8004614:	f8cd 9000 	str.w	r9, [sp]
 8004618:	442b      	add	r3, r5
 800461a:	4632      	mov	r2, r6
 800461c:	2100      	movs	r1, #0
 800461e:	4650      	mov	r0, sl
 8004620:	f7ff f904 	bl	800382c <lfs_bd_read.isra.14>
        if (err) {
 8004624:	b940      	cbnz	r0, 8004638 <lfs_bd_cmp.constprop.27+0x5c>
        if (dat != data[i]) {
 8004626:	f814 2b01 	ldrb.w	r2, [r4], #1
 800462a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800462e:	429a      	cmp	r2, r3
 8004630:	d0e2      	beq.n	80045f8 <lfs_bd_cmp.constprop.27+0x1c>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 8004632:	bf94      	ite	ls
 8004634:	2002      	movls	r0, #2
 8004636:	2001      	movhi	r0, #1
}
 8004638:	b007      	add	sp, #28
 800463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800463e <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800463e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004642:	460d      	mov	r5, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004644:	6809      	ldr	r1, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004646:	4698      	mov	r8, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004648:	1c8b      	adds	r3, r1, #2
 800464a:	2b01      	cmp	r3, #1
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800464c:	b085      	sub	sp, #20
 800464e:	4606      	mov	r6, r0
 8004650:	4617      	mov	r7, r2
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004652:	d930      	bls.n	80046b6 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8004654:	6e80      	ldr	r0, [r0, #104]	; 0x68
    return lfs_aligndown(a + alignment-1, alignment);
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	6982      	ldr	r2, [r0, #24]
 800465a:	4414      	add	r4, r2
 800465c:	3c01      	subs	r4, #1
    return a - (a % alignment);
 800465e:	fbb4 f3f2 	udiv	r3, r4, r2
 8004662:	fb02 4313 	mls	r3, r2, r3, r4
 8004666:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8004668:	9400      	str	r4, [sp, #0]
 800466a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800466e:	68eb      	ldr	r3, [r5, #12]
 8004670:	686a      	ldr	r2, [r5, #4]
 8004672:	47c8      	blx	r9
        if (err) {
 8004674:	4681      	mov	r9, r0
 8004676:	b930      	cbnz	r0, 8004686 <lfs_bd_flush+0x48>
        if (validate) {
 8004678:	f1b8 0f00 	cmp.w	r8, #0
 800467c:	d107      	bne.n	800468e <lfs_bd_flush+0x50>
        lfs_cache_zero(lfs, pcache);
 800467e:	4629      	mov	r1, r5
 8004680:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004682:	f7ff fe47 	bl	8004314 <lfs_cache_zero.isra.15>
}
 8004686:	4648      	mov	r0, r9
 8004688:	b005      	add	sp, #20
 800468a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rcache->block = LFS_BLOCK_NULL;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	603b      	str	r3, [r7, #0]
            int res = lfs_bd_cmp(lfs,
 8004694:	68eb      	ldr	r3, [r5, #12]
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	686b      	ldr	r3, [r5, #4]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	9402      	str	r4, [sp, #8]
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	4622      	mov	r2, r4
 80046a2:	4639      	mov	r1, r7
 80046a4:	4630      	mov	r0, r6
 80046a6:	f7ff ff99 	bl	80045dc <lfs_bd_cmp.constprop.27>
            if (res < 0) {
 80046aa:	2800      	cmp	r0, #0
 80046ac:	db06      	blt.n	80046bc <lfs_bd_flush+0x7e>
            if (res != LFS_CMP_EQ) {
 80046ae:	d0e6      	beq.n	800467e <lfs_bd_flush+0x40>
                return LFS_ERR_CORRUPT;
 80046b0:	f06f 0953 	mvn.w	r9, #83	; 0x53
 80046b4:	e7e7      	b.n	8004686 <lfs_bd_flush+0x48>
    return 0;
 80046b6:	f04f 0900 	mov.w	r9, #0
 80046ba:	e7e4      	b.n	8004686 <lfs_bd_flush+0x48>
 80046bc:	4681      	mov	r9, r0
 80046be:	e7e2      	b.n	8004686 <lfs_bd_flush+0x48>

080046c0 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 80046c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80046c6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    const uint8_t *data = buffer;
 80046c8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
        const void *buffer, lfs_size_t size) {
 80046ca:	4680      	mov	r8, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	4691      	mov	r9, r2
 80046d0:	469a      	mov	sl, r3
        pcache->size = 0;
 80046d2:	f04f 0b00 	mov.w	fp, #0
    while (size > 0) {
 80046d6:	b90e      	cbnz	r6, 80046dc <lfs_bd_prog+0x1c>
    return 0;
 80046d8:	4630      	mov	r0, r6
 80046da:	e030      	b.n	800473e <lfs_bd_prog+0x7e>
        if (block == pcache->block &&
 80046dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	4293      	cmp	r3, r2
 80046e2:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 80046e6:	d12d      	bne.n	8004744 <lfs_bd_prog+0x84>
                off >= pcache->off &&
 80046e8:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
 80046ea:	4285      	cmp	r5, r0
 80046ec:	d32a      	bcc.n	8004744 <lfs_bd_prog+0x84>
                off < pcache->off + lfs->cfg->cache_size) {
 80046ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80046f0:	4403      	add	r3, r0
                off >= pcache->off &&
 80046f2:	429d      	cmp	r5, r3
 80046f4:	d226      	bcs.n	8004744 <lfs_bd_prog+0x84>
            lfs_size_t diff = lfs_min(size,
 80046f6:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 80046f8:	42b3      	cmp	r3, r6
 80046fa:	bf28      	it	cs
 80046fc:	4633      	movcs	r3, r6
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80046fe:	461a      	mov	r2, r3
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	1a28      	subs	r0, r5, r0
 8004706:	4639      	mov	r1, r7
 8004708:	4418      	add	r0, r3
 800470a:	f002 f9f6 	bl	8006afa <memcpy>
            data += diff;
 800470e:	9b01      	ldr	r3, [sp, #4]
    return (a > b) ? a : b;
 8004710:	68a2      	ldr	r2, [r4, #8]
            off += diff;
 8004712:	441d      	add	r5, r3
            data += diff;
 8004714:	441f      	add	r7, r3
            size -= diff;
 8004716:	1af6      	subs	r6, r6, r3
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	1aeb      	subs	r3, r5, r3
 800471c:	4293      	cmp	r3, r2
 800471e:	bf38      	it	cc
 8004720:	4613      	movcc	r3, r2
            if (pcache->size == lfs->cfg->cache_size) {
 8004722:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8004726:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8004728:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800472a:	4293      	cmp	r3, r2
 800472c:	d1d3      	bne.n	80046d6 <lfs_bd_prog+0x16>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800472e:	4653      	mov	r3, sl
 8004730:	464a      	mov	r2, r9
 8004732:	4621      	mov	r1, r4
 8004734:	4640      	mov	r0, r8
 8004736:	f7ff ff82 	bl	800463e <lfs_bd_flush>
                if (err) {
 800473a:	2800      	cmp	r0, #0
 800473c:	d0cb      	beq.n	80046d6 <lfs_bd_prog+0x16>
}
 800473e:	b003      	add	sp, #12
 8004740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return a - (a % alignment);
 8004744:	6992      	ldr	r2, [r2, #24]
        pcache->block = block;
 8004746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	fbb5 f3f2 	udiv	r3, r5, r2
 800474e:	fb02 5313 	mls	r3, r2, r3, r5
 8004752:	1aeb      	subs	r3, r5, r3
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8004754:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 8004756:	f8c4 b008 	str.w	fp, [r4, #8]
 800475a:	e7bc      	b.n	80046d6 <lfs_bd_prog+0x16>

0800475c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 800475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475e:	b085      	sub	sp, #20
 8004760:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 8004762:	9202      	str	r2, [sp, #8]
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	684b      	ldr	r3, [r1, #4]
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	680b      	ldr	r3, [r1, #0]
 800476c:	9300      	str	r3, [sp, #0]
        const void *buffer, lfs_size_t size) {
 800476e:	460c      	mov	r4, r1
 8004770:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
 8004772:	2300      	movs	r3, #0
 8004774:	4602      	mov	r2, r0
 8004776:	f100 0110 	add.w	r1, r0, #16
 800477a:	f7ff ffa1 	bl	80046c0 <lfs_bd_prog>
    if (err) {
 800477e:	4606      	mov	r6, r0
 8004780:	b940      	cbnz	r0, 8004794 <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004782:	462a      	mov	r2, r5
 8004784:	4639      	mov	r1, r7
 8004786:	68e0      	ldr	r0, [r4, #12]
 8004788:	f002 f928 	bl	80069dc <lfs_crc>
    commit->off += size;
 800478c:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
 800478e:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 8004790:	442b      	add	r3, r5
 8004792:	6063      	str	r3, [r4, #4]
}
 8004794:	4630      	mov	r0, r6
 8004796:	b005      	add	sp, #20
 8004798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800479a <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 800479a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479e:	4680      	mov	r8, r0
 80047a0:	b089      	sub	sp, #36	; 0x24
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80047a2:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
 80047a4:	4617      	mov	r7, r2
 80047a6:	4699      	mov	r9, r3
 80047a8:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80047aa:	f7fe ff8c 	bl	80036c6 <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
 80047ae:	684b      	ldr	r3, [r1, #4]
 80047b0:	694a      	ldr	r2, [r1, #20]
 80047b2:	4403      	add	r3, r0
 80047b4:	4293      	cmp	r3, r2
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80047b6:	4606      	mov	r6, r0
    if (commit->off + dsize > commit->end) {
 80047b8:	d842      	bhi.n	8004840 <lfs_dir_commitattr+0xa6>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80047ba:	688b      	ldr	r3, [r1, #8]
 80047bc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 80047c0:	aa08      	add	r2, sp, #32
 80047c2:	ea8a 0303 	eor.w	r3, sl, r3
    return __builtin_bswap32(a);
 80047c6:	ba1b      	rev	r3, r3
 80047c8:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80047cc:	4640      	mov	r0, r8
 80047ce:	2304      	movs	r3, #4
 80047d0:	f7ff ffc4 	bl	800475c <lfs_dir_commitprog>
    if (err) {
 80047d4:	4605      	mov	r5, r0
 80047d6:	bb78      	cbnz	r0, 8004838 <lfs_dir_commitattr+0x9e>
    if (!(tag & 0x80000000)) {
 80047d8:	2f00      	cmp	r7, #0
 80047da:	f1a6 0604 	sub.w	r6, r6, #4
 80047de:	da22      	bge.n	8004826 <lfs_dir_commitattr+0x8c>
            err = lfs_bd_read(lfs,
 80047e0:	f108 0368 	add.w	r3, r8, #104	; 0x68
 80047e4:	4607      	mov	r7, r0
 80047e6:	9305      	str	r3, [sp, #20]
 80047e8:	f10d 0b1b 	add.w	fp, sp, #27
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80047ec:	42b7      	cmp	r7, r6
 80047ee:	d221      	bcs.n	8004834 <lfs_dir_commitattr+0x9a>
            err = lfs_bd_read(lfs,
 80047f0:	2301      	movs	r3, #1
 80047f2:	9303      	str	r3, [sp, #12]
 80047f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80047f8:	f8cd b008 	str.w	fp, [sp, #8]
 80047fc:	443b      	add	r3, r7
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	f8d9 3000 	ldr.w	r3, [r9]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4642      	mov	r2, r8
 8004808:	1bf3      	subs	r3, r6, r7
 800480a:	2100      	movs	r1, #0
 800480c:	9805      	ldr	r0, [sp, #20]
 800480e:	f7ff f80d 	bl	800382c <lfs_bd_read.isra.14>
            if (err) {
 8004812:	b9c0      	cbnz	r0, 8004846 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8004814:	2301      	movs	r3, #1
 8004816:	465a      	mov	r2, fp
 8004818:	4621      	mov	r1, r4
 800481a:	4640      	mov	r0, r8
 800481c:	f7ff ff9e 	bl	800475c <lfs_dir_commitprog>
            if (err) {
 8004820:	b988      	cbnz	r0, 8004846 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004822:	3701      	adds	r7, #1
 8004824:	e7e2      	b.n	80047ec <lfs_dir_commitattr+0x52>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004826:	4633      	mov	r3, r6
 8004828:	464a      	mov	r2, r9
 800482a:	4621      	mov	r1, r4
 800482c:	4640      	mov	r0, r8
 800482e:	f7ff ff95 	bl	800475c <lfs_dir_commitprog>
        if (err) {
 8004832:	b940      	cbnz	r0, 8004846 <lfs_dir_commitattr+0xac>
    commit->ptag = tag & 0x7fffffff;
 8004834:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8004838:	4628      	mov	r0, r5
 800483a:	b009      	add	sp, #36	; 0x24
 800483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_NOSPC;
 8004840:	f06f 051b 	mvn.w	r5, #27
 8004844:	e7f8      	b.n	8004838 <lfs_dir_commitattr+0x9e>
 8004846:	4605      	mov	r5, r0
 8004848:	e7f6      	b.n	8004838 <lfs_dir_commitattr+0x9e>

0800484a <lfs_dir_commit_commit>:
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800484a:	4613      	mov	r3, r2
 800484c:	460a      	mov	r2, r1
 800484e:	c803      	ldmia	r0, {r0, r1}
 8004850:	f7ff bfa3 	b.w	800479a <lfs_dir_commitattr>

08004854 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	b08d      	sub	sp, #52	; 0x34
    const lfs_off_t off1 = commit->off;
 800485a:	684b      	ldr	r3, [r1, #4]
 800485c:	9305      	str	r3, [sp, #20]
    const uint32_t crc1 = commit->crc;
 800485e:	68cb      	ldr	r3, [r1, #12]
 8004860:	9306      	str	r3, [sp, #24]
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
 8004862:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004864:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8004866:	9b05      	ldr	r3, [sp, #20]
 8004868:	189e      	adds	r6, r3, r2
 800486a:	3607      	adds	r6, #7
    return a - (a % alignment);
 800486c:	fbb6 f3f2 	udiv	r3, r6, r2
 8004870:	fb02 6313 	mls	r3, r2, r3, r6
 8004874:	1af6      	subs	r6, r6, r3
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004876:	f1a6 0308 	sub.w	r3, r6, #8
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800487a:	4607      	mov	r7, r0
 800487c:	460d      	mov	r5, r1
    return (a < b) ? a : b;
 800487e:	f240 3bfe 	movw	fp, #1022	; 0x3fe
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004882:	9307      	str	r3, [sp, #28]
    while (commit->off < end) {
 8004884:	686c      	ldr	r4, [r5, #4]
 8004886:	42b4      	cmp	r4, r6
 8004888:	d323      	bcc.n	80048d2 <lfs_dir_commitcrc+0x7e>
    rcache->block = LFS_BLOCK_NULL;
 800488a:	4639      	mov	r1, r7
 800488c:	f04f 33ff 	mov.w	r3, #4294967295
 8004890:	f841 3b10 	str.w	r3, [r1], #16
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8004894:	463a      	mov	r2, r7
 8004896:	2300      	movs	r3, #0
 8004898:	4638      	mov	r0, r7
 800489a:	f7ff fed0 	bl	800463e <lfs_bd_flush>
    if (err) {
 800489e:	4680      	mov	r8, r0
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f040 80b1 	bne.w	8004a08 <lfs_dir_commitcrc+0x1b4>
    err = lfs->cfg->sync(lfs->cfg);
 80048a6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80048a8:	6903      	ldr	r3, [r0, #16]
 80048aa:	4798      	blx	r3
    if (err) {
 80048ac:	4680      	mov	r8, r0
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f040 80aa 	bne.w	8004a08 <lfs_dir_commitcrc+0x1b4>
    lfs_off_t noff = off1 + sizeof(uint32_t);
 80048b4:	9b05      	ldr	r3, [sp, #20]
    lfs_off_t off = commit->begin;
 80048b6:	692c      	ldr	r4, [r5, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
 80048b8:	f103 0904 	add.w	r9, r3, #4
            err = lfs_bd_read(lfs,
 80048bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048c0:	9307      	str	r3, [sp, #28]
    while (off < end) {
 80048c2:	42b4      	cmp	r4, r6
 80048c4:	f080 80a0 	bcs.w	8004a08 <lfs_dir_commitcrc+0x1b4>
 80048c8:	f04f 3aff 	mov.w	sl, #4294967295
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80048cc:	f109 0b04 	add.w	fp, r9, #4
 80048d0:	e07f      	b.n	80049d2 <lfs_dir_commitcrc+0x17e>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 80048d2:	f104 0a04 	add.w	sl, r4, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 80048d6:	eba6 040a 	sub.w	r4, r6, sl
 80048da:	455c      	cmp	r4, fp
 80048dc:	bf94      	ite	ls
 80048de:	4454      	addls	r4, sl
 80048e0:	eb0a 040b 	addhi.w	r4, sl, fp
        if (noff < end) {
 80048e4:	42b4      	cmp	r4, r6
 80048e6:	d203      	bcs.n	80048f0 <lfs_dir_commitcrc+0x9c>
 80048e8:	9b07      	ldr	r3, [sp, #28]
 80048ea:	429c      	cmp	r4, r3
 80048ec:	bf28      	it	cs
 80048ee:	461c      	movcs	r4, r3
        lfs_tag_t tag = 0xffffffff;
 80048f0:	aa0c      	add	r2, sp, #48	; 0x30
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	f842 3d0c 	str.w	r3, [r2, #-12]!
        int err = lfs_bd_read(lfs,
 80048fa:	2304      	movs	r3, #4
 80048fc:	9202      	str	r2, [sp, #8]
 80048fe:	682a      	ldr	r2, [r5, #0]
 8004900:	9200      	str	r2, [sp, #0]
 8004902:	9303      	str	r3, [sp, #12]
 8004904:	9401      	str	r4, [sp, #4]
 8004906:	463a      	mov	r2, r7
 8004908:	2100      	movs	r1, #0
 800490a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800490e:	f7fe ff8d 	bl	800382c <lfs_bd_read.isra.14>
        if (err && err != LFS_ERR_CORRUPT) {
 8004912:	4680      	mov	r8, r0
 8004914:	b110      	cbz	r0, 800491c <lfs_dir_commitcrc+0xc8>
 8004916:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800491a:	d175      	bne.n	8004a08 <lfs_dir_commitcrc+0x1b4>
    return __builtin_bswap32(a);
 800491c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800491e:	68e8      	ldr	r0, [r5, #12]
 8004920:	ba1b      	rev	r3, r3
        bool reset = ~lfs_frombe32(tag) >> 31;
 8004922:	ea6f 0903 	mvn.w	r9, r3
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004926:	eba4 040a 	sub.w	r4, r4, sl
        bool reset = ~lfs_frombe32(tag) >> 31;
 800492a:	ea4f 73d9 	mov.w	r3, r9, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800492e:	f444 247f 	orr.w	r4, r4, #1044480	; 0xff000
 8004932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004936:	f444 6440 	orr.w	r4, r4, #3072	; 0xc00
 800493a:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800493e:	68ab      	ldr	r3, [r5, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004940:	9409      	str	r4, [sp, #36]	; 0x24
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8004942:	405c      	eors	r4, r3
 8004944:	ba23      	rev	r3, r4
 8004946:	ac0c      	add	r4, sp, #48	; 0x30
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004948:	2204      	movs	r2, #4
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800494a:	f844 3d08 	str.w	r3, [r4, #-8]!
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800494e:	4621      	mov	r1, r4
 8004950:	f002 f844 	bl	80069dc <lfs_crc>
        err = lfs_bd_prog(lfs,
 8004954:	2308      	movs	r3, #8
 8004956:	9303      	str	r3, [sp, #12]
 8004958:	686b      	ldr	r3, [r5, #4]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	682b      	ldr	r3, [r5, #0]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800495e:	60e8      	str	r0, [r5, #12]
        footer[1] = lfs_tole32(commit->crc);
 8004960:	900b      	str	r0, [sp, #44]	; 0x2c
        err = lfs_bd_prog(lfs,
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	9402      	str	r4, [sp, #8]
 8004966:	2300      	movs	r3, #0
 8004968:	463a      	mov	r2, r7
 800496a:	f107 0110 	add.w	r1, r7, #16
 800496e:	4638      	mov	r0, r7
 8004970:	f7ff fea6 	bl	80046c0 <lfs_bd_prog>
        if (err) {
 8004974:	4680      	mov	r8, r0
 8004976:	2800      	cmp	r0, #0
 8004978:	d146      	bne.n	8004a08 <lfs_dir_commitcrc+0x1b4>
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return tag & 0x000003ff;
 800497c:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004980:	1d11      	adds	r1, r2, #4
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8004982:	f009 4900 	and.w	r9, r9, #2147483648	; 0x80000000
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004986:	686a      	ldr	r2, [r5, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8004988:	ea89 0303 	eor.w	r3, r9, r3
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800498c:	440a      	add	r2, r1
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800498e:	60ab      	str	r3, [r5, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004994:	606a      	str	r2, [r5, #4]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8004996:	60eb      	str	r3, [r5, #12]
 8004998:	e774      	b.n	8004884 <lfs_dir_commitcrc+0x30>
            if (i == off1 && crc != crc1) {
 800499a:	9b05      	ldr	r3, [sp, #20]
 800499c:	429c      	cmp	r4, r3
 800499e:	d102      	bne.n	80049a6 <lfs_dir_commitcrc+0x152>
 80049a0:	9b06      	ldr	r3, [sp, #24]
 80049a2:	459a      	cmp	sl, r3
 80049a4:	d12d      	bne.n	8004a02 <lfs_dir_commitcrc+0x1ae>
            err = lfs_bd_read(lfs,
 80049a6:	2301      	movs	r3, #1
 80049a8:	9303      	str	r3, [sp, #12]
 80049aa:	ab0a      	add	r3, sp, #40	; 0x28
 80049ac:	9302      	str	r3, [sp, #8]
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	9401      	str	r4, [sp, #4]
 80049b4:	ebab 0304 	sub.w	r3, fp, r4
 80049b8:	463a      	mov	r2, r7
 80049ba:	2100      	movs	r1, #0
 80049bc:	9807      	ldr	r0, [sp, #28]
 80049be:	f7fe ff35 	bl	800382c <lfs_bd_read.isra.14>
            if (err) {
 80049c2:	bb00      	cbnz	r0, 8004a06 <lfs_dir_commitcrc+0x1b2>
            crc = lfs_crc(crc, &dat, 1);
 80049c4:	4650      	mov	r0, sl
 80049c6:	2201      	movs	r2, #1
 80049c8:	a90a      	add	r1, sp, #40	; 0x28
 80049ca:	f002 f807 	bl	80069dc <lfs_crc>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80049ce:	3401      	adds	r4, #1
            crc = lfs_crc(crc, &dat, 1);
 80049d0:	4682      	mov	sl, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80049d2:	455c      	cmp	r4, fp
 80049d4:	d3e1      	bcc.n	800499a <lfs_dir_commitcrc+0x146>
        if (crc != 0) {
 80049d6:	f1ba 0f00 	cmp.w	sl, #0
 80049da:	d119      	bne.n	8004a10 <lfs_dir_commitcrc+0x1bc>
        off = lfs_min(end - noff, 0x3fe) + noff;
 80049dc:	eba6 0409 	sub.w	r4, r6, r9
 80049e0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80049e4:	429c      	cmp	r4, r3
 80049e6:	bf94      	ite	ls
 80049e8:	444c      	addls	r4, r9
 80049ea:	eb09 0403 	addhi.w	r4, r9, r3
        if (off < end) {
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	d904      	bls.n	80049fc <lfs_dir_commitcrc+0x1a8>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80049f2:	f1a6 0308 	sub.w	r3, r6, #8
    return (a < b) ? a : b;
 80049f6:	429c      	cmp	r4, r3
 80049f8:	bf28      	it	cs
 80049fa:	461c      	movcs	r4, r3
        noff = off + sizeof(uint32_t);
 80049fc:	f104 0904 	add.w	r9, r4, #4
 8004a00:	e75f      	b.n	80048c2 <lfs_dir_commitcrc+0x6e>
                return LFS_ERR_CORRUPT;
 8004a02:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8004a06:	4680      	mov	r8, r0
}
 8004a08:	4640      	mov	r0, r8
 8004a0a:	b00d      	add	sp, #52	; 0x34
 8004a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
 8004a10:	f06f 0853 	mvn.w	r8, #83	; 0x53
 8004a14:	e7f8      	b.n	8004a08 <lfs_dir_commitcrc+0x1b4>

08004a16 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 8004a16:	b530      	push	{r4, r5, lr}
 8004a18:	4604      	mov	r4, r0
    return tag & 0x000003ff;
 8004a1a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8004a1e:	68a3      	ldr	r3, [r4, #8]
    int res = lfs_bd_cmp(lfs,
 8004a20:	6821      	ldr	r1, [r4, #0]
        lfs_tag_t tag, const void *buffer) {
 8004a22:	b085      	sub	sp, #20
 8004a24:	42ab      	cmp	r3, r5
 8004a26:	bf28      	it	cs
 8004a28:	462b      	movcs	r3, r5
 8004a2a:	4610      	mov	r0, r2
    int res = lfs_bd_cmp(lfs,
 8004a2c:	9302      	str	r3, [sp, #8]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	6843      	ldr	r3, [r0, #4]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	6803      	ldr	r3, [r0, #0]
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	f7ff fdce 	bl	80045dc <lfs_bd_cmp.constprop.27>
    if (res != LFS_CMP_EQ) {
 8004a40:	b928      	cbnz	r0, 8004a4e <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
 8004a42:	68a3      	ldr	r3, [r4, #8]
 8004a44:	42ab      	cmp	r3, r5
 8004a46:	d002      	beq.n	8004a4e <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004a48:	bf2c      	ite	cs
 8004a4a:	2002      	movcs	r0, #2
 8004a4c:	2001      	movcc	r0, #1
}
 8004a4e:	b005      	add	sp, #20
 8004a50:	bd30      	pop	{r4, r5, pc}
	...

08004a54 <lfs_file_tell>:
lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 8004a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
 8004a56:	4d0b      	ldr	r5, [pc, #44]	; (8004a84 <lfs_file_tell+0x30>)
 8004a58:	4e0b      	ldr	r6, [pc, #44]	; (8004a88 <lfs_file_tell+0x34>)
lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 8004a5a:	460c      	mov	r4, r1
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4629      	mov	r1, r5
 8004a60:	e88d 0050 	stmia.w	sp, {r4, r6}
 8004a64:	f640 421e 	movw	r2, #3102	; 0xc1e
 8004a68:	4808      	ldr	r0, [pc, #32]	; (8004a8c <lfs_file_tell+0x38>)
 8004a6a:	f002 f905 	bl	8006c78 <iprintf>
    LFS_TRACE("lfs_file_tell -> %"PRId32, file->pos);
 8004a6e:	9600      	str	r6, [sp, #0]
 8004a70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a72:	4807      	ldr	r0, [pc, #28]	; (8004a90 <lfs_file_tell+0x3c>)
 8004a74:	f640 4221 	movw	r2, #3105	; 0xc21
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f002 f8fd 	bl	8006c78 <iprintf>
}
 8004a7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004a80:	b002      	add	sp, #8
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
 8004a84:	08007f20 	.word	0x08007f20
 8004a88:	08007d9e 	.word	0x08007d9e
 8004a8c:	080082b6 	.word	0x080082b6
 8004a90:	080082dc 	.word	0x080082dc

08004a94 <lfs_file_size>:
lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
 8004a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
 8004a96:	4d15      	ldr	r5, [pc, #84]	; (8004aec <lfs_file_size+0x58>)
lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
 8004a98:	460c      	mov	r4, r1
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004aa0:	f640 4232 	movw	r2, #3122	; 0xc32
 8004aa4:	4912      	ldr	r1, [pc, #72]	; (8004af0 <lfs_file_size+0x5c>)
 8004aa6:	4813      	ldr	r0, [pc, #76]	; (8004af4 <lfs_file_size+0x60>)
 8004aa8:	f002 f8e6 	bl	8006c78 <iprintf>
    if (file->flags & LFS_F_WRITING) {
 8004aac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aae:	039b      	lsls	r3, r3, #14
 8004ab0:	d512      	bpl.n	8004ad8 <lfs_file_size+0x44>
    return (a > b) ? a : b;
 8004ab2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ab4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        LFS_TRACE("lfs_file_size -> %"PRId32,
 8004ab6:	9500      	str	r5, [sp, #0]
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf38      	it	cc
 8004abc:	4613      	movcc	r3, r2
 8004abe:	490c      	ldr	r1, [pc, #48]	; (8004af0 <lfs_file_size+0x5c>)
 8004ac0:	480d      	ldr	r0, [pc, #52]	; (8004af8 <lfs_file_size+0x64>)
 8004ac2:	f640 4237 	movw	r2, #3127	; 0xc37
 8004ac6:	f002 f8d7 	bl	8006c78 <iprintf>
 8004aca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ace:	4298      	cmp	r0, r3
 8004ad0:	bf38      	it	cc
 8004ad2:	4618      	movcc	r0, r3
}
 8004ad4:	b003      	add	sp, #12
 8004ad6:	bd30      	pop	{r4, r5, pc}
        LFS_TRACE("lfs_file_size -> %"PRId32, file->ctz.size);
 8004ad8:	9500      	str	r5, [sp, #0]
 8004ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004adc:	4904      	ldr	r1, [pc, #16]	; (8004af0 <lfs_file_size+0x5c>)
 8004ade:	4806      	ldr	r0, [pc, #24]	; (8004af8 <lfs_file_size+0x64>)
 8004ae0:	f640 423a 	movw	r2, #3130	; 0xc3a
 8004ae4:	f002 f8c8 	bl	8006c78 <iprintf>
        return file->ctz.size;
 8004ae8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004aea:	e7f3      	b.n	8004ad4 <lfs_file_size+0x40>
 8004aec:	08007d9e 	.word	0x08007d9e
 8004af0:	08007f20 	.word	0x08007f20
 8004af4:	08008221 	.word	0x08008221
 8004af8:	08008247 	.word	0x08008247

08004afc <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
 8004afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 8004afe:	4d0d      	ldr	r5, [pc, #52]	; (8004b34 <lfs_unmount+0x38>)
 8004b00:	4e0d      	ldr	r6, [pc, #52]	; (8004b38 <lfs_unmount+0x3c>)
 8004b02:	9600      	str	r6, [sp, #0]
 8004b04:	4603      	mov	r3, r0
 8004b06:	4629      	mov	r1, r5
int lfs_unmount(lfs_t *lfs) {
 8004b08:	4604      	mov	r4, r0
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 8004b0a:	f640 62e5 	movw	r2, #3813	; 0xee5
 8004b0e:	480b      	ldr	r0, [pc, #44]	; (8004b3c <lfs_unmount+0x40>)
 8004b10:	f002 f8b2 	bl	8006c78 <iprintf>
    int err = lfs_deinit(lfs);
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7fe fe66 	bl	80037e6 <lfs_deinit>
    LFS_TRACE("lfs_unmount -> %d", err);
 8004b1a:	9600      	str	r6, [sp, #0]
    int err = lfs_deinit(lfs);
 8004b1c:	4604      	mov	r4, r0
    LFS_TRACE("lfs_unmount -> %d", err);
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f640 62e7 	movw	r2, #3815	; 0xee7
 8004b24:	4629      	mov	r1, r5
 8004b26:	4806      	ldr	r0, [pc, #24]	; (8004b40 <lfs_unmount+0x44>)
 8004b28:	f002 f8a6 	bl	8006c78 <iprintf>
}
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	b002      	add	sp, #8
 8004b30:	bd70      	pop	{r4, r5, r6, pc}
 8004b32:	bf00      	nop
 8004b34:	08007f20 	.word	0x08007f20
 8004b38:	08007d9e 	.word	0x08007d9e
 8004b3c:	08008812 	.word	0x08008812
 8004b40:	08008832 	.word	0x08008832

08004b44 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	b0a7      	sub	sp, #156	; 0x9c
    LFS_TRACE("lfs_mount(%p, %p {.context=%p, "
 8004b4a:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8004d90 <lfs_mount+0x24c>
 8004b4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004b52:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8004b54:	9312      	str	r3, [sp, #72]	; 0x48
 8004b56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b58:	9311      	str	r3, [sp, #68]	; 0x44
 8004b5a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8004b5c:	9310      	str	r3, [sp, #64]	; 0x40
 8004b5e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004b60:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b62:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004b64:	930e      	str	r3, [sp, #56]	; 0x38
 8004b66:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004b68:	930d      	str	r3, [sp, #52]	; 0x34
 8004b6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b6e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b72:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004b74:	930a      	str	r3, [sp, #40]	; 0x28
 8004b76:	6a0b      	ldr	r3, [r1, #32]
 8004b78:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7a:	69cb      	ldr	r3, [r1, #28]
 8004b7c:	9308      	str	r3, [sp, #32]
 8004b7e:	698b      	ldr	r3, [r1, #24]
 8004b80:	9307      	str	r3, [sp, #28]
 8004b82:	694b      	ldr	r3, [r1, #20]
 8004b84:	9306      	str	r3, [sp, #24]
 8004b86:	690b      	ldr	r3, [r1, #16]
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	68cb      	ldr	r3, [r1, #12]
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	688b      	ldr	r3, [r1, #8]
 8004b90:	9303      	str	r3, [sp, #12]
 8004b92:	684b      	ldr	r3, [r1, #4]
 8004b94:	9302      	str	r3, [sp, #8]
 8004b96:	680b      	ldr	r3, [r1, #0]
 8004b98:	9301      	str	r3, [sp, #4]
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8004b9a:	4604      	mov	r4, r0
    LFS_TRACE("lfs_mount(%p, %p {.context=%p, "
 8004b9c:	4603      	mov	r3, r0
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8004b9e:	460d      	mov	r5, r1
    LFS_TRACE("lfs_mount(%p, %p {.context=%p, "
 8004ba0:	9100      	str	r1, [sp, #0]
 8004ba2:	f640 6264 	movw	r2, #3684	; 0xe64
 8004ba6:	4970      	ldr	r1, [pc, #448]	; (8004d68 <lfs_mount+0x224>)
 8004ba8:	4870      	ldr	r0, [pc, #448]	; (8004d6c <lfs_mount+0x228>)
 8004baa:	f002 f865 	bl	8006c78 <iprintf>
    int err = lfs_init(lfs, cfg);
 8004bae:	4629      	mov	r1, r5
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff fbba 	bl	800432a <lfs_init>
 8004bb6:	4646      	mov	r6, r8
    if (err) {
 8004bb8:	4607      	mov	r7, r0
 8004bba:	b160      	cbz	r0, 8004bd6 <lfs_mount+0x92>
        LFS_TRACE("lfs_mount -> %d", err);
 8004bbc:	f8cd 8000 	str.w	r8, [sp]
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f640 6267 	movw	r2, #3687	; 0xe67
    LFS_TRACE("lfs_mount -> %d", 0);
 8004bc6:	4968      	ldr	r1, [pc, #416]	; (8004d68 <lfs_mount+0x224>)
 8004bc8:	4869      	ldr	r0, [pc, #420]	; (8004d70 <lfs_mount+0x22c>)
 8004bca:	f002 f855 	bl	8006c78 <iprintf>
}
 8004bce:	4638      	mov	r0, r7
 8004bd0:	b027      	add	sp, #156	; 0x9c
 8004bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	2220      	movs	r2, #32
 8004bda:	a81e      	add	r0, sp, #120	; 0x78
 8004bdc:	f001 ff98 	bl	8006b10 <memset>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004be0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8004d94 <lfs_mount+0x250>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8004be4:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8004d98 <lfs_mount+0x254>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8004be8:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8004d9c <lfs_mount+0x258>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004bec:	2301      	movs	r3, #1
 8004bee:	9325      	str	r3, [sp, #148]	; 0x94
    lfs_block_t cycle = 0;
 8004bf0:	46b8      	mov	r8, r7
    while (!lfs_pair_isnull(dir.tail)) {
 8004bf2:	a824      	add	r0, sp, #144	; 0x90
 8004bf4:	f7fe fd4c 	bl	8003690 <lfs_pair_isnull>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d032      	beq.n	8004c62 <lfs_mount+0x11e>
    if (lfs_pair_isnull(lfs->root)) {
 8004bfc:	f104 0020 	add.w	r0, r4, #32
 8004c00:	f7fe fd46 	bl	8003690 <lfs_pair_isnull>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d168      	bne.n	8004cda <lfs_mount+0x196>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8004c08:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7fe fd71 	bl	80036f4 <lfs_gstate_iszero>
 8004c12:	b958      	cbnz	r0, 8004c2c <lfs_mount+0xe8>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8004c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	9602      	str	r6, [sp, #8]
 8004c1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c20:	4951      	ldr	r1, [pc, #324]	; (8004d68 <lfs_mount+0x224>)
 8004c22:	4854      	ldr	r0, [pc, #336]	; (8004d74 <lfs_mount+0x230>)
 8004c24:	f640 62d3 	movw	r2, #3795	; 0xed3
 8004c28:	f002 f826 	bl	8006c78 <iprintf>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8004c2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c2e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004c32:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8004c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c38:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 8004c40:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004c42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004c44:	69d1      	ldr	r1, [r2, #28]
 8004c46:	fbb0 f3f1 	udiv	r3, r0, r1
 8004c4a:	fb01 0313 	mls	r3, r1, r3, r0
    lfs->free.ack = lfs->cfg->block_count;
 8004c4e:	6a12      	ldr	r2, [r2, #32]
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 8004c50:	6563      	str	r3, [r4, #84]	; 0x54
    lfs->free.size = 0;
 8004c52:	2300      	movs	r3, #0
    lfs->free.ack = lfs->cfg->block_count;
 8004c54:	6622      	str	r2, [r4, #96]	; 0x60
    lfs->free.size = 0;
 8004c56:	65a3      	str	r3, [r4, #88]	; 0x58
    lfs->free.i = 0;
 8004c58:	65e3      	str	r3, [r4, #92]	; 0x5c
    LFS_TRACE("lfs_mount -> %d", 0);
 8004c5a:	9600      	str	r6, [sp, #0]
 8004c5c:	f640 62db 	movw	r2, #3803	; 0xedb
 8004c60:	e7b1      	b.n	8004bc6 <lfs_mount+0x82>
        if (cycle >= lfs->cfg->block_count/2) {
 8004c62:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
 8004c6a:	d279      	bcs.n	8004d60 <lfs_mount+0x21c>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	9317      	str	r3, [sp, #92]	; 0x5c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8004c70:	ab15      	add	r3, sp, #84	; 0x54
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	4b40      	ldr	r3, [pc, #256]	; (8004d78 <lfs_mount+0x234>)
 8004c76:	9001      	str	r0, [sp, #4]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	f8cd a008 	str.w	sl, [sp, #8]
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <lfs_mount+0x238>)
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004c80:	9415      	str	r4, [sp, #84]	; 0x54
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8004c82:	aa24      	add	r2, sp, #144	; 0x90
 8004c84:	a91e      	add	r1, sp, #120	; 0x78
 8004c86:	4620      	mov	r0, r4
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004c88:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8004c8c:	f7fe fe9c 	bl	80039c8 <lfs_dir_fetchmatch>
        if (tag < 0) {
 8004c90:	1e05      	subs	r5, r0, #0
        cycle += 1;
 8004c92:	f108 0801 	add.w	r8, r8, #1
        if (tag < 0) {
 8004c96:	db56      	blt.n	8004d46 <lfs_mount+0x202>
        if (tag && !lfs_tag_isdelete(tag)) {
 8004c98:	d04b      	beq.n	8004d32 <lfs_mount+0x1ee>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8004c9a:	f345 0509 	sbfx	r5, r5, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 8004c9e:	3501      	adds	r5, #1
 8004ca0:	d047      	beq.n	8004d32 <lfs_mount+0x1ee>
            lfs->root[0] = dir.pair[0];
 8004ca2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ca4:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 8004ca6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ca8:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8004caa:	ab18      	add	r3, sp, #96	; 0x60
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	4a33      	ldr	r2, [pc, #204]	; (8004d7c <lfs_mount+0x238>)
 8004cb0:	465b      	mov	r3, fp
 8004cb2:	a91e      	add	r1, sp, #120	; 0x78
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7ff fa5b 	bl	8004170 <lfs_dir_get>
            if (tag < 0) {
 8004cba:	1e05      	subs	r5, r0, #0
 8004cbc:	db43      	blt.n	8004d46 <lfs_mount+0x202>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8004cbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004cc0:	0c13      	lsrs	r3, r2, #16
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8004cc2:	2b02      	cmp	r3, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8004cc4:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8004cc6:	d00b      	beq.n	8004ce0 <lfs_mount+0x19c>
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	4927      	ldr	r1, [pc, #156]	; (8004d68 <lfs_mount+0x224>)
 8004ccc:	482c      	ldr	r0, [pc, #176]	; (8004d80 <lfs_mount+0x23c>)
 8004cce:	9200      	str	r2, [sp, #0]
 8004cd0:	9601      	str	r6, [sp, #4]
 8004cd2:	f640 6299 	movw	r2, #3737	; 0xe99
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8004cd6:	f001 ffcf 	bl	8006c78 <iprintf>
        err = LFS_ERR_INVAL;
 8004cda:	f06f 0515 	mvn.w	r5, #21
 8004cde:	e032      	b.n	8004d46 <lfs_mount+0x202>
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	d1f1      	bne.n	8004cc8 <lfs_mount+0x184>
            if (superblock.name_max) {
 8004ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ce6:	b153      	cbz	r3, 8004cfe <lfs_mount+0x1ba>
                if (superblock.name_max > lfs->name_max) {
 8004ce8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d906      	bls.n	8004cfc <lfs_mount+0x1b8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8004cee:	e88d 0044 	stmia.w	sp, {r2, r6}
 8004cf2:	491d      	ldr	r1, [pc, #116]	; (8004d68 <lfs_mount+0x224>)
 8004cf4:	4823      	ldr	r0, [pc, #140]	; (8004d84 <lfs_mount+0x240>)
 8004cf6:	f640 62a2 	movw	r2, #3746	; 0xea2
 8004cfa:	e7ec      	b.n	8004cd6 <lfs_mount+0x192>
                lfs->name_max = superblock.name_max;
 8004cfc:	66e3      	str	r3, [r4, #108]	; 0x6c
            if (superblock.file_max) {
 8004cfe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004d00:	b153      	cbz	r3, 8004d18 <lfs_mount+0x1d4>
                if (superblock.file_max > lfs->file_max) {
 8004d02:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d906      	bls.n	8004d16 <lfs_mount+0x1d2>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8004d08:	e88d 0044 	stmia.w	sp, {r2, r6}
 8004d0c:	4916      	ldr	r1, [pc, #88]	; (8004d68 <lfs_mount+0x224>)
 8004d0e:	481e      	ldr	r0, [pc, #120]	; (8004d88 <lfs_mount+0x244>)
 8004d10:	f640 62ad 	movw	r2, #3757	; 0xead
 8004d14:	e7df      	b.n	8004cd6 <lfs_mount+0x192>
                lfs->file_max = superblock.file_max;
 8004d16:	6723      	str	r3, [r4, #112]	; 0x70
            if (superblock.attr_max) {
 8004d18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d1a:	b153      	cbz	r3, 8004d32 <lfs_mount+0x1ee>
                if (superblock.attr_max > lfs->attr_max) {
 8004d1c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d906      	bls.n	8004d30 <lfs_mount+0x1ec>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8004d22:	e88d 0044 	stmia.w	sp, {r2, r6}
 8004d26:	4910      	ldr	r1, [pc, #64]	; (8004d68 <lfs_mount+0x224>)
 8004d28:	4818      	ldr	r0, [pc, #96]	; (8004d8c <lfs_mount+0x248>)
 8004d2a:	f640 62b8 	movw	r2, #3768	; 0xeb8
 8004d2e:	e7d2      	b.n	8004cd6 <lfs_mount+0x192>
                lfs->attr_max = superblock.attr_max;
 8004d30:	6763      	str	r3, [r4, #116]	; 0x74
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8004d32:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8004d36:	a91e      	add	r1, sp, #120	; 0x78
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff fa25 	bl	8004188 <lfs_dir_getgstate>
        if (err) {
 8004d3e:	4605      	mov	r5, r0
 8004d40:	2800      	cmp	r0, #0
 8004d42:	f43f af56 	beq.w	8004bf2 <lfs_mount+0xae>
    lfs_unmount(lfs);
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff fed8 	bl	8004afc <lfs_unmount>
    LFS_TRACE("lfs_mount -> %d", err);
 8004d4c:	9600      	str	r6, [sp, #0]
 8004d4e:	462b      	mov	r3, r5
 8004d50:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8004d54:	4904      	ldr	r1, [pc, #16]	; (8004d68 <lfs_mount+0x224>)
 8004d56:	4806      	ldr	r0, [pc, #24]	; (8004d70 <lfs_mount+0x22c>)
 8004d58:	f001 ff8e 	bl	8006c78 <iprintf>
    return err;
 8004d5c:	462f      	mov	r7, r5
 8004d5e:	e736      	b.n	8004bce <lfs_mount+0x8a>
            err = LFS_ERR_CORRUPT;
 8004d60:	f06f 0553 	mvn.w	r5, #83	; 0x53
 8004d64:	e7ef      	b.n	8004d46 <lfs_mount+0x202>
 8004d66:	bf00      	nop
 8004d68:	08007f20 	.word	0x08007f20
 8004d6c:	080085bc 	.word	0x080085bc
 8004d70:	080086f6 	.word	0x080086f6
 8004d74:	080087db 	.word	0x080087db
 8004d78:	0ff00008 	.word	0x0ff00008
 8004d7c:	7ffffc00 	.word	0x7ffffc00
 8004d80:	0800871f 	.word	0x0800871f
 8004d84:	08008748 	.word	0x08008748
 8004d88:	08008779 	.word	0x08008779
 8004d8c:	080087aa 	.word	0x080087aa
 8004d90:	08007d9e 	.word	0x08007d9e
 8004d94:	08008716 	.word	0x08008716
 8004d98:	08004a17 	.word	0x08004a17
 8004d9c:	20100018 	.word	0x20100018

08004da0 <lfs_fs_traverseraw>:
        bool includeorphans) {
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	b08f      	sub	sp, #60	; 0x3c
 8004da6:	4604      	mov	r4, r0
 8004da8:	460d      	mov	r5, r1
 8004daa:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004dac:	2100      	movs	r1, #0
 8004dae:	2220      	movs	r2, #32
 8004db0:	a806      	add	r0, sp, #24
        bool includeorphans) {
 8004db2:	4699      	mov	r9, r3
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004db4:	f8df a134 	ldr.w	sl, [pc, #308]	; 8004eec <lfs_fs_traverseraw+0x14c>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004db8:	f001 feaa 	bl	8006b10 <memset>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	930d      	str	r3, [sp, #52]	; 0x34
    lfs_block_t cycle = 0;
 8004dc0:	f04f 0800 	mov.w	r8, #0
    while (!lfs_pair_isnull(dir.tail)) {
 8004dc4:	a80c      	add	r0, sp, #48	; 0x30
 8004dc6:	f7fe fc63 	bl	8003690 <lfs_pair_isnull>
 8004dca:	b120      	cbz	r0, 8004dd6 <lfs_fs_traverseraw+0x36>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004dcc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004dce:	2f00      	cmp	r7, #0
 8004dd0:	d157      	bne.n	8004e82 <lfs_fs_traverseraw+0xe2>
    return 0;
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	e043      	b.n	8004e5e <lfs_fs_traverseraw+0xbe>
        if (cycle >= lfs->cfg->block_count/2) {
 8004dd6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
 8004dde:	d27f      	bcs.n	8004ee0 <lfs_fs_traverseraw+0x140>
            int err = cb(data, dir.tail[i]);
 8004de0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004de2:	4630      	mov	r0, r6
        cycle += 1;
 8004de4:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
 8004de8:	47a8      	blx	r5
            if (err) {
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d137      	bne.n	8004e5e <lfs_fs_traverseraw+0xbe>
            int err = cb(data, dir.tail[i]);
 8004dee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004df0:	4630      	mov	r0, r6
 8004df2:	47a8      	blx	r5
            if (err) {
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d132      	bne.n	8004e5e <lfs_fs_traverseraw+0xbe>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8004df8:	aa0c      	add	r2, sp, #48	; 0x30
 8004dfa:	a906      	add	r1, sp, #24
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff f817 	bl	8003e30 <lfs_dir_fetch>
        if (err) {
 8004e02:	bb60      	cbnz	r0, 8004e5e <lfs_fs_traverseraw+0xbe>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004e04:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8004ef0 <lfs_fs_traverseraw+0x150>
 8004e08:	4607      	mov	r7, r0
        for (uint16_t id = 0; id < dir.count; id++) {
 8004e0a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8004e0e:	b2bb      	uxth	r3, r7
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d9d7      	bls.n	8004dc4 <lfs_fs_traverseraw+0x24>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8004e14:	4b34      	ldr	r3, [pc, #208]	; (8004ee8 <lfs_fs_traverseraw+0x148>)
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004e16:	aa04      	add	r2, sp, #16
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8004e18:	ea03 2387 	and.w	r3, r3, r7, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004e1c:	9200      	str	r2, [sp, #0]
 8004e1e:	ea43 030b 	orr.w	r3, r3, fp
 8004e22:	4652      	mov	r2, sl
 8004e24:	a906      	add	r1, sp, #24
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7ff f9a2 	bl	8004170 <lfs_dir_get>
            if (tag < 0) {
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	da03      	bge.n	8004e38 <lfs_fs_traverseraw+0x98>
                if (tag == LFS_ERR_NOENT) {
 8004e30:	1c83      	adds	r3, r0, #2
 8004e32:	d114      	bne.n	8004e5e <lfs_fs_traverseraw+0xbe>
 8004e34:	3701      	adds	r7, #1
 8004e36:	e7e8      	b.n	8004e0a <lfs_fs_traverseraw+0x6a>
    return (tag & 0x7ff00000) >> 20;
 8004e38:	0d00      	lsrs	r0, r0, #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8004e3a:	f240 2202 	movw	r2, #514	; 0x202
 8004e3e:	4290      	cmp	r0, r2
    return (tag & 0x7ff00000) >> 20;
 8004e40:	b283      	uxth	r3, r0
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8004e42:	d10f      	bne.n	8004e64 <lfs_fs_traverseraw+0xc4>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8004e44:	9b05      	ldr	r3, [sp, #20]
    if (size == 0) {
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f4      	beq.n	8004e34 <lfs_fs_traverseraw+0x94>
 8004e4a:	e88d 0068 	stmia.w	sp, {r3, r5, r6}
 8004e4e:	4622      	mov	r2, r4
 8004e50:	9b04      	ldr	r3, [sp, #16]
 8004e52:	2100      	movs	r1, #0
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7ff fadb 	bl	8004410 <lfs_ctz_traverse.part.18>
                    if (err) {
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d0ea      	beq.n	8004e34 <lfs_fs_traverseraw+0x94>
}
 8004e5e:	b00f      	add	sp, #60	; 0x3c
 8004e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (includeorphans && 
 8004e64:	f1b9 0f00 	cmp.w	r9, #0
 8004e68:	d0e4      	beq.n	8004e34 <lfs_fs_traverseraw+0x94>
 8004e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6e:	d1e1      	bne.n	8004e34 <lfs_fs_traverseraw+0x94>
                    err = cb(data, (&ctz.head)[i]);
 8004e70:	9904      	ldr	r1, [sp, #16]
 8004e72:	4630      	mov	r0, r6
 8004e74:	47a8      	blx	r5
                    if (err) {
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d1f1      	bne.n	8004e5e <lfs_fs_traverseraw+0xbe>
                    err = cb(data, (&ctz.head)[i]);
 8004e7a:	9905      	ldr	r1, [sp, #20]
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	47a8      	blx	r5
 8004e80:	e7eb      	b.n	8004e5a <lfs_fs_traverseraw+0xba>
        if (f->type != LFS_TYPE_REG) {
 8004e82:	79bb      	ldrb	r3, [r7, #6]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d001      	beq.n	8004e8c <lfs_fs_traverseraw+0xec>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004e88:	683f      	ldr	r7, [r7, #0]
 8004e8a:	e7a0      	b.n	8004dce <lfs_fs_traverseraw+0x2e>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e96:	d014      	beq.n	8004ec2 <lfs_fs_traverseraw+0x122>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
 8004e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ea2:	d1f1      	bne.n	8004e88 <lfs_fs_traverseraw+0xe8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    if (size == 0) {
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0ee      	beq.n	8004e88 <lfs_fs_traverseraw+0xe8>
 8004eaa:	e88d 0068 	stmia.w	sp, {r3, r5, r6}
 8004eae:	4622      	mov	r2, r4
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f7ff faaa 	bl	8004410 <lfs_ctz_traverse.part.18>
            if (err) {
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d0e3      	beq.n	8004e88 <lfs_fs_traverseraw+0xe8>
 8004ec0:	e7cd      	b.n	8004e5e <lfs_fs_traverseraw+0xbe>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (size == 0) {
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0e7      	beq.n	8004e98 <lfs_fs_traverseraw+0xf8>
 8004ec8:	e88d 0068 	stmia.w	sp, {r3, r5, r6}
 8004ecc:	4622      	mov	r2, r4
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff fa9b 	bl	8004410 <lfs_ctz_traverse.part.18>
            if (err) {
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d0dc      	beq.n	8004e98 <lfs_fs_traverseraw+0xf8>
 8004ede:	e7be      	b.n	8004e5e <lfs_fs_traverseraw+0xbe>
            return LFS_ERR_CORRUPT;
 8004ee0:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8004ee4:	e7bb      	b.n	8004e5e <lfs_fs_traverseraw+0xbe>
 8004ee6:	bf00      	nop
 8004ee8:	03fffc00 	.word	0x03fffc00
 8004eec:	700ffc00 	.word	0x700ffc00
 8004ef0:	20000008 	.word	0x20000008

08004ef4 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004ef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
 8004ef8:	4d3b      	ldr	r5, [pc, #236]	; (8004fe8 <lfs_alloc+0xf4>)
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004efa:	4604      	mov	r4, r0
 8004efc:	460e      	mov	r6, r1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8004efe:	2701      	movs	r7, #1
        while (lfs->free.i != lfs->free.size) {
 8004f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f04:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d10e      	bne.n	8004f28 <lfs_alloc+0x34>
 8004f0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
        if (lfs->free.ack == 0) {
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	d13b      	bne.n	8004f88 <lfs_alloc+0x94>
            LFS_ERROR("No more free space %"PRIu32,
 8004f10:	4936      	ldr	r1, [pc, #216]	; (8004fec <lfs_alloc+0xf8>)
 8004f12:	9100      	str	r1, [sp, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	4936      	ldr	r1, [pc, #216]	; (8004ff0 <lfs_alloc+0xfc>)
 8004f18:	4836      	ldr	r0, [pc, #216]	; (8004ff4 <lfs_alloc+0x100>)
 8004f1a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8004f1e:	f001 feab 	bl	8006c78 <iprintf>
            return LFS_ERR_NOSPC;
 8004f22:	f06f 001b 	mvn.w	r0, #27
 8004f26:	e026      	b.n	8004f76 <lfs_alloc+0x82>
            lfs->free.ack -= 1;
 8004f28:	3901      	subs	r1, #1
            lfs->free.i += 1;
 8004f2a:	1c50      	adds	r0, r2, #1
            lfs->free.ack -= 1;
 8004f2c:	6621      	str	r1, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8004f2e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8004f32:	6e61      	ldr	r1, [r4, #100]	; 0x64
            lfs->free.i += 1;
 8004f34:	65e0      	str	r0, [r4, #92]	; 0x5c
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8004f36:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8004f3a:	f002 001f 	and.w	r0, r2, #31
 8004f3e:	fa07 f000 	lsl.w	r0, r7, r0
 8004f42:	ea10 0f0e 	tst.w	r0, lr
 8004f46:	d1dc      	bne.n	8004f02 <lfs_alloc+0xe>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8004f48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f4a:	441a      	add	r2, r3
 8004f4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004f4e:	6a18      	ldr	r0, [r3, #32]
 8004f50:	fbb2 f3f0 	udiv	r3, r2, r0
 8004f54:	fb00 2213 	mls	r2, r0, r3, r2
 8004f58:	6032      	str	r2, [r6, #0]
                while (lfs->free.i != lfs->free.size &&
 8004f5a:	6da6      	ldr	r6, [r4, #88]	; 0x58
                            & (1U << (lfs->free.i % 32)))) {
 8004f5c:	2501      	movs	r5, #1
                while (lfs->free.i != lfs->free.size &&
 8004f5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f60:	42b3      	cmp	r3, r6
 8004f62:	d03f      	beq.n	8004fe4 <lfs_alloc+0xf0>
                        (lfs->free.buffer[lfs->free.i / 32]
 8004f64:	095a      	lsrs	r2, r3, #5
                            & (1U << (lfs->free.i % 32)))) {
 8004f66:	f003 001f 	and.w	r0, r3, #31
 8004f6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f6e:	fa05 f000 	lsl.w	r0, r5, r0
                while (lfs->free.i != lfs->free.size &&
 8004f72:	4010      	ands	r0, r2
 8004f74:	d102      	bne.n	8004f7c <lfs_alloc+0x88>
}
 8004f76:	b002      	add	sp, #8
 8004f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    lfs->free.i += 1;
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8004f80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f82:	3b01      	subs	r3, #1
 8004f84:	6623      	str	r3, [r4, #96]	; 0x60
 8004f86:	e7ea      	b.n	8004f5e <lfs_alloc+0x6a>
                % lfs->cfg->block_count;
 8004f88:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004f8a:	f8d0 e020 	ldr.w	lr, [r0, #32]
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004f8e:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8004f90:	fbb3 f2fe 	udiv	r2, r3, lr
 8004f94:	fb0e 3312 	mls	r3, lr, r2, r3
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004f98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004f9a:	6563      	str	r3, [r4, #84]	; 0x54
        lfs->free.i = 0;
 8004f9c:	f04f 0800 	mov.w	r8, #0
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004fa0:	00d3      	lsls	r3, r2, #3
 8004fa2:	428b      	cmp	r3, r1
 8004fa4:	bf94      	ite	ls
 8004fa6:	65a3      	strls	r3, [r4, #88]	; 0x58
 8004fa8:	65a1      	strhi	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
 8004faa:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004fae:	4641      	mov	r1, r8
 8004fb0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004fb2:	f001 fdad 	bl	8006b10 <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7ff feef 	bl	8004da0 <lfs_fs_traverseraw>
        if (err) {
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d09c      	beq.n	8004f00 <lfs_alloc+0xc>
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 8004fc6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004fc8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004fca:	69d1      	ldr	r1, [r2, #28]
 8004fcc:	fbb5 f3f1 	udiv	r3, r5, r1
 8004fd0:	fb01 5313 	mls	r3, r1, r3, r5
 8004fd4:	6563      	str	r3, [r4, #84]	; 0x54
    lfs->free.ack = lfs->cfg->block_count;
 8004fd6:	6a13      	ldr	r3, [r2, #32]
    lfs->free.size = 0;
 8004fd8:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    lfs->free.i = 0;
 8004fdc:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
    lfs->free.ack = lfs->cfg->block_count;
 8004fe0:	6623      	str	r3, [r4, #96]	; 0x60
 8004fe2:	e7c8      	b.n	8004f76 <lfs_alloc+0x82>
                return 0;
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e7c6      	b.n	8004f76 <lfs_alloc+0x82>
 8004fe8:	08003729 	.word	0x08003729
 8004fec:	08007d9e 	.word	0x08007d9e
 8004ff0:	08007f20 	.word	0x08007f20
 8004ff4:	08007e14 	.word	0x08007e14

08004ff8 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8004ff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004ffa:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8004ffc:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8004ffe:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8005000:	f7ff ff78 	bl	8004ef4 <lfs_alloc>
        if (err) {
 8005004:	4605      	mov	r5, r0
 8005006:	bb40      	cbnz	r0, 800505a <lfs_dir_alloc+0x62>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8005008:	4621      	mov	r1, r4
 800500a:	4630      	mov	r0, r6
 800500c:	f7ff ff72 	bl	8004ef4 <lfs_alloc>
        if (err) {
 8005010:	4605      	mov	r5, r0
 8005012:	bb10      	cbnz	r0, 800505a <lfs_dir_alloc+0x62>
    dir->rev = 0;
 8005014:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
 8005016:	2304      	movs	r3, #4
    dir->rev = 0;
 8005018:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
 800501c:	9202      	str	r2, [sp, #8]
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	9001      	str	r0, [sp, #4]
 8005022:	9200      	str	r2, [sp, #0]
 8005024:	4601      	mov	r1, r0
 8005026:	9303      	str	r3, [sp, #12]
 8005028:	4632      	mov	r2, r6
 800502a:	f106 0068 	add.w	r0, r6, #104	; 0x68
 800502e:	f7fe fbfd 	bl	800382c <lfs_bd_read.isra.14>
    if (err && err != LFS_ERR_CORRUPT) {
 8005032:	b110      	cbz	r0, 800503a <lfs_dir_alloc+0x42>
 8005034:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005038:	d112      	bne.n	8005060 <lfs_dir_alloc+0x68>
    dir->rev += dir->rev & 1;
 800503a:	68a3      	ldr	r3, [r4, #8]
 800503c:	3301      	adds	r3, #1
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 8005044:	2304      	movs	r3, #4
    dir->etag = 0xffffffff;
 8005046:	f04f 32ff 	mov.w	r2, #4294967295
    dir->off = sizeof(dir->rev);
 800504a:	60e3      	str	r3, [r4, #12]
    dir->count = 0;
 800504c:	2300      	movs	r3, #0
    dir->etag = 0xffffffff;
 800504e:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 8005050:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8005052:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8005054:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 8005056:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 8005058:	75e3      	strb	r3, [r4, #23]
}
 800505a:	4628      	mov	r0, r5
 800505c:	b004      	add	sp, #16
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	4605      	mov	r5, r0
 8005062:	e7fa      	b.n	800505a <lfs_dir_alloc+0x62>

08005064 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                err = lfs_dir_getread(lfs, &file->m,
 8005068:	f8df b100 	ldr.w	fp, [pc, #256]	; 800516c <lfs_file_relocate+0x108>
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800506c:	b087      	sub	sp, #28
 800506e:	4604      	mov	r4, r0
 8005070:	460d      	mov	r5, r1
        int err = lfs_alloc(lfs, &nblock);
 8005072:	a905      	add	r1, sp, #20
 8005074:	4620      	mov	r0, r4
 8005076:	f7ff ff3d 	bl	8004ef4 <lfs_alloc>
        if (err) {
 800507a:	4606      	mov	r6, r0
 800507c:	bb40      	cbnz	r0, 80050d0 <lfs_file_relocate+0x6c>
 800507e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    int err = lfs->cfg->erase(lfs->cfg, block);
 8005080:	9905      	ldr	r1, [sp, #20]
 8005082:	68c3      	ldr	r3, [r0, #12]
 8005084:	4798      	blx	r3
        if (err) {
 8005086:	4606      	mov	r6, r0
 8005088:	b9f8      	cbnz	r0, 80050ca <lfs_file_relocate+0x66>
 800508a:	4607      	mov	r7, r0
 800508c:	f105 0a40 	add.w	sl, r5, #64	; 0x40
 8005090:	f04f 0801 	mov.w	r8, #1
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005094:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005096:	429f      	cmp	r7, r3
 8005098:	d31e      	bcc.n	80050d8 <lfs_file_relocate+0x74>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800509a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800509c:	69e1      	ldr	r1, [r4, #28]
 800509e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80050a2:	f001 fd2a 	bl	8006afa <memcpy>
        file->cache.block = lfs->pcache.block;
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	642b      	str	r3, [r5, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80050aa:	6963      	ldr	r3, [r4, #20]
 80050ac:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80050ae:	69a3      	ldr	r3, [r4, #24]
 80050b0:	64ab      	str	r3, [r5, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80050b2:	f104 0110 	add.w	r1, r4, #16
 80050b6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80050b8:	f7ff f92c 	bl	8004314 <lfs_cache_zero.isra.15>
        file->block = nblock;
 80050bc:	9b05      	ldr	r3, [sp, #20]
 80050be:	63ab      	str	r3, [r5, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80050c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80050c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c6:	632b      	str	r3, [r5, #48]	; 0x30
        return 0;
 80050c8:	e002      	b.n	80050d0 <lfs_file_relocate+0x6c>
            if (err == LFS_ERR_CORRUPT) {
 80050ca:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80050ce:	d03a      	beq.n	8005146 <lfs_file_relocate+0xe2>
}
 80050d0:	4630      	mov	r0, r6
 80050d2:	b007      	add	sp, #28
 80050d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
 80050d8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
                err = lfs_dir_getread(lfs, &file->m,
 80050da:	f8cd 800c 	str.w	r8, [sp, #12]
 80050de:	f10d 0913 	add.w	r9, sp, #19
            if (file->flags & LFS_F_INLINE) {
 80050e2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80050e6:	eba3 0307 	sub.w	r3, r3, r7
                err = lfs_dir_getread(lfs, &file->m,
 80050ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80050ee:	9701      	str	r7, [sp, #4]
            if (file->flags & LFS_F_INLINE) {
 80050f0:	d01e      	beq.n	8005130 <lfs_file_relocate+0xcc>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80050f2:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
 80050f4:	ea4b 2282 	orr.w	r2, fp, r2, lsl #10
 80050f8:	9200      	str	r2, [sp, #0]
 80050fa:	f105 0108 	add.w	r1, r5, #8
 80050fe:	4652      	mov	r2, sl
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff fa0d 	bl	8004520 <lfs_dir_getread.constprop.25>
                if (err) {
 8005106:	b988      	cbnz	r0, 800512c <lfs_file_relocate+0xc8>
            err = lfs_bd_prog(lfs,
 8005108:	9b05      	ldr	r3, [sp, #20]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005110:	f8cd 9008 	str.w	r9, [sp, #8]
 8005114:	9701      	str	r7, [sp, #4]
 8005116:	2301      	movs	r3, #1
 8005118:	4622      	mov	r2, r4
 800511a:	f104 0110 	add.w	r1, r4, #16
 800511e:	4620      	mov	r0, r4
 8005120:	f7ff face 	bl	80046c0 <lfs_bd_prog>
            if (err) {
 8005124:	b168      	cbz	r0, 8005142 <lfs_file_relocate+0xde>
                if (err == LFS_ERR_CORRUPT) {
 8005126:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800512a:	d00c      	beq.n	8005146 <lfs_file_relocate+0xe2>
                    return err;
 800512c:	4606      	mov	r6, r0
 800512e:	e7cf      	b.n	80050d0 <lfs_file_relocate+0x6c>
                err = lfs_bd_read(lfs,
 8005130:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005132:	9200      	str	r2, [sp, #0]
 8005134:	4651      	mov	r1, sl
 8005136:	4622      	mov	r2, r4
 8005138:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800513c:	f7fe fb76 	bl	800382c <lfs_bd_read.isra.14>
 8005140:	e7e1      	b.n	8005106 <lfs_file_relocate+0xa2>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005142:	3701      	adds	r7, #1
 8005144:	e7a6      	b.n	8005094 <lfs_file_relocate+0x30>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <lfs_file_relocate+0xfc>)
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	f640 224b 	movw	r2, #2635	; 0xa4b
 800514e:	9b05      	ldr	r3, [sp, #20]
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <lfs_file_relocate+0x100>)
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <lfs_file_relocate+0x104>)
 8005154:	f001 fd90 	bl	8006c78 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	6123      	str	r3, [r4, #16]
    while (true) {
 800515e:	e788      	b.n	8005072 <lfs_file_relocate+0xe>
 8005160:	08007d9e 	.word	0x08007d9e
 8005164:	08007f20 	.word	0x08007f20
 8005168:	08008111 	.word	0x08008111
 800516c:	20100000 	.word	0x20100000

08005170 <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
 8005174:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8005448 <lfs_file_write+0x2d8>
        const void *buffer, lfs_size_t size) {
 8005178:	460c      	mov	r4, r1
 800517a:	b08f      	sub	sp, #60	; 0x3c
 800517c:	4617      	mov	r7, r2
 800517e:	4698      	mov	r8, r3
 8005180:	4606      	mov	r6, r0
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
 8005182:	4603      	mov	r3, r0
 8005184:	e88d 0590 	stmia.w	sp, {r4, r7, r8, sl}
 8005188:	f640 323a 	movw	r2, #2874	; 0xb3a
 800518c:	49ab      	ldr	r1, [pc, #684]	; (800543c <lfs_file_write+0x2cc>)
 800518e:	48ac      	ldr	r0, [pc, #688]	; (8005440 <lfs_file_write+0x2d0>)
 8005190:	f001 fd72 	bl	8006c78 <iprintf>
    if (file->flags & LFS_F_READING) {
 8005194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005196:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800519a:	46d1      	mov	r9, sl
 800519c:	d00d      	beq.n	80051ba <lfs_file_write+0x4a>
        int err = lfs_file_flush(lfs, file);
 800519e:	4621      	mov	r1, r4
 80051a0:	4630      	mov	r0, r6
 80051a2:	f000 f9d7 	bl	8005554 <lfs_file_flush>
        if (err) {
 80051a6:	4605      	mov	r5, r0
 80051a8:	b138      	cbz	r0, 80051ba <lfs_file_write+0x4a>
            LFS_TRACE("lfs_file_write -> %d", err);
 80051aa:	f8cd a000 	str.w	sl, [sp]
 80051ae:	4603      	mov	r3, r0
 80051b0:	f640 3245 	movw	r2, #2885	; 0xb45
            LFS_TRACE("lfs_file_write -> %d", err);
 80051b4:	49a1      	ldr	r1, [pc, #644]	; (800543c <lfs_file_write+0x2cc>)
 80051b6:	48a3      	ldr	r0, [pc, #652]	; (8005444 <lfs_file_write+0x2d4>)
 80051b8:	e052      	b.n	8005260 <lfs_file_write+0xf0>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80051ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051bc:	051a      	lsls	r2, r3, #20
 80051be:	d504      	bpl.n	80051ca <lfs_file_write+0x5a>
 80051c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051c4:	4291      	cmp	r1, r2
        file->pos = file->ctz.size;
 80051c6:	bf38      	it	cc
 80051c8:	6362      	strcc	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
 80051ca:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 80051ce:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80051d0:	eb08 010a 	add.w	r1, r8, sl
 80051d4:	4291      	cmp	r1, r2
 80051d6:	d90f      	bls.n	80051f8 <lfs_file_write+0x88>
        LFS_TRACE("lfs_file_write -> %d", LFS_ERR_FBIG);
 80051d8:	f8cd 9000 	str.w	r9, [sp]
 80051dc:	f06f 031a 	mvn.w	r3, #26
 80051e0:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 80051e4:	4995      	ldr	r1, [pc, #596]	; (800543c <lfs_file_write+0x2cc>)
 80051e6:	4897      	ldr	r0, [pc, #604]	; (8005444 <lfs_file_write+0x2d4>)
 80051e8:	f001 fd46 	bl	8006c78 <iprintf>
        return LFS_ERR_FBIG;
 80051ec:	f06f 051a 	mvn.w	r5, #26
}
 80051f0:	4628      	mov	r0, r5
 80051f2:	b00f      	add	sp, #60	; 0x3c
 80051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80051f8:	f413 3b00 	ands.w	fp, r3, #131072	; 0x20000
 80051fc:	d017      	beq.n	800522e <lfs_file_write+0xbe>
    if ((file->flags & LFS_F_INLINE) &&
 80051fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005200:	02db      	lsls	r3, r3, #11
 8005202:	d430      	bmi.n	8005266 <lfs_file_write+0xf6>
            for (lfs_off_t i = 0; i < skips; i++) {
 8005204:	f8cd 8010 	str.w	r8, [sp, #16]
 8005208:	9705      	str	r7, [sp, #20]
    while (nsize > 0) {
 800520a:	9a04      	ldr	r2, [sp, #16]
 800520c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800520e:	2a00      	cmp	r2, #0
 8005210:	d14f      	bne.n	80052b2 <lfs_file_write+0x142>
    file->flags &= ~LFS_F_ERRED;
 8005212:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005216:	6323      	str	r3, [r4, #48]	; 0x30
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
 8005218:	4b8b      	ldr	r3, [pc, #556]	; (8005448 <lfs_file_write+0x2d8>)
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8005220:	4643      	mov	r3, r8
 8005222:	4986      	ldr	r1, [pc, #536]	; (800543c <lfs_file_write+0x2cc>)
 8005224:	4889      	ldr	r0, [pc, #548]	; (800544c <lfs_file_write+0x2dc>)
 8005226:	f001 fd27 	bl	8006c78 <iprintf>
    return size;
 800522a:	4645      	mov	r5, r8
 800522c:	e7e0      	b.n	80051f0 <lfs_file_write+0x80>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800522e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005230:	459a      	cmp	sl, r3
 8005232:	d9e4      	bls.n	80051fe <lfs_file_write+0x8e>
        file->pos = file->ctz.size;
 8005234:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
 8005236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005238:	459a      	cmp	sl, r3
 800523a:	d9e0      	bls.n	80051fe <lfs_file_write+0x8e>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
 800523c:	2301      	movs	r3, #1
 800523e:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8005242:	4621      	mov	r1, r4
 8005244:	4630      	mov	r0, r6
 8005246:	f88d b02b 	strb.w	fp, [sp, #43]	; 0x2b
 800524a:	f7ff ff91 	bl	8005170 <lfs_file_write>
            if (res < 0) {
 800524e:	1e05      	subs	r5, r0, #0
 8005250:	daf1      	bge.n	8005236 <lfs_file_write+0xc6>
                LFS_TRACE("lfs_file_write -> %"PRId32, res);
 8005252:	497a      	ldr	r1, [pc, #488]	; (800543c <lfs_file_write+0x2cc>)
 8005254:	487d      	ldr	r0, [pc, #500]	; (800544c <lfs_file_write+0x2dc>)
 8005256:	f8cd 9000 	str.w	r9, [sp]
 800525a:	462b      	mov	r3, r5
 800525c:	f640 325c 	movw	r2, #2908	; 0xb5c
            LFS_TRACE("lfs_file_write -> %d", err);
 8005260:	f001 fd0a 	bl	8006c78 <iprintf>
            return err;
 8005264:	e7c4      	b.n	80051f0 <lfs_file_write+0x80>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005266:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800526a:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            lfs_max(file->pos+nsize, file->ctz.size) >
 800526c:	eb08 0105 	add.w	r1, r8, r5
    return (a < b) ? a : b;
 8005270:	6a90      	ldr	r0, [r2, #40]	; 0x28
    return (a > b) ? a : b;
 8005272:	4299      	cmp	r1, r3
 8005274:	bf38      	it	cc
 8005276:	4619      	movcc	r1, r3
    return (a < b) ? a : b;
 8005278:	f240 3efe 	movw	lr, #1022	; 0x3fe
            lfs_min(0x3fe, lfs_min(
 800527c:	69d3      	ldr	r3, [r2, #28]
 800527e:	4570      	cmp	r0, lr
 8005280:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005284:	bf28      	it	cs
 8005286:	4670      	movcs	r0, lr
 8005288:	4283      	cmp	r3, r0
 800528a:	bf28      	it	cs
 800528c:	4603      	movcs	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800528e:	4299      	cmp	r1, r3
 8005290:	d9b8      	bls.n	8005204 <lfs_file_write+0x94>
    lfs->free.ack = lfs->cfg->block_count;
 8005292:	6a13      	ldr	r3, [r2, #32]
    file->off = file->pos;
 8005294:	63e5      	str	r5, [r4, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
 8005296:	4621      	mov	r1, r4
    lfs->free.ack = lfs->cfg->block_count;
 8005298:	6633      	str	r3, [r6, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
 800529a:	4630      	mov	r0, r6
 800529c:	f7ff fee2 	bl	8005064 <lfs_file_relocate>
 80052a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if (err) {
 80052a2:	4605      	mov	r5, r0
 80052a4:	2800      	cmp	r0, #0
 80052a6:	f040 8145 	bne.w	8005534 <lfs_file_write+0x3c4>
    file->flags &= ~LFS_F_INLINE;
 80052aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052ae:	6323      	str	r3, [r4, #48]	; 0x30
 80052b0:	e7a8      	b.n	8005204 <lfs_file_write+0x94>
        if (!(file->flags & LFS_F_WRITING) ||
 80052b2:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
 80052b6:	d004      	beq.n	80052c2 <lfs_file_write+0x152>
                file->off == lfs->cfg->block_size) {
 80052b8:	6eb1      	ldr	r1, [r6, #104]	; 0x68
        if (!(file->flags & LFS_F_WRITING) ||
 80052ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80052bc:	69c9      	ldr	r1, [r1, #28]
 80052be:	4288      	cmp	r0, r1
 80052c0:	d152      	bne.n	8005368 <lfs_file_write+0x1f8>
            if (!(file->flags & LFS_F_INLINE)) {
 80052c2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80052c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052c8:	f040 810f 	bne.w	80054ea <lfs_file_write+0x37a>
 80052cc:	f104 0b40 	add.w	fp, r4, #64	; 0x40
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80052d0:	b9f2      	cbnz	r2, 8005310 <lfs_file_write+0x1a0>
 80052d2:	b1eb      	cbz	r3, 8005310 <lfs_file_write+0x1a0>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80052d4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80052d8:	9202      	str	r2, [sp, #8]
 80052da:	3b01      	subs	r3, #1
 80052dc:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80052e0:	9201      	str	r2, [sp, #4]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80052e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052e8:	4659      	mov	r1, fp
 80052ea:	4630      	mov	r0, r6
 80052ec:	f7ff f8cd 	bl	800448a <lfs_ctz_find.constprop.24>
                    if (err) {
 80052f0:	4605      	mov	r5, r0
 80052f2:	b148      	cbz	r0, 8005308 <lfs_file_write+0x198>
                        file->flags |= LFS_F_ERRED;
 80052f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052fa:	6323      	str	r3, [r4, #48]	; 0x30
                        LFS_TRACE("lfs_file_write -> %d", err);
 80052fc:	4b52      	ldr	r3, [pc, #328]	; (8005448 <lfs_file_write+0x2d8>)
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	f640 327b 	movw	r2, #2939	; 0xb7b
 8005304:	4603      	mov	r3, r0
 8005306:	e755      	b.n	80051b4 <lfs_file_write+0x44>
                    lfs_cache_zero(lfs, &file->cache);
 8005308:	4659      	mov	r1, fp
 800530a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800530c:	f7ff f802 	bl	8004314 <lfs_cache_zero.isra.15>
    lfs->free.ack = lfs->cfg->block_count;
 8005310:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	6633      	str	r3, [r6, #96]	; 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005318:	9307      	str	r3, [sp, #28]
 800531a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800531c:	9306      	str	r3, [sp, #24]
        int err = lfs_alloc(lfs, &nblock);
 800531e:	a90b      	add	r1, sp, #44	; 0x2c
 8005320:	4630      	mov	r0, r6
 8005322:	f7ff fde7 	bl	8004ef4 <lfs_alloc>
        if (err) {
 8005326:	4605      	mov	r5, r0
 8005328:	b948      	cbnz	r0, 800533e <lfs_file_write+0x1ce>
 800532a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    int err = lfs->cfg->erase(lfs->cfg, block);
 800532c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800532e:	68c3      	ldr	r3, [r0, #12]
 8005330:	4798      	blx	r3
            if (err) {
 8005332:	4605      	mov	r5, r0
 8005334:	b168      	cbz	r0, 8005352 <lfs_file_write+0x1e2>
                    if (err == LFS_ERR_CORRUPT) {
 8005336:	f115 0f54 	cmn.w	r5, #84	; 0x54
 800533a:	f000 80c9 	beq.w	80054d0 <lfs_file_write+0x360>
                    file->flags |= LFS_F_ERRED;
 800533e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005344:	6323      	str	r3, [r4, #48]	; 0x30
                    LFS_TRACE("lfs_file_write -> %d", err);
 8005346:	4b40      	ldr	r3, [pc, #256]	; (8005448 <lfs_file_write+0x2d8>)
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	f640 328a 	movw	r2, #2954	; 0xb8a
 800534e:	462b      	mov	r3, r5
 8005350:	e730      	b.n	80051b4 <lfs_file_write+0x44>
            if (size == 0) {
 8005352:	9b06      	ldr	r3, [sp, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d130      	bne.n	80053ba <lfs_file_write+0x24a>
                *block = nblock;
 8005358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800535a:	63a3      	str	r3, [r4, #56]	; 0x38
                *off = 0;
 800535c:	9b06      	ldr	r3, [sp, #24]
                file->off = file->pos;
 800535e:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
 8005360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005366:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005368:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800536a:	69df      	ldr	r7, [r3, #28]
 800536c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800536e:	1aff      	subs	r7, r7, r3
 8005370:	9b04      	ldr	r3, [sp, #16]
 8005372:	429f      	cmp	r7, r3
 8005374:	bf28      	it	cs
 8005376:	461f      	movcs	r7, r3
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005378:	f104 0940 	add.w	r9, r4, #64	; 0x40
 800537c:	9b05      	ldr	r3, [sp, #20]
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	9703      	str	r7, [sp, #12]
 800538a:	2301      	movs	r3, #1
 800538c:	4632      	mov	r2, r6
 800538e:	4649      	mov	r1, r9
 8005390:	4630      	mov	r0, r6
 8005392:	f7ff f995 	bl	80046c0 <lfs_bd_prog>
            if (err) {
 8005396:	4605      	mov	r5, r0
 8005398:	2800      	cmp	r0, #0
 800539a:	f000 80bb 	beq.w	8005514 <lfs_file_write+0x3a4>
                if (err == LFS_ERR_CORRUPT) {
 800539e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80053a2:	f000 80a5 	beq.w	80054f0 <lfs_file_write+0x380>
                file->flags |= LFS_F_ERRED;
 80053a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ac:	6323      	str	r3, [r4, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %d", err);
 80053ae:	4b26      	ldr	r3, [pc, #152]	; (8005448 <lfs_file_write+0x2d8>)
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	f640 329f 	movw	r2, #2975	; 0xb9f
 80053b6:	4603      	mov	r3, r0
 80053b8:	e6fc      	b.n	80051b4 <lfs_file_write+0x44>
            lfs_size_t noff = size - 1;
 80053ba:	9b06      	ldr	r3, [sp, #24]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80053bc:	6eb0      	ldr	r0, [r6, #104]	; 0x68
            lfs_size_t noff = size - 1;
 80053be:	a90e      	add	r1, sp, #56	; 0x38
 80053c0:	3b01      	subs	r3, #1
 80053c2:	f841 3d08 	str.w	r3, [r1, #-8]!
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80053c6:	f7ff f809 	bl	80043dc <lfs_ctz_index.isra.17>
            if (noff != lfs->cfg->block_size) {
 80053ca:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            noff = noff + 1;
 80053cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if (noff != lfs->cfg->block_size) {
 80053ce:	69d2      	ldr	r2, [r2, #28]
            noff = noff + 1;
 80053d0:	3301      	adds	r3, #1
            if (noff != lfs->cfg->block_size) {
 80053d2:	4293      	cmp	r3, r2
            noff = noff + 1;
 80053d4:	930c      	str	r3, [sp, #48]	; 0x30
            if (noff != lfs->cfg->block_size) {
 80053d6:	d03b      	beq.n	8005450 <lfs_file_write+0x2e0>
                    err = lfs_bd_read(lfs,
 80053d8:	f106 0368 	add.w	r3, r6, #104	; 0x68
            if (noff != lfs->cfg->block_size) {
 80053dc:	46a9      	mov	r9, r5
                    err = lfs_bd_read(lfs,
 80053de:	9308      	str	r3, [sp, #32]
 80053e0:	f04f 0a01 	mov.w	sl, #1
 80053e4:	af0d      	add	r7, sp, #52	; 0x34
                for (lfs_off_t i = 0; i < noff; i++) {
 80053e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053e8:	454b      	cmp	r3, r9
 80053ea:	d802      	bhi.n	80053f2 <lfs_file_write+0x282>
                *block = nblock;
 80053ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                file->block = LFS_BLOCK_INLINE;
 80053ee:	63a2      	str	r2, [r4, #56]	; 0x38
 80053f0:	e7b5      	b.n	800535e <lfs_file_write+0x1ee>
                    err = lfs_bd_read(lfs,
 80053f2:	9a07      	ldr	r2, [sp, #28]
 80053f4:	9200      	str	r2, [sp, #0]
 80053f6:	f8cd a00c 	str.w	sl, [sp, #12]
 80053fa:	9702      	str	r7, [sp, #8]
 80053fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005400:	eba3 0309 	sub.w	r3, r3, r9
 8005404:	4632      	mov	r2, r6
 8005406:	2100      	movs	r1, #0
 8005408:	9808      	ldr	r0, [sp, #32]
 800540a:	f7fe fa0f 	bl	800382c <lfs_bd_read.isra.14>
                    if (err) {
 800540e:	4605      	mov	r5, r0
 8005410:	2800      	cmp	r0, #0
 8005412:	d194      	bne.n	800533e <lfs_file_write+0x1ce>
                    err = lfs_bd_prog(lfs,
 8005414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	f8cd a00c 	str.w	sl, [sp, #12]
 800541c:	9702      	str	r7, [sp, #8]
 800541e:	f8cd 9004 	str.w	r9, [sp, #4]
 8005422:	2301      	movs	r3, #1
 8005424:	4632      	mov	r2, r6
 8005426:	4659      	mov	r1, fp
 8005428:	4630      	mov	r0, r6
 800542a:	f7ff f949 	bl	80046c0 <lfs_bd_prog>
                    if (err) {
 800542e:	4605      	mov	r5, r0
 8005430:	2800      	cmp	r0, #0
 8005432:	d180      	bne.n	8005336 <lfs_file_write+0x1c6>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005434:	f109 0901 	add.w	r9, r9, #1
 8005438:	e7d5      	b.n	80053e6 <lfs_file_write+0x276>
 800543a:	bf00      	nop
 800543c:	08007f20 	.word	0x08007f20
 8005440:	08008301 	.word	0x08008301
 8005444:	08008331 	.word	0x08008331
 8005448:	08007d9e 	.word	0x08007d9e
 800544c:	08008356 	.word	0x08008356
            index += 1;
 8005450:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 8005452:	fa90 f0a0 	rbit	r0, r0
 8005456:	fab0 f380 	clz	r3, r0
            lfs_block_t nhead = head;
 800545a:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 800545e:	9308      	str	r3, [sp, #32]
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005460:	f103 0a01 	add.w	sl, r3, #1
            lfs_block_t nhead = head;
 8005464:	9b07      	ldr	r3, [sp, #28]
 8005466:	f849 3d04 	str.w	r3, [r9, #-4]!
            for (lfs_off_t i = 0; i < skips; i++) {
 800546a:	462f      	mov	r7, r5
 800546c:	00bb      	lsls	r3, r7, #2
 800546e:	9309      	str	r3, [sp, #36]	; 0x24
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8005470:	2304      	movs	r3, #4
 8005472:	9303      	str	r3, [sp, #12]
 8005474:	00bb      	lsls	r3, r7, #2
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005480:	2301      	movs	r3, #1
 8005482:	4632      	mov	r2, r6
 8005484:	4659      	mov	r1, fp
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff f91a 	bl	80046c0 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 800548c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (err) {
 800548e:	4605      	mov	r5, r0
 8005490:	2800      	cmp	r0, #0
 8005492:	f47f af50 	bne.w	8005336 <lfs_file_write+0x1c6>
                if (i != skips-1) {
 8005496:	9a08      	ldr	r2, [sp, #32]
 8005498:	42ba      	cmp	r2, r7
 800549a:	d107      	bne.n	80054ac <lfs_file_write+0x33c>
            for (lfs_off_t i = 0; i < skips; i++) {
 800549c:	3701      	adds	r7, #1
 800549e:	45ba      	cmp	sl, r7
 80054a0:	d8e4      	bhi.n	800546c <lfs_file_write+0x2fc>
            *block = nblock;
 80054a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054a4:	63a3      	str	r3, [r4, #56]	; 0x38
            *off = 4*skips;
 80054a6:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80054aa:	e758      	b.n	800535e <lfs_file_write+0x1ee>
                    err = lfs_bd_read(lfs,
 80054ac:	2204      	movs	r2, #4
 80054ae:	9203      	str	r2, [sp, #12]
 80054b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054b2:	9201      	str	r2, [sp, #4]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4601      	mov	r1, r0
 80054b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80054bc:	2304      	movs	r3, #4
 80054be:	4632      	mov	r2, r6
 80054c0:	f106 0068 	add.w	r0, r6, #104	; 0x68
 80054c4:	f7fe f9b2 	bl	800382c <lfs_bd_read.isra.14>
                    if (err) {
 80054c8:	4605      	mov	r5, r0
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d0e6      	beq.n	800549c <lfs_file_write+0x32c>
 80054ce:	e736      	b.n	800533e <lfs_file_write+0x1ce>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <lfs_file_write+0x3d8>)
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	f640 121b 	movw	r2, #2331	; 0x91b
 80054d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054da:	491c      	ldr	r1, [pc, #112]	; (800554c <lfs_file_write+0x3dc>)
 80054dc:	481c      	ldr	r0, [pc, #112]	; (8005550 <lfs_file_write+0x3e0>)
 80054de:	f001 fbcb 	bl	8006c78 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
 80054e6:	6423      	str	r3, [r4, #64]	; 0x40
 80054e8:	e719      	b.n	800531e <lfs_file_write+0x1ae>
                file->block = LFS_BLOCK_INLINE;
 80054ea:	f06f 0201 	mvn.w	r2, #1
 80054ee:	e77e      	b.n	80053ee <lfs_file_write+0x27e>
            err = lfs_file_relocate(lfs, file);
 80054f0:	4621      	mov	r1, r4
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff fdb6 	bl	8005064 <lfs_file_relocate>
            if (err) {
 80054f8:	4605      	mov	r5, r0
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f43f af3e 	beq.w	800537c <lfs_file_write+0x20c>
                file->flags |= LFS_F_ERRED;
 8005500:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005506:	6323      	str	r3, [r4, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %d", err);
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <lfs_file_write+0x3d8>)
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	f640 32a8 	movw	r2, #2984	; 0xba8
 8005510:	4603      	mov	r3, r0
 8005512:	e64f      	b.n	80051b4 <lfs_file_write+0x44>
        file->pos += diff;
 8005514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005516:	443b      	add	r3, r7
 8005518:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800551a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800551c:	443b      	add	r3, r7
 800551e:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 8005520:	9b05      	ldr	r3, [sp, #20]
 8005522:	443b      	add	r3, r7
 8005524:	9305      	str	r3, [sp, #20]
        nsize -= diff;
 8005526:	9b04      	ldr	r3, [sp, #16]
 8005528:	1bdb      	subs	r3, r3, r7
 800552a:	9304      	str	r3, [sp, #16]
    lfs->free.ack = lfs->cfg->block_count;
 800552c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	6633      	str	r3, [r6, #96]	; 0x60
 8005532:	e66a      	b.n	800520a <lfs_file_write+0x9a>
            file->flags |= LFS_F_ERRED;
 8005534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005538:	6323      	str	r3, [r4, #48]	; 0x30
            LFS_TRACE("lfs_file_write -> %d", err);
 800553a:	f8cd 9000 	str.w	r9, [sp]
 800553e:	4603      	mov	r3, r0
 8005540:	f640 326a 	movw	r2, #2922	; 0xb6a
 8005544:	e636      	b.n	80051b4 <lfs_file_write+0x44>
 8005546:	bf00      	nop
 8005548:	08007d9e 	.word	0x08007d9e
 800554c:	08007f20 	.word	0x08007f20
 8005550:	08008111 	.word	0x08008111

08005554 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (file->flags & LFS_F_READING) {
 8005558:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800555a:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 800555c:	0359      	lsls	r1, r3, #13
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800555e:	b099      	sub	sp, #100	; 0x64
 8005560:	4605      	mov	r5, r0
    if (file->flags & LFS_F_READING) {
 8005562:	d508      	bpl.n	8005576 <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 8005564:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
 8005566:	bf58      	it	pl
 8005568:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
 800556c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    rcache->block = LFS_BLOCK_NULL;
 8005570:	bf58      	it	pl
 8005572:	6422      	strpl	r2, [r4, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
 8005574:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
 8005576:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005578:	f411 3000 	ands.w	r0, r1, #131072	; 0x20000
 800557c:	d039      	beq.n	80055f2 <lfs_file_flush+0x9e>
        if (!(file->flags & LFS_F_INLINE)) {
 800557e:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
        lfs_off_t pos = file->pos;
 8005582:	6b66      	ldr	r6, [r4, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 8005584:	d14f      	bne.n	8005626 <lfs_file_flush+0xd2>
            lfs_file_t orig = {
 8005586:	2254      	movs	r2, #84	; 0x54
 8005588:	a803      	add	r0, sp, #12
 800558a:	f001 fac1 	bl	8006b10 <memset>
 800558e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005590:	930d      	str	r3, [sp, #52]	; 0x34
 8005592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005594:	930e      	str	r3, [sp, #56]	; 0x38
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <lfs_file_flush+0xf8>)
 8005598:	930f      	str	r3, [sp, #60]	; 0x3c
 800559a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800559e:	af13      	add	r7, sp, #76	; 0x4c
 80055a0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80055a4:	9610      	str	r6, [sp, #64]	; 0x40
    rcache->block = LFS_BLOCK_NULL;
 80055a6:	f04f 37ff 	mov.w	r7, #4294967295
 80055aa:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
 80055ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80055ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d321      	bcc.n	80055f8 <lfs_file_flush+0xa4>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80055b4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8005654 <lfs_file_flush+0x100>
 80055b8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8005658 <lfs_file_flush+0x104>
 80055bc:	4f24      	ldr	r7, [pc, #144]	; (8005650 <lfs_file_flush+0xfc>)
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80055be:	2301      	movs	r3, #1
 80055c0:	462a      	mov	r2, r5
 80055c2:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7ff f839 	bl	800463e <lfs_bd_flush>
                if (err) {
 80055cc:	b380      	cbz	r0, 8005630 <lfs_file_flush+0xdc>
                    if (err == LFS_ERR_CORRUPT) {
 80055ce:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80055d2:	d10e      	bne.n	80055f2 <lfs_file_flush+0x9e>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80055d4:	4641      	mov	r1, r8
 80055d6:	f8cd 9000 	str.w	r9, [sp]
 80055da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055dc:	f640 2298 	movw	r2, #2712	; 0xa98
 80055e0:	4638      	mov	r0, r7
 80055e2:	f001 fb49 	bl	8006c78 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80055e6:	4621      	mov	r1, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f7ff fd3b 	bl	8005064 <lfs_file_relocate>
                if (err) {
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d0e5      	beq.n	80055be <lfs_file_flush+0x6a>
}
 80055f2:	b019      	add	sp, #100	; 0x64
 80055f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
 80055f8:	2301      	movs	r3, #1
 80055fa:	f10d 020b 	add.w	r2, sp, #11
 80055fe:	a903      	add	r1, sp, #12
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f82b 	bl	800565c <lfs_file_read>
                if (res < 0) {
 8005606:	2800      	cmp	r0, #0
 8005608:	dbf3      	blt.n	80055f2 <lfs_file_flush+0x9e>
                res = lfs_file_write(lfs, file, &data, 1);
 800560a:	2301      	movs	r3, #1
 800560c:	f10d 020b 	add.w	r2, sp, #11
 8005610:	4621      	mov	r1, r4
 8005612:	4628      	mov	r0, r5
 8005614:	f7ff fdac 	bl	8005170 <lfs_file_write>
                if (res < 0) {
 8005618:	2800      	cmp	r0, #0
 800561a:	dbea      	blt.n	80055f2 <lfs_file_flush+0x9e>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	d0c4      	beq.n	80055ac <lfs_file_flush+0x58>
    rcache->block = LFS_BLOCK_NULL;
 8005622:	9713      	str	r7, [sp, #76]	; 0x4c
 8005624:	e7c1      	b.n	80055aa <lfs_file_flush+0x56>
    return (a > b) ? a : b;
 8005626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005628:	42b3      	cmp	r3, r6
 800562a:	bf2c      	ite	cs
 800562c:	6363      	strcs	r3, [r4, #52]	; 0x34
 800562e:	6366      	strcc	r6, [r4, #52]	; 0x34
        file->ctz.head = file->block;
 8005630:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005632:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
 8005634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005636:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005638:	6b23      	ldr	r3, [r4, #48]	; 0x30
        file->pos = pos;
 800563a:	6366      	str	r6, [r4, #52]	; 0x34
        file->flags &= ~LFS_F_WRITING;
 800563c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
 8005640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005644:	6323      	str	r3, [r4, #48]	; 0x30
    return 0;
 8005646:	2000      	movs	r0, #0
 8005648:	e7d3      	b.n	80055f2 <lfs_file_flush+0x9e>
 800564a:	bf00      	nop
 800564c:	00200001 	.word	0x00200001
 8005650:	08008111 	.word	0x08008111
 8005654:	08007d9e 	.word	0x08007d9e
 8005658:	08007f20 	.word	0x08007f20

0800565c <lfs_file_read>:
        void *buffer, lfs_size_t size) {
 800565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005660:	b087      	sub	sp, #28
 8005662:	460c      	mov	r4, r1
 8005664:	4616      	mov	r6, r2
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
 8005666:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80057ec <lfs_file_read+0x190>
 800566a:	9302      	str	r3, [sp, #8]
        void *buffer, lfs_size_t size) {
 800566c:	4607      	mov	r7, r0
 800566e:	461d      	mov	r5, r3
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
 8005670:	f8cd 900c 	str.w	r9, [sp, #12]
 8005674:	4603      	mov	r3, r0
 8005676:	e88d 0050 	stmia.w	sp, {r4, r6}
 800567a:	f640 22ea 	movw	r2, #2794	; 0xaea
 800567e:	4956      	ldr	r1, [pc, #344]	; (80057d8 <lfs_file_read+0x17c>)
 8005680:	4856      	ldr	r0, [pc, #344]	; (80057dc <lfs_file_read+0x180>)
 8005682:	f001 faf9 	bl	8006c78 <iprintf>
    if (file->flags & LFS_F_WRITING) {
 8005686:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005688:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800568c:	46c8      	mov	r8, r9
 800568e:	d00f      	beq.n	80056b0 <lfs_file_read+0x54>
        int err = lfs_file_flush(lfs, file);
 8005690:	4621      	mov	r1, r4
 8005692:	4638      	mov	r0, r7
 8005694:	f7ff ff5e 	bl	8005554 <lfs_file_flush>
        if (err) {
 8005698:	4683      	mov	fp, r0
 800569a:	b148      	cbz	r0, 80056b0 <lfs_file_read+0x54>
            LFS_TRACE("lfs_file_read -> %d", err);
 800569c:	f8cd 9000 	str.w	r9, [sp]
 80056a0:	4603      	mov	r3, r0
 80056a2:	f640 22f5 	movw	r2, #2805	; 0xaf5
                LFS_TRACE("lfs_file_read -> %d", err);
 80056a6:	494c      	ldr	r1, [pc, #304]	; (80057d8 <lfs_file_read+0x17c>)
 80056a8:	484d      	ldr	r0, [pc, #308]	; (80057e0 <lfs_file_read+0x184>)
 80056aa:	f001 fae5 	bl	8006c78 <iprintf>
                return err;
 80056ae:	e00e      	b.n	80056ce <lfs_file_read+0x72>
    if (file->pos >= file->ctz.size) {
 80056b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80056b4:	4283      	cmp	r3, r0
 80056b6:	d30e      	bcc.n	80056d6 <lfs_file_read+0x7a>
        LFS_TRACE("lfs_file_read -> %d", 0);
 80056b8:	f8cd 8000 	str.w	r8, [sp]
 80056bc:	2300      	movs	r3, #0
 80056be:	f640 22fc 	movw	r2, #2812	; 0xafc
 80056c2:	4945      	ldr	r1, [pc, #276]	; (80057d8 <lfs_file_read+0x17c>)
 80056c4:	4846      	ldr	r0, [pc, #280]	; (80057e0 <lfs_file_read+0x184>)
 80056c6:	f001 fad7 	bl	8006c78 <iprintf>
        return 0;
 80056ca:	f04f 0b00 	mov.w	fp, #0
}
 80056ce:	4658      	mov	r0, fp
 80056d0:	b007      	add	sp, #28
 80056d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size = lfs_min(size, file->ctz.size - file->pos);
 80056d6:	eba0 0b03 	sub.w	fp, r0, r3
    return (a < b) ? a : b;
 80056da:	45ab      	cmp	fp, r5
 80056dc:	465b      	mov	r3, fp
 80056de:	bf28      	it	cs
 80056e0:	462b      	movcs	r3, r5
 80056e2:	9305      	str	r3, [sp, #20]
    nsize = size;
 80056e4:	4699      	mov	r9, r3
 80056e6:	f104 0a40 	add.w	sl, r4, #64	; 0x40
    while (nsize > 0) {
 80056ea:	f1b9 0f00 	cmp.w	r9, #0
 80056ee:	d10b      	bne.n	8005708 <lfs_file_read+0xac>
    LFS_TRACE("lfs_file_read -> %"PRId32, size);
 80056f0:	f8cd 8000 	str.w	r8, [sp]
 80056f4:	9b05      	ldr	r3, [sp, #20]
 80056f6:	4938      	ldr	r1, [pc, #224]	; (80057d8 <lfs_file_read+0x17c>)
 80056f8:	483a      	ldr	r0, [pc, #232]	; (80057e4 <lfs_file_read+0x188>)
 80056fa:	f640 3233 	movw	r2, #2867	; 0xb33
 80056fe:	f001 fabb 	bl	8006c78 <iprintf>
    return size;
 8005702:	f8dd b014 	ldr.w	fp, [sp, #20]
 8005706:	e7e2      	b.n	80056ce <lfs_file_read+0x72>
        if (!(file->flags & LFS_F_READING) ||
 8005708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800570a:	035a      	lsls	r2, r3, #13
 800570c:	d504      	bpl.n	8005718 <lfs_file_read+0xbc>
                file->off == lfs->cfg->block_size) {
 800570e:	6eba      	ldr	r2, [r7, #104]	; 0x68
        if (!(file->flags & LFS_F_READING) ||
 8005710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005712:	69d2      	ldr	r2, [r2, #28]
 8005714:	4291      	cmp	r1, r2
 8005716:	d125      	bne.n	8005764 <lfs_file_read+0x108>
            if (!(file->flags & LFS_F_INLINE)) {
 8005718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800571c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800571e:	d119      	bne.n	8005754 <lfs_file_read+0xf8>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005720:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8005724:	9202      	str	r2, [sp, #8]
 8005726:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800572a:	9201      	str	r2, [sp, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005732:	4651      	mov	r1, sl
 8005734:	4638      	mov	r0, r7
 8005736:	f7fe fea8 	bl	800448a <lfs_ctz_find.constprop.24>
                if (err) {
 800573a:	4605      	mov	r5, r0
 800573c:	b170      	cbz	r0, 800575c <lfs_file_read+0x100>
                    LFS_TRACE("lfs_file_read -> %d", err);
 800573e:	4603      	mov	r3, r0
 8005740:	f8cd 8000 	str.w	r8, [sp]
 8005744:	f640 320c 	movw	r2, #2828	; 0xb0c
 8005748:	4923      	ldr	r1, [pc, #140]	; (80057d8 <lfs_file_read+0x17c>)
 800574a:	4825      	ldr	r0, [pc, #148]	; (80057e0 <lfs_file_read+0x184>)
 800574c:	f001 fa94 	bl	8006c78 <iprintf>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005750:	46ab      	mov	fp, r5
                    return err;
 8005752:	e7bc      	b.n	80056ce <lfs_file_read+0x72>
                file->block = LFS_BLOCK_INLINE;
 8005754:	f06f 0201 	mvn.w	r2, #1
 8005758:	63a2      	str	r2, [r4, #56]	; 0x38
                file->off = file->pos;
 800575a:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
 800575c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800575e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005762:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005766:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005768:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
 800576a:	6b21      	ldr	r1, [r4, #48]	; 0x30
            int err = lfs_dir_getread(lfs, &file->m,
 800576c:	9602      	str	r6, [sp, #8]
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800576e:	1a9d      	subs	r5, r3, r2
 8005770:	454d      	cmp	r5, r9
 8005772:	bf28      	it	cs
 8005774:	464d      	movcs	r5, r9
        if (file->flags & LFS_F_INLINE) {
 8005776:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
            int err = lfs_dir_getread(lfs, &file->m,
 800577a:	9503      	str	r5, [sp, #12]
 800577c:	9201      	str	r2, [sp, #4]
        if (file->flags & LFS_F_INLINE) {
 800577e:	d012      	beq.n	80057a6 <lfs_file_read+0x14a>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005780:	88a2      	ldrh	r2, [r4, #4]
            int err = lfs_dir_getread(lfs, &file->m,
 8005782:	4919      	ldr	r1, [pc, #100]	; (80057e8 <lfs_file_read+0x18c>)
 8005784:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8005788:	9200      	str	r2, [sp, #0]
 800578a:	f104 0108 	add.w	r1, r4, #8
 800578e:	4652      	mov	r2, sl
 8005790:	4638      	mov	r0, r7
 8005792:	f7fe fec5 	bl	8004520 <lfs_dir_getread.constprop.25>
            if (err) {
 8005796:	4683      	mov	fp, r0
 8005798:	b1a0      	cbz	r0, 80057c4 <lfs_file_read+0x168>
                LFS_TRACE("lfs_file_read -> %d", err);
 800579a:	f8cd 8000 	str.w	r8, [sp]
 800579e:	4603      	mov	r3, r0
 80057a0:	f44f 6232 	mov.w	r2, #2848	; 0xb20
 80057a4:	e77f      	b.n	80056a6 <lfs_file_read+0x4a>
            int err = lfs_bd_read(lfs,
 80057a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057a8:	9200      	str	r2, [sp, #0]
 80057aa:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80057ae:	4652      	mov	r2, sl
 80057b0:	f7fe f83c 	bl	800382c <lfs_bd_read.isra.14>
            if (err) {
 80057b4:	4683      	mov	fp, r0
 80057b6:	b128      	cbz	r0, 80057c4 <lfs_file_read+0x168>
                LFS_TRACE("lfs_file_read -> %d", err);
 80057b8:	f8cd 8000 	str.w	r8, [sp]
 80057bc:	4603      	mov	r3, r0
 80057be:	f640 3228 	movw	r2, #2856	; 0xb28
 80057c2:	e770      	b.n	80056a6 <lfs_file_read+0x4a>
        file->pos += diff;
 80057c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057c6:	442b      	add	r3, r5
 80057c8:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 80057ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057cc:	442b      	add	r3, r5
 80057ce:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 80057d0:	442e      	add	r6, r5
        nsize -= diff;
 80057d2:	eba9 0905 	sub.w	r9, r9, r5
 80057d6:	e788      	b.n	80056ea <lfs_file_read+0x8e>
 80057d8:	08007f20 	.word	0x08007f20
 80057dc:	08008099 	.word	0x08008099
 80057e0:	080080c8 	.word	0x080080c8
 80057e4:	080080ec 	.word	0x080080ec
 80057e8:	20100000 	.word	0x20100000
 80057ec:	08007d9e 	.word	0x08007d9e

080057f0 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
 80057f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
 80057f4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8005894 <lfs_file_seek+0xa4>
        lfs_soff_t off, int whence) {
 80057f8:	b085      	sub	sp, #20
 80057fa:	460d      	mov	r5, r1
 80057fc:	4616      	mov	r6, r2
 80057fe:	461f      	mov	r7, r3
 8005800:	4680      	mov	r8, r0
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
 8005802:	4603      	mov	r3, r0
 8005804:	f640 32bd 	movw	r2, #3005	; 0xbbd
 8005808:	491e      	ldr	r1, [pc, #120]	; (8005884 <lfs_file_seek+0x94>)
 800580a:	481f      	ldr	r0, [pc, #124]	; (8005888 <lfs_file_seek+0x98>)
 800580c:	e88d 02e0 	stmia.w	sp, {r5, r6, r7, r9}
 8005810:	f001 fa32 	bl	8006c78 <iprintf>
    int err = lfs_file_flush(lfs, file);
 8005814:	4629      	mov	r1, r5
 8005816:	4640      	mov	r0, r8
 8005818:	f7ff fe9c 	bl	8005554 <lfs_file_flush>
 800581c:	464b      	mov	r3, r9
    if (err) {
 800581e:	4604      	mov	r4, r0
 8005820:	b150      	cbz	r0, 8005838 <lfs_file_seek+0x48>
        LFS_TRACE("lfs_file_seek -> %d", err);
 8005822:	4603      	mov	r3, r0
 8005824:	4917      	ldr	r1, [pc, #92]	; (8005884 <lfs_file_seek+0x94>)
 8005826:	4819      	ldr	r0, [pc, #100]	; (800588c <lfs_file_seek+0x9c>)
 8005828:	f8cd 9000 	str.w	r9, [sp]
 800582c:	f640 32c3 	movw	r2, #3011	; 0xbc3
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
 8005830:	f001 fa22 	bl	8006c78 <iprintf>
    return npos;
 8005834:	4620      	mov	r0, r4
 8005836:	e010      	b.n	800585a <lfs_file_seek+0x6a>
    if (whence == LFS_SEEK_SET) {
 8005838:	b997      	cbnz	r7, 8005860 <lfs_file_seek+0x70>
        npos = off;
 800583a:	4634      	mov	r4, r6
    if (npos > lfs->file_max) {
 800583c:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 8005840:	4294      	cmp	r4, r2
 8005842:	d916      	bls.n	8005872 <lfs_file_seek+0x82>
        LFS_TRACE("lfs_file_seek -> %d", LFS_ERR_INVAL);
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	f640 32d3 	movw	r2, #3027	; 0xbd3
 800584a:	f06f 0315 	mvn.w	r3, #21
 800584e:	490d      	ldr	r1, [pc, #52]	; (8005884 <lfs_file_seek+0x94>)
 8005850:	480e      	ldr	r0, [pc, #56]	; (800588c <lfs_file_seek+0x9c>)
 8005852:	f001 fa11 	bl	8006c78 <iprintf>
        return LFS_ERR_INVAL;
 8005856:	f06f 0015 	mvn.w	r0, #21
}
 800585a:	b005      	add	sp, #20
 800585c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (whence == LFS_SEEK_CUR) {
 8005860:	2f01      	cmp	r7, #1
    lfs_off_t npos = file->pos;
 8005862:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    } else if (whence == LFS_SEEK_CUR) {
 8005864:	d101      	bne.n	800586a <lfs_file_seek+0x7a>
        npos = file->ctz.size + off;
 8005866:	4434      	add	r4, r6
 8005868:	e7e8      	b.n	800583c <lfs_file_seek+0x4c>
    } else if (whence == LFS_SEEK_END) {
 800586a:	2f02      	cmp	r7, #2
 800586c:	d1e6      	bne.n	800583c <lfs_file_seek+0x4c>
        npos = file->ctz.size + off;
 800586e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8005870:	e7f9      	b.n	8005866 <lfs_file_seek+0x76>
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
 8005872:	9300      	str	r3, [sp, #0]
    file->pos = npos;
 8005874:	636c      	str	r4, [r5, #52]	; 0x34
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
 8005876:	4623      	mov	r3, r4
 8005878:	f640 32d9 	movw	r2, #3033	; 0xbd9
 800587c:	4901      	ldr	r1, [pc, #4]	; (8005884 <lfs_file_seek+0x94>)
 800587e:	4804      	ldr	r0, [pc, #16]	; (8005890 <lfs_file_seek+0xa0>)
 8005880:	e7d6      	b.n	8005830 <lfs_file_seek+0x40>
 8005882:	bf00      	nop
 8005884:	08007f20 	.word	0x08007f20
 8005888:	080081a9 	.word	0x080081a9
 800588c:	080081d8 	.word	0x080081d8
 8005890:	080081fc 	.word	0x080081fc
 8005894:	08007d9e 	.word	0x08007d9e

08005898 <lfs_file_rewind>:
int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8005898:	b573      	push	{r0, r1, r4, r5, r6, lr}
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);
 800589a:	4d14      	ldr	r5, [pc, #80]	; (80058ec <lfs_file_rewind+0x54>)
 800589c:	9100      	str	r1, [sp, #0]
int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800589e:	4604      	mov	r4, r0
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);
 80058a0:	4603      	mov	r3, r0
int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 80058a2:	460e      	mov	r6, r1
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);
 80058a4:	f640 4226 	movw	r2, #3110	; 0xc26
 80058a8:	4911      	ldr	r1, [pc, #68]	; (80058f0 <lfs_file_rewind+0x58>)
 80058aa:	9501      	str	r5, [sp, #4]
 80058ac:	4811      	ldr	r0, [pc, #68]	; (80058f4 <lfs_file_rewind+0x5c>)
 80058ae:	f001 f9e3 	bl	8006c78 <iprintf>
    lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_SET);
 80058b2:	2300      	movs	r3, #0
 80058b4:	4620      	mov	r0, r4
 80058b6:	461a      	mov	r2, r3
 80058b8:	4631      	mov	r1, r6
 80058ba:	f7ff ff99 	bl	80057f0 <lfs_file_seek>
    if (res < 0) {
 80058be:	1e04      	subs	r4, r0, #0
        LFS_TRACE("lfs_file_rewind -> %"PRId32, res);
 80058c0:	9500      	str	r5, [sp, #0]
    if (res < 0) {
 80058c2:	da09      	bge.n	80058d8 <lfs_file_rewind+0x40>
        LFS_TRACE("lfs_file_rewind -> %"PRId32, res);
 80058c4:	4623      	mov	r3, r4
 80058c6:	f640 4229 	movw	r2, #3113	; 0xc29
 80058ca:	4909      	ldr	r1, [pc, #36]	; (80058f0 <lfs_file_rewind+0x58>)
 80058cc:	480a      	ldr	r0, [pc, #40]	; (80058f8 <lfs_file_rewind+0x60>)
 80058ce:	f001 f9d3 	bl	8006c78 <iprintf>
        return (int)res;
 80058d2:	4620      	mov	r0, r4
}
 80058d4:	b002      	add	sp, #8
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
    LFS_TRACE("lfs_file_rewind -> %d", 0);
 80058d8:	2300      	movs	r3, #0
 80058da:	f640 422d 	movw	r2, #3117	; 0xc2d
 80058de:	4904      	ldr	r1, [pc, #16]	; (80058f0 <lfs_file_rewind+0x58>)
 80058e0:	4806      	ldr	r0, [pc, #24]	; (80058fc <lfs_file_rewind+0x64>)
 80058e2:	f001 f9c9 	bl	8006c78 <iprintf>
    return 0;
 80058e6:	2000      	movs	r0, #0
 80058e8:	e7f4      	b.n	80058d4 <lfs_file_rewind+0x3c>
 80058ea:	bf00      	nop
 80058ec:	08007d9e 	.word	0x08007d9e
 80058f0:	08007f20 	.word	0x08007f20
 80058f4:	08008134 	.word	0x08008134
 80058f8:	0800815c 	.word	0x0800815c
 80058fc:	08008183 	.word	0x08008183

08005900 <lfs_fs_size>:

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 8005900:	b530      	push	{r4, r5, lr}
 8005902:	b085      	sub	sp, #20
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
 8005904:	4d13      	ldr	r5, [pc, #76]	; (8005954 <lfs_fs_size+0x54>)
 8005906:	4914      	ldr	r1, [pc, #80]	; (8005958 <lfs_fs_size+0x58>)
 8005908:	9500      	str	r5, [sp, #0]
lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 800590a:	4604      	mov	r4, r0
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
 800590c:	4603      	mov	r3, r0
 800590e:	f241 028f 	movw	r2, #4239	; 0x108f
 8005912:	4812      	ldr	r0, [pc, #72]	; (800595c <lfs_fs_size+0x5c>)
 8005914:	f001 f9b0 	bl	8006c78 <iprintf>
    lfs_size_t size = 0;
 8005918:	aa04      	add	r2, sp, #16
 800591a:	2300      	movs	r3, #0
 800591c:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
 8005920:	4620      	mov	r0, r4
 8005922:	490f      	ldr	r1, [pc, #60]	; (8005960 <lfs_fs_size+0x60>)
 8005924:	f7ff fa3c 	bl	8004da0 <lfs_fs_traverseraw>
    if (err) {
        LFS_TRACE("lfs_fs_size -> %d", err);
 8005928:	9500      	str	r5, [sp, #0]
    if (err) {
 800592a:	4604      	mov	r4, r0
        LFS_TRACE("lfs_fs_size -> %d", err);
 800592c:	4603      	mov	r3, r0
    if (err) {
 800592e:	b140      	cbz	r0, 8005942 <lfs_fs_size+0x42>
        LFS_TRACE("lfs_fs_size -> %d", err);
 8005930:	f241 0293 	movw	r2, #4243	; 0x1093
 8005934:	4908      	ldr	r1, [pc, #32]	; (8005958 <lfs_fs_size+0x58>)
 8005936:	480b      	ldr	r0, [pc, #44]	; (8005964 <lfs_fs_size+0x64>)
 8005938:	f001 f99e 	bl	8006c78 <iprintf>
        return err;
 800593c:	4620      	mov	r0, r4
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
}
 800593e:	b005      	add	sp, #20
 8005940:	bd30      	pop	{r4, r5, pc}
    LFS_TRACE("lfs_fs_size -> %d", err);
 8005942:	f241 0297 	movw	r2, #4247	; 0x1097
 8005946:	4904      	ldr	r1, [pc, #16]	; (8005958 <lfs_fs_size+0x58>)
 8005948:	4806      	ldr	r0, [pc, #24]	; (8005964 <lfs_fs_size+0x64>)
 800594a:	f001 f995 	bl	8006c78 <iprintf>
    return size;
 800594e:	9803      	ldr	r0, [sp, #12]
 8005950:	e7f5      	b.n	800593e <lfs_fs_size+0x3e>
 8005952:	bf00      	nop
 8005954:	08007d9e 	.word	0x08007d9e
 8005958:	08007f20 	.word	0x08007f20
 800595c:	0800857a 	.word	0x0800857a
 8005960:	080037dd 	.word	0x080037dd
 8005964:	0800859a 	.word	0x0800859a

08005968 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	b0a5      	sub	sp, #148	; 0x94
        int err = lfs_dir_traverse(lfs,
 800596e:	f8df b354 	ldr.w	fp, [pc, #852]	; 8005cc4 <lfs_dir_compact+0x35c>
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005972:	930b      	str	r3, [sp, #44]	; 0x2c
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 8005974:	680b      	ldr	r3, [r1, #0]
 8005976:	930c      	str	r3, [sp, #48]	; 0x30
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005978:	f8bd 80bc 	ldrh.w	r8, [sp, #188]	; 0xbc
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800597c:	684b      	ldr	r3, [r1, #4]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800597e:	f8bd a0c0 	ldrh.w	sl, [sp, #192]	; 0xc0
 8005982:	920a      	str	r2, [sp, #40]	; 0x28
 8005984:	4604      	mov	r4, r0
 8005986:	460e      	mov	r6, r1
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 8005988:	930d      	str	r3, [sp, #52]	; 0x34
        lfs_size_t size = 0;
 800598a:	f04f 0900 	mov.w	r9, #0
    while (end - begin > 1) {
 800598e:	ebaa 0708 	sub.w	r7, sl, r8
 8005992:	2f01      	cmp	r7, #1
 8005994:	f300 8085 	bgt.w	8005aa2 <lfs_dir_compact+0x13a>
    if (lfs->cfg->block_cycles > 0 &&
 8005998:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    dir->rev += 1;
 800599a:	68b2      	ldr	r2, [r6, #8]
    if (lfs->cfg->block_cycles > 0 &&
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dir->rev += 1;
 800599e:	3201      	adds	r2, #1
    if (lfs->cfg->block_cycles > 0 &&
 80059a0:	2b00      	cmp	r3, #0
    dir->rev += 1;
 80059a2:	60b2      	str	r2, [r6, #8]
    if (lfs->cfg->block_cycles > 0 &&
 80059a4:	f340 80d1 	ble.w	8005b4a <lfs_dir_compact+0x1e2>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 80059a8:	3301      	adds	r3, #1
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80059b2:	fb03 2311 	mls	r3, r3, r1, r2
    if (lfs->cfg->block_cycles > 0 &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 80c7 	bne.w	8005b4a <lfs_dir_compact+0x1e2>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80059bc:	2501      	movs	r5, #1
 80059be:	a90e      	add	r1, sp, #56	; 0x38
 80059c0:	4630      	mov	r0, r6
 80059c2:	930e      	str	r3, [sp, #56]	; 0x38
 80059c4:	950f      	str	r5, [sp, #60]	; 0x3c
 80059c6:	f7fd fe6d 	bl	80036a4 <lfs_pair_cmp>
 80059ca:	4607      	mov	r7, r0
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f040 8158 	bne.w	8005c82 <lfs_dir_compact+0x31a>
            lfs_ssize_t res = lfs_fs_size(lfs);
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7ff ff94 	bl	8005900 <lfs_fs_size>
            if (res < 0) {
 80059d8:	1e05      	subs	r5, r0, #0
 80059da:	f2c0 80b0 	blt.w	8005b3e <lfs_dir_compact+0x1d6>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 80059de:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 80059e6:	d21c      	bcs.n	8005a22 <lfs_dir_compact+0xba>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80059e8:	4baf      	ldr	r3, [pc, #700]	; (8005ca8 <lfs_dir_compact+0x340>)
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80059f0:	68b3      	ldr	r3, [r6, #8]
 80059f2:	49ae      	ldr	r1, [pc, #696]	; (8005cac <lfs_dir_compact+0x344>)
 80059f4:	48ae      	ldr	r0, [pc, #696]	; (8005cb0 <lfs_dir_compact+0x348>)
 80059f6:	f001 f93f 	bl	8006c78 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80059fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	f8cd a008 	str.w	sl, [sp, #8]
 8005a02:	f8cd 8004 	str.w	r8, [sp, #4]
 8005a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 ffa5 	bl	800695c <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
 8005a12:	4605      	mov	r5, r0
 8005a14:	2800      	cmp	r0, #0
 8005a16:	f000 809a 	beq.w	8005b4e <lfs_dir_compact+0x1e6>
 8005a1a:	f110 0f1c 	cmn.w	r0, #28
 8005a1e:	f040 808e 	bne.w	8005b3e <lfs_dir_compact+0x1d6>
                .end = lfs->cfg->block_size - 8,
 8005a22:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                .block = dir->pair[1],
 8005a24:	6871      	ldr	r1, [r6, #4]
            struct lfs_commit commit = {
 8005a26:	911c      	str	r1, [sp, #112]	; 0x70
 8005a28:	2300      	movs	r3, #0
 8005a2a:	931d      	str	r3, [sp, #116]	; 0x74
 8005a2c:	9320      	str	r3, [sp, #128]	; 0x80
                .end = lfs->cfg->block_size - 8,
 8005a2e:	69c3      	ldr	r3, [r0, #28]
            struct lfs_commit commit = {
 8005a30:	f04f 3bff 	mov.w	fp, #4294967295
                .end = lfs->cfg->block_size - 8,
 8005a34:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8005a36:	9321      	str	r3, [sp, #132]	; 0x84
 8005a38:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 8005a3c:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
    int err = lfs->cfg->erase(lfs->cfg, block);
 8005a40:	68c3      	ldr	r3, [r0, #12]
 8005a42:	4798      	blx	r3
            if (err) {
 8005a44:	4605      	mov	r5, r0
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f000 8084 	beq.w	8005b54 <lfs_dir_compact+0x1ec>
                if (err == LFS_ERR_CORRUPT) {
 8005a4c:	f115 0f54 	cmn.w	r5, #84	; 0x54
 8005a50:	d175      	bne.n	8005b3e <lfs_dir_compact+0x1d6>
 8005a52:	f04f 0900 	mov.w	r9, #0
    rcache->block = LFS_BLOCK_NULL;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	6123      	str	r3, [r4, #16]
        if (!tired) {
 8005a5c:	f1b9 0f00 	cmp.w	r9, #0
 8005a60:	d108      	bne.n	8005a74 <lfs_dir_compact+0x10c>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8005a62:	4b91      	ldr	r3, [pc, #580]	; (8005ca8 <lfs_dir_compact+0x340>)
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	f240 6295 	movw	r2, #1685	; 0x695
 8005a6a:	6873      	ldr	r3, [r6, #4]
 8005a6c:	498f      	ldr	r1, [pc, #572]	; (8005cac <lfs_dir_compact+0x344>)
 8005a6e:	4891      	ldr	r0, [pc, #580]	; (8005cb4 <lfs_dir_compact+0x34c>)
 8005a70:	f001 f902 	bl	8006c78 <iprintf>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8005a74:	2300      	movs	r3, #0
 8005a76:	2701      	movs	r7, #1
 8005a78:	a912      	add	r1, sp, #72	; 0x48
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	9312      	str	r3, [sp, #72]	; 0x48
 8005a7e:	9713      	str	r7, [sp, #76]	; 0x4c
 8005a80:	f7fd fe10 	bl	80036a4 <lfs_pair_cmp>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f040 80fe 	bne.w	8005c86 <lfs_dir_compact+0x31e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8005a8a:	4b87      	ldr	r3, [pc, #540]	; (8005ca8 <lfs_dir_compact+0x340>)
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	f240 629b 	movw	r2, #1691	; 0x69b
 8005a92:	6873      	ldr	r3, [r6, #4]
 8005a94:	4985      	ldr	r1, [pc, #532]	; (8005cac <lfs_dir_compact+0x344>)
 8005a96:	4888      	ldr	r0, [pc, #544]	; (8005cb8 <lfs_dir_compact+0x350>)
 8005a98:	f001 f8ee 	bl	8006c78 <iprintf>
            return LFS_ERR_NOSPC;
 8005a9c:	f06f 051b 	mvn.w	r5, #27
 8005aa0:	e04d      	b.n	8005b3e <lfs_dir_compact+0x1d6>
        lfs_size_t size = 0;
 8005aa2:	ab24      	add	r3, sp, #144	; 0x90
        int err = lfs_dir_traverse(lfs,
 8005aa4:	2200      	movs	r2, #0
        lfs_size_t size = 0;
 8005aa6:	f843 9d20 	str.w	r9, [r3, #-32]!
        int err = lfs_dir_traverse(lfs,
 8005aaa:	9308      	str	r3, [sp, #32]
 8005aac:	4b83      	ldr	r3, [pc, #524]	; (8005cbc <lfs_dir_compact+0x354>)
 8005aae:	9307      	str	r3, [sp, #28]
 8005ab0:	f1c8 0300 	rsb	r3, r8, #0
 8005ab4:	b21b      	sxth	r3, r3
 8005ab6:	9306      	str	r3, [sp, #24]
 8005ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	f8cd a014 	str.w	sl, [sp, #20]
 8005ac4:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ac8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005acc:	f8cd b008 	str.w	fp, [sp, #8]
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7fe f9e2 	bl	8003ea0 <lfs_dir_traverse>
        if (err) {
 8005adc:	4605      	mov	r5, r0
 8005ade:	bb70      	cbnz	r0, 8005b3e <lfs_dir_compact+0x1d6>
        if (end - begin < 0xff &&
 8005ae0:	2ffe      	cmp	r7, #254	; 0xfe
 8005ae2:	dc12      	bgt.n	8005b0a <lfs_dir_compact+0x1a2>
                size <= lfs_min(lfs->cfg->block_size - 36,
 8005ae4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005ae6:	6998      	ldr	r0, [r3, #24]
 8005ae8:	69da      	ldr	r2, [r3, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 8005aea:	1e43      	subs	r3, r0, #1
 8005aec:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    return a - (a % alignment);
 8005af0:	fbb3 f1f0 	udiv	r1, r3, r0
 8005af4:	fb00 3111 	mls	r1, r0, r1, r3
 8005af8:	1a5b      	subs	r3, r3, r1
 8005afa:	3a24      	subs	r2, #36	; 0x24
    return (a < b) ? a : b;
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bf28      	it	cs
 8005b00:	4613      	movcs	r3, r2
        if (end - begin < 0xff &&
 8005b02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f67f af47 	bls.w	8005998 <lfs_dir_compact+0x30>
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005b0a:	eb08 0767 	add.w	r7, r8, r7, asr #1
 8005b0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	b2bf      	uxth	r7, r7
 8005b14:	f8cd a008 	str.w	sl, [sp, #8]
 8005b18:	9701      	str	r7, [sp, #4]
 8005b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 ff1b 	bl	800695c <lfs_dir_split>
        if (err) {
 8005b26:	4605      	mov	r5, r0
 8005b28:	b168      	cbz	r0, 8005b46 <lfs_dir_compact+0x1de>
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 8005b2a:	f110 0f1c 	cmn.w	r0, #28
 8005b2e:	d106      	bne.n	8005b3e <lfs_dir_compact+0x1d6>
 8005b30:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005b32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	3b24      	subs	r3, #36	; 0x24
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	f4bf af2d 	bcs.w	8005998 <lfs_dir_compact+0x30>
}
 8005b3e:	4628      	mov	r0, r5
 8005b40:	b025      	add	sp, #148	; 0x94
 8005b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        end = begin + split;
 8005b46:	46ba      	mov	sl, r7
 8005b48:	e721      	b.n	800598e <lfs_dir_compact+0x26>
    bool relocated = false;
 8005b4a:	2700      	movs	r7, #0
 8005b4c:	e769      	b.n	8005a22 <lfs_dir_compact+0xba>
                    end = begin;
 8005b4e:	46c2      	mov	sl, r8
    bool relocated = false;
 8005b50:	4607      	mov	r7, r0
 8005b52:	e766      	b.n	8005a22 <lfs_dir_compact+0xba>
            err = lfs_dir_commitprog(lfs, &commit,
 8005b54:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f106 0208 	add.w	r2, r6, #8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7fe fdfb 	bl	800475c <lfs_dir_commitprog>
            if (err) {
 8005b66:	4605      	mov	r5, r0
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f47f af6f 	bne.w	8005a4c <lfs_dir_compact+0xe4>
            err = lfs_dir_traverse(lfs,
 8005b6e:	ab10      	add	r3, sp, #64	; 0x40
 8005b70:	9308      	str	r3, [sp, #32]
 8005b72:	4b53      	ldr	r3, [pc, #332]	; (8005cc0 <lfs_dir_compact+0x358>)
 8005b74:	9307      	str	r3, [sp, #28]
 8005b76:	f1c8 0300 	rsb	r3, r8, #0
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	9306      	str	r3, [sp, #24]
 8005b7e:	4b51      	ldr	r3, [pc, #324]	; (8005cc4 <lfs_dir_compact+0x35c>)
 8005b80:	9302      	str	r3, [sp, #8]
 8005b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	9003      	str	r0, [sp, #12]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	f8cd a014 	str.w	sl, [sp, #20]
 8005b92:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b96:	465b      	mov	r3, fp
 8005b98:	992e      	ldr	r1, [sp, #184]	; 0xb8
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005b9a:	9410      	str	r4, [sp, #64]	; 0x40
            err = lfs_dir_traverse(lfs,
 8005b9c:	4620      	mov	r0, r4
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005b9e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
            err = lfs_dir_traverse(lfs,
 8005ba2:	f7fe f97d 	bl	8003ea0 <lfs_dir_traverse>
            if (err) {
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f47f af4f 	bne.w	8005a4c <lfs_dir_compact+0xe4>
            if (!lfs_pair_isnull(dir->tail)) {
 8005bae:	f106 0118 	add.w	r1, r6, #24
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	f7fd fd6c 	bl	8003690 <lfs_pair_isnull>
 8005bb8:	b970      	cbnz	r0, 8005bd8 <lfs_dir_compact+0x270>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8005bba:	7df2      	ldrb	r2, [r6, #23]
                err = lfs_dir_commitattr(lfs, &commit,
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4942      	ldr	r1, [pc, #264]	; (8005cc8 <lfs_dir_compact+0x360>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8005bc0:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 8005bc4:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4649      	mov	r1, r9
 8005bcc:	f7fe fde5 	bl	800479a <lfs_dir_commitattr>
                if (err) {
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f47f af3a 	bne.w	8005a4c <lfs_dir_compact+0xe4>
            lfs_gstate_t delta = {0};
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9318      	str	r3, [sp, #96]	; 0x60
 8005bdc:	9319      	str	r3, [sp, #100]	; 0x64
 8005bde:	931a      	str	r3, [sp, #104]	; 0x68
            if (!relocated) {
 8005be0:	b94f      	cbnz	r7, 8005bf6 <lfs_dir_compact+0x28e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8005be2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005be6:	a818      	add	r0, sp, #96	; 0x60
 8005be8:	f7fd fd77 	bl	80036da <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8005bec:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005bf0:	a818      	add	r0, sp, #96	; 0x60
 8005bf2:	f7fd fd72 	bl	80036da <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8005bf6:	f104 0b48 	add.w	fp, r4, #72	; 0x48
 8005bfa:	4659      	mov	r1, fp
 8005bfc:	a818      	add	r0, sp, #96	; 0x60
 8005bfe:	f7fd fd6c 	bl	80036da <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005c02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005c04:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c08:	f023 0303 	bic.w	r3, r3, #3
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005c0c:	aa18      	add	r2, sp, #96	; 0x60
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4620      	mov	r0, r4
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005c12:	9318      	str	r3, [sp, #96]	; 0x60
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005c14:	f7fe fab8 	bl	8004188 <lfs_dir_getgstate>
            if (err) {
 8005c18:	4605      	mov	r5, r0
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d18f      	bne.n	8005b3e <lfs_dir_compact+0x1d6>
            if (!lfs_gstate_iszero(&delta)) {
 8005c1e:	a818      	add	r0, sp, #96	; 0x60
 8005c20:	f7fd fd68 	bl	80036f4 <lfs_gstate_iszero>
 8005c24:	b948      	cbnz	r0, 8005c3a <lfs_dir_compact+0x2d2>
                err = lfs_dir_commitattr(lfs, &commit,
 8005c26:	ab18      	add	r3, sp, #96	; 0x60
 8005c28:	4a28      	ldr	r2, [pc, #160]	; (8005ccc <lfs_dir_compact+0x364>)
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7fe fdb4 	bl	800479a <lfs_dir_commitattr>
                if (err) {
 8005c32:	4605      	mov	r5, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f47f af09 	bne.w	8005a4c <lfs_dir_compact+0xe4>
            err = lfs_dir_commitcrc(lfs, &commit);
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7fe fe09 	bl	8004854 <lfs_dir_commitcrc>
            if (err) {
 8005c42:	4605      	mov	r5, r0
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f47f af01 	bne.w	8005a4c <lfs_dir_compact+0xe4>
    pair[0] = pair[1];
 8005c4a:	e896 000c 	ldmia.w	r6, {r2, r3}
            dir->off = commit.off;
 8005c4e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005c50:	60f1      	str	r1, [r6, #12]
            dir->count = end - begin;
 8005c52:	ebaa 0808 	sub.w	r8, sl, r8
            dir->etag = commit.ptag;
 8005c56:	991e      	ldr	r1, [sp, #120]	; 0x78
    pair[0] = pair[1];
 8005c58:	6033      	str	r3, [r6, #0]
    pair[1] = t;
 8005c5a:	6072      	str	r2, [r6, #4]
            dir->count = end - begin;
 8005c5c:	f8a6 8014 	strh.w	r8, [r6, #20]
            dir->etag = commit.ptag;
 8005c60:	6131      	str	r1, [r6, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 8005c62:	64a0      	str	r0, [r4, #72]	; 0x48
 8005c64:	f8cb 0004 	str.w	r0, [fp, #4]
 8005c68:	f8cb 0008 	str.w	r0, [fp, #8]
            if (!relocated) {
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	f040 80c8 	bne.w	8005e02 <lfs_dir_compact+0x49a>
                lfs->gdisk = lfs->gstate;
 8005c72:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005c76:	3430      	adds	r4, #48	; 0x30
 8005c78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005c7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c80:	e75d      	b.n	8005b3e <lfs_dir_compact+0x1d6>
            tired = true;
 8005c82:	46a9      	mov	r9, r5
 8005c84:	e6e7      	b.n	8005a56 <lfs_dir_compact+0xee>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8005c86:	1d31      	adds	r1, r6, #4
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7ff f933 	bl	8004ef4 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8005c8e:	4605      	mov	r5, r0
 8005c90:	2800      	cmp	r0, #0
 8005c92:	f43f aec6 	beq.w	8005a22 <lfs_dir_compact+0xba>
 8005c96:	f110 0f1c 	cmn.w	r0, #28
 8005c9a:	f47f af50 	bne.w	8005b3e <lfs_dir_compact+0x1d6>
 8005c9e:	464f      	mov	r7, r9
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	f47f aebe 	bne.w	8005a22 <lfs_dir_compact+0xba>
 8005ca6:	e74a      	b.n	8005b3e <lfs_dir_compact+0x1d6>
 8005ca8:	08007d9e 	.word	0x08007d9e
 8005cac:	08007f20 	.word	0x08007f20
 8005cb0:	08007e3b 	.word	0x08007e3b
 8005cb4:	08008111 	.word	0x08008111
 8005cb8:	08007e6b 	.word	0x08007e6b
 8005cbc:	080037c9 	.word	0x080037c9
 8005cc0:	0800484b 	.word	0x0800484b
 8005cc4:	400ffc00 	.word	0x400ffc00
 8005cc8:	000ffc08 	.word	0x000ffc08
 8005ccc:	7ffffc0c 	.word	0x7ffffc0c
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 8005cd0:	f107 0108 	add.w	r1, r7, #8
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	f7fd fce5 	bl	80036a4 <lfs_pair_cmp>
 8005cda:	b918      	cbnz	r0, 8005ce4 <lfs_dir_compact+0x37c>
            d->m.pair[0] = newpair[0];
 8005cdc:	6833      	ldr	r3, [r6, #0]
 8005cde:	60bb      	str	r3, [r7, #8]
            d->m.pair[1] = newpair[1];
 8005ce0:	6873      	ldr	r3, [r6, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]
        if (d->type == LFS_TYPE_DIR &&
 8005ce4:	79bb      	ldrb	r3, [r7, #6]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d109      	bne.n	8005cfe <lfs_dir_compact+0x396>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 8005cea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005cee:	4640      	mov	r0, r8
 8005cf0:	f7fd fcd8 	bl	80036a4 <lfs_pair_cmp>
        if (d->type == LFS_TYPE_DIR &&
 8005cf4:	b918      	cbnz	r0, 8005cfe <lfs_dir_compact+0x396>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 8005cf6:	6833      	ldr	r3, [r6, #0]
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 8005cfa:	6873      	ldr	r3, [r6, #4]
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005cfe:	683f      	ldr	r7, [r7, #0]
 8005d00:	e09b      	b.n	8005e3a <lfs_dir_compact+0x4d2>
 8005d02:	f104 0b30 	add.w	fp, r4, #48	; 0x30
        lfs_fs_preporphans(lfs, +1);
 8005d06:	2101      	movs	r1, #1
 8005d08:	4658      	mov	r0, fp
 8005d0a:	f7fd fd82 	bl	8003812 <lfs_fs_preporphans.isra.13>
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4658      	mov	r0, fp
 8005d12:	f7fd fcfa 	bl	800370a <lfs_gstate_hasmovehere>
 8005d16:	b318      	cbz	r0, 8005d60 <lfs_dir_compact+0x3f8>
    return (tag & 0x000ffc00) >> 10;
 8005d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
            LFS_DEBUG("Fixing move while relocating "
 8005d1a:	4957      	ldr	r1, [pc, #348]	; (8005e78 <lfs_dir_compact+0x510>)
 8005d1c:	4857      	ldr	r0, [pc, #348]	; (8005e7c <lfs_dir_compact+0x514>)
    return (tag & 0x000ffc00) >> 10;
 8005d1e:	f3c3 2a89 	ubfx	sl, r3, #10, #10
            LFS_DEBUG("Fixing move while relocating "
 8005d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d24:	9302      	str	r3, [sp, #8]
 8005d26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	f640 72cb 	movw	r2, #4043	; 0xfcb
 8005d2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005d30:	f8cd a004 	str.w	sl, [sp, #4]
 8005d34:	f000 ffa0 	bl	8006c78 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005d38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d3a:	4b51      	ldr	r3, [pc, #324]	; (8005e80 <lfs_dir_compact+0x518>)
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8005d3c:	6367      	str	r7, [r4, #52]	; 0x34
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005d3e:	4013      	ands	r3, r2
 8005d40:	6323      	str	r3, [r4, #48]	; 0x30
            if (moveid < lfs_tag_id(tag)) {
 8005d42:	f3c8 2389 	ubfx	r3, r8, #10, #10
 8005d46:	459a      	cmp	sl, r3
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8005d48:	63a7      	str	r7, [r4, #56]	; 0x38
            if (moveid < lfs_tag_id(tag)) {
 8005d4a:	d205      	bcs.n	8005d58 <lfs_dir_compact+0x3f0>
                tag -= LFS_MKTAG(0, 1, 0);
 8005d4c:	f5a8 6880 	sub.w	r8, r8, #1024	; 0x400
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8005d50:	4f4c      	ldr	r7, [pc, #304]	; (8005e84 <lfs_dir_compact+0x51c>)
 8005d52:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 8005d56:	e003      	b.n	8005d60 <lfs_dir_compact+0x3f8>
 8005d58:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005d5c:	459a      	cmp	sl, r3
 8005d5e:	d1f7      	bne.n	8005d50 <lfs_dir_compact+0x3e8>
 8005d60:	2300      	movs	r3, #0
 8005d62:	9319      	str	r3, [sp, #100]	; 0x64
 8005d64:	aa18      	add	r2, sp, #96	; 0x60
 8005d66:	2302      	movs	r3, #2
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	9718      	str	r7, [sp, #96]	; 0x60
 8005d6e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005d72:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d74:	f000 f88e 	bl	8005e94 <lfs_dir_commit>
        if (err) {
 8005d78:	4607      	mov	r7, r0
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d177      	bne.n	8005e6e <lfs_dir_compact+0x506>
        lfs_fs_preporphans(lfs, -1);
 8005d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8005d82:	4658      	mov	r0, fp
 8005d84:	f7fd fd45 	bl	8003812 <lfs_fs_preporphans.isra.13>
 8005d88:	e066      	b.n	8005e58 <lfs_dir_compact+0x4f0>
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005d90:	f7fd fcbb 	bl	800370a <lfs_gstate_hasmovehere>
 8005d94:	b9b8      	cbnz	r0, 8005dc6 <lfs_dir_compact+0x45e>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8005d96:	2300      	movs	r3, #0
 8005d98:	9314      	str	r3, [sp, #80]	; 0x50
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9315      	str	r3, [sp, #84]	; 0x54
 8005d9e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
 8005da2:	9617      	str	r6, [sp, #92]	; 0x5c
 8005da4:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 8005da8:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <lfs_dir_compact+0x520>)
 8005daa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005dae:	9316      	str	r3, [sp, #88]	; 0x58
 8005db0:	aa14      	add	r2, sp, #80	; 0x50
 8005db2:	2302      	movs	r3, #2
 8005db4:	4649      	mov	r1, r9
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 f86c 	bl	8005e94 <lfs_dir_commit>
        if (err) {
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f43f aebd 	beq.w	8005b3e <lfs_dir_compact+0x1d6>
 8005dc4:	e053      	b.n	8005e6e <lfs_dir_compact+0x506>
    return (tag & 0x000ffc00) >> 10;
 8005dc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
            LFS_DEBUG("Fixing move while relocating "
 8005dc8:	492b      	ldr	r1, [pc, #172]	; (8005e78 <lfs_dir_compact+0x510>)
 8005dca:	482c      	ldr	r0, [pc, #176]	; (8005e7c <lfs_dir_compact+0x514>)
    return (tag & 0x000ffc00) >> 10;
 8005dcc:	f3c3 2889 	ubfx	r8, r3, #10, #10
            LFS_DEBUG("Fixing move while relocating "
 8005dd0:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <lfs_dir_compact+0x524>)
 8005dd2:	9302      	str	r3, [sp, #8]
 8005dd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	f640 72ef 	movw	r2, #4079	; 0xfef
 8005ddc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005dde:	f8cd 8004 	str.w	r8, [sp, #4]
 8005de2:	f000 ff49 	bl	8006c78 <iprintf>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005de6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <lfs_dir_compact+0x518>)
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8005dea:	6367      	str	r7, [r4, #52]	; 0x34
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005dec:	4013      	ands	r3, r2
 8005dee:	6323      	str	r3, [r4, #48]	; 0x30
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8005df0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005df4:	4598      	cmp	r8, r3
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8005df6:	63a7      	str	r7, [r4, #56]	; 0x38
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8005df8:	d0cd      	beq.n	8005d96 <lfs_dir_compact+0x42e>
 8005dfa:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <lfs_dir_compact+0x51c>)
 8005dfc:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
 8005e00:	e7ca      	b.n	8005d98 <lfs_dir_compact+0x430>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	4f21      	ldr	r7, [pc, #132]	; (8005e8c <lfs_dir_compact+0x524>)
 8005e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e08:	9202      	str	r2, [sp, #8]
 8005e0a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8005e0e:	9703      	str	r7, [sp, #12]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	f858 3d60 	ldr.w	r3, [r8, #-96]!
 8005e16:	4918      	ldr	r1, [pc, #96]	; (8005e78 <lfs_dir_compact+0x510>)
 8005e18:	481d      	ldr	r0, [pc, #116]	; (8005e90 <lfs_dir_compact+0x528>)
 8005e1a:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8005e1e:	f000 ff2b 	bl	8006c78 <iprintf>
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 8005e22:	f104 0120 	add.w	r1, r4, #32
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7fd fc3c 	bl	80036a4 <lfs_pair_cmp>
 8005e2c:	970a      	str	r7, [sp, #40]	; 0x28
 8005e2e:	b918      	cbnz	r0, 8005e38 <lfs_dir_compact+0x4d0>
        lfs->root[0] = newpair[0];
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	6223      	str	r3, [r4, #32]
        lfs->root[1] = newpair[1];
 8005e34:	6873      	ldr	r3, [r6, #4]
 8005e36:	6263      	str	r3, [r4, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005e38:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005e3a:	2f00      	cmp	r7, #0
 8005e3c:	f47f af48 	bne.w	8005cd0 <lfs_dir_compact+0x368>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 8005e40:	4641      	mov	r1, r8
 8005e42:	464a      	mov	r2, r9
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7fd ffb3 	bl	8003db0 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005e4a:	f1b0 0800 	subs.w	r8, r0, #0
 8005e4e:	f6bf af58 	bge.w	8005d02 <lfs_dir_compact+0x39a>
 8005e52:	f118 0f02 	cmn.w	r8, #2
 8005e56:	d10c      	bne.n	8005e72 <lfs_dir_compact+0x50a>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 8005e58:	464a      	mov	r2, r9
 8005e5a:	a90c      	add	r1, sp, #48	; 0x30
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7fd fff4 	bl	8003e4a <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
 8005e62:	4607      	mov	r7, r0
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d090      	beq.n	8005d8a <lfs_dir_compact+0x422>
 8005e68:	1c83      	adds	r3, r0, #2
 8005e6a:	f43f ae68 	beq.w	8005b3e <lfs_dir_compact+0x1d6>
 8005e6e:	463d      	mov	r5, r7
 8005e70:	e665      	b.n	8005b3e <lfs_dir_compact+0x1d6>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005e72:	4647      	mov	r7, r8
 8005e74:	e7fb      	b.n	8005e6e <lfs_dir_compact+0x506>
 8005e76:	bf00      	nop
 8005e78:	08007f20 	.word	0x08007f20
 8005e7c:	08007ea1 	.word	0x08007ea1
 8005e80:	800003ff 	.word	0x800003ff
 8005e84:	4ff00000 	.word	0x4ff00000
 8005e88:	000ffc08 	.word	0x000ffc08
 8005e8c:	08007d9e 	.word	0x08007d9e
 8005e90:	08007ee4 	.word	0x08007ee4

08005e94 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 8005e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005e98:	6a86      	ldr	r6, [r0, #40]	; 0x28
        const struct lfs_mattr *attrs, int attrcount) {
 8005e9a:	b0a3      	sub	sp, #140	; 0x8c
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	4691      	mov	r9, r2
 8005ea2:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005ea4:	bb36      	cbnz	r6, 8005ef4 <lfs_dir_commit+0x60>
    lfs_mdir_t olddir = *dir;
 8005ea6:	46a6      	mov	lr, r4
 8005ea8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005eac:	af12      	add	r7, sp, #72	; 0x48
 8005eae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005eb0:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8005eb4:	f240 4c01 	movw	ip, #1025	; 0x401
    lfs_mdir_t olddir = *dir;
 8005eb8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    bool hasdelete = false;
 8005ebc:	4631      	mov	r1, r6
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005ebe:	f240 47ff 	movw	r7, #1279	; 0x4ff
    for (int i = 0; i < attrcount; i++) {
 8005ec2:	4556      	cmp	r6, sl
 8005ec4:	db45      	blt.n	8005f52 <lfs_dir_commit+0xbe>
    if (hasdelete && dir->count == 0) {
 8005ec6:	2900      	cmp	r1, #0
 8005ec8:	d072      	beq.n	8005fb0 <lfs_dir_commit+0x11c>
 8005eca:	8aa3      	ldrh	r3, [r4, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d16f      	bne.n	8005fb0 <lfs_dir_commit+0x11c>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 8005ed0:	aa1a      	add	r2, sp, #104	; 0x68
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f7fd ffb8 	bl	8003e4a <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 8005eda:	4607      	mov	r7, r0
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d05c      	beq.n	8005f9a <lfs_dir_commit+0x106>
 8005ee0:	1c83      	adds	r3, r0, #2
 8005ee2:	d065      	beq.n	8005fb0 <lfs_dir_commit+0x11c>
            *dir = olddir;
 8005ee4:	ad12      	add	r5, sp, #72	; 0x48
 8005ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            return err;
 8005ef2:	e02a      	b.n	8005f4a <lfs_dir_commit+0xb6>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005ef4:	f106 0008 	add.w	r0, r6, #8
 8005ef8:	42a0      	cmp	r0, r4
 8005efa:	d101      	bne.n	8005f00 <lfs_dir_commit+0x6c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005efc:	6836      	ldr	r6, [r6, #0]
 8005efe:	e7d1      	b.n	8005ea4 <lfs_dir_commit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005f00:	4621      	mov	r1, r4
 8005f02:	f7fd fbcf 	bl	80036a4 <lfs_pair_cmp>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d1f8      	bne.n	8005efc <lfs_dir_commit+0x68>
 8005f0a:	79b3      	ldrb	r3, [r6, #6]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d1f5      	bne.n	8005efc <lfs_dir_commit+0x68>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005f10:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005f12:	02da      	lsls	r2, r3, #11
 8005f14:	d5f2      	bpl.n	8005efc <lfs_dir_commit+0x68>
                f->ctz.size > lfs->cfg->cache_size) {
 8005f16:	6eab      	ldr	r3, [r5, #104]	; 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005f18:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1c:	4291      	cmp	r1, r2
 8005f1e:	d9ed      	bls.n	8005efc <lfs_dir_commit+0x68>
    file->off = file->pos;
 8005f20:	6b72      	ldr	r2, [r6, #52]	; 0x34
    lfs->free.ack = lfs->cfg->block_count;
 8005f22:	6a1b      	ldr	r3, [r3, #32]
    file->off = file->pos;
 8005f24:	63f2      	str	r2, [r6, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
 8005f26:	4631      	mov	r1, r6
    lfs->free.ack = lfs->cfg->block_count;
 8005f28:	662b      	str	r3, [r5, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f7ff f89a 	bl	8005064 <lfs_file_relocate>
    if (err) {
 8005f30:	4607      	mov	r7, r0
 8005f32:	b950      	cbnz	r0, 8005f4a <lfs_dir_commit+0xb6>
    file->flags &= ~LFS_F_INLINE;
 8005f34:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005f36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f3a:	6333      	str	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7ff fb08 	bl	8005554 <lfs_file_flush>
            if (err) {
 8005f44:	4607      	mov	r7, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0d8      	beq.n	8005efc <lfs_dir_commit+0x68>
}
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	b023      	add	sp, #140	; 0x8c
 8005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (tag & 0x7ff00000) >> 20;
 8005f52:	f859 3036 	ldr.w	r3, [r9, r6, lsl #3]
 8005f56:	0d1b      	lsrs	r3, r3, #20
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f3c2 0e0a 	ubfx	lr, r2, #0, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8005f5e:	45e6      	cmp	lr, ip
 8005f60:	d104      	bne.n	8005f6c <lfs_dir_commit+0xd8>
            dir->count += 1;
 8005f62:	8aa3      	ldrh	r3, [r4, #20]
 8005f64:	3301      	adds	r3, #1
 8005f66:	82a3      	strh	r3, [r4, #20]
    for (int i = 0; i < attrcount; i++) {
 8005f68:	3601      	adds	r6, #1
 8005f6a:	e7aa      	b.n	8005ec2 <lfs_dir_commit+0x2e>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005f6c:	45be      	cmp	lr, r7
 8005f6e:	d104      	bne.n	8005f7a <lfs_dir_commit+0xe6>
            dir->count -= 1;
 8005f70:	8aa3      	ldrh	r3, [r4, #20]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	82a3      	strh	r3, [r4, #20]
            hasdelete = true;
 8005f76:	2101      	movs	r1, #1
 8005f78:	e7f6      	b.n	8005f68 <lfs_dir_commit+0xd4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8005f7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005f7e:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8005f82:	d1f1      	bne.n	8005f68 <lfs_dir_commit+0xd4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005f84:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005f88:	f003 0301 	and.w	r3, r3, #1
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005f8c:	6852      	ldr	r2, [r2, #4]
 8005f8e:	6810      	ldr	r0, [r2, #0]
 8005f90:	61a0      	str	r0, [r4, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8005f92:	6852      	ldr	r2, [r2, #4]
 8005f94:	61e2      	str	r2, [r4, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005f96:	75e3      	strb	r3, [r4, #23]
 8005f98:	e7e6      	b.n	8005f68 <lfs_dir_commit+0xd4>
        if (err != LFS_ERR_NOENT && pdir.split) {
 8005f9a:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8005f9e:	b13b      	cbz	r3, 8005fb0 <lfs_dir_commit+0x11c>
            err = lfs_dir_drop(lfs, &pdir, dir);
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	a91a      	add	r1, sp, #104	; 0x68
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 f903 	bl	80061b0 <lfs_dir_drop>
            if (err) {
 8005faa:	4607      	mov	r7, r0
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d199      	bne.n	8005ee4 <lfs_dir_commit+0x50>
    if (dir->erased || dir->count >= 0xff) {
 8005fb0:	7da3      	ldrb	r3, [r4, #22]
 8005fb2:	b913      	cbnz	r3, 8005fba <lfs_dir_commit+0x126>
 8005fb4:	8aa3      	ldrh	r3, [r4, #20]
 8005fb6:	2bfe      	cmp	r3, #254	; 0xfe
 8005fb8:	d92b      	bls.n	8006012 <lfs_dir_commit+0x17e>
        struct lfs_commit commit = {
 8005fba:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbe:	911d      	str	r1, [sp, #116]	; 0x74
            .end = lfs->cfg->block_size - 8,
 8005fc0:	6ea9      	ldr	r1, [r5, #104]	; 0x68
        struct lfs_commit commit = {
 8005fc2:	6823      	ldr	r3, [r4, #0]
            .end = lfs->cfg->block_size - 8,
 8005fc4:	69c9      	ldr	r1, [r1, #28]
            .off = dir->off,
 8005fc6:	68e2      	ldr	r2, [r4, #12]
        struct lfs_commit commit = {
 8005fc8:	931a      	str	r3, [sp, #104]	; 0x68
            .end = lfs->cfg->block_size - 8,
 8005fca:	3908      	subs	r1, #8
        struct lfs_commit commit = {
 8005fcc:	911f      	str	r1, [sp, #124]	; 0x7c
        int err = lfs_dir_traverse(lfs,
 8005fce:	a90d      	add	r1, sp, #52	; 0x34
            .ptag = dir->etag,
 8005fd0:	6923      	ldr	r3, [r4, #16]
        int err = lfs_dir_traverse(lfs,
 8005fd2:	9108      	str	r1, [sp, #32]
 8005fd4:	4974      	ldr	r1, [pc, #464]	; (80061a8 <lfs_dir_commit+0x314>)
 8005fd6:	9107      	str	r1, [sp, #28]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	9106      	str	r1, [sp, #24]
 8005fdc:	9105      	str	r1, [sp, #20]
 8005fde:	9104      	str	r1, [sp, #16]
 8005fe0:	9103      	str	r1, [sp, #12]
 8005fe2:	9102      	str	r1, [sp, #8]
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005fe4:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
        int err = lfs_dir_traverse(lfs,
 8005fe8:	e88d 0600 	stmia.w	sp, {r9, sl}
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
        struct lfs_commit commit = {
 8005ff0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ff2:	931c      	str	r3, [sp, #112]	; 0x70
 8005ff4:	921e      	str	r2, [sp, #120]	; 0x78
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005ff6:	950d      	str	r5, [sp, #52]	; 0x34
 8005ff8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
        int err = lfs_dir_traverse(lfs,
 8005ffc:	f7fd ff50 	bl	8003ea0 <lfs_dir_traverse>
        if (err) {
 8006000:	4607      	mov	r7, r0
 8006002:	b1c0      	cbz	r0, 8006036 <lfs_dir_commit+0x1a2>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8006004:	f117 0f1c 	cmn.w	r7, #28
 8006008:	d003      	beq.n	8006012 <lfs_dir_commit+0x17e>
 800600a:	f117 0f54 	cmn.w	r7, #84	; 0x54
 800600e:	f47f af69 	bne.w	8005ee4 <lfs_dir_commit+0x50>
    rcache->block = LFS_BLOCK_NULL;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	612b      	str	r3, [r5, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 8006018:	8aa3      	ldrh	r3, [r4, #20]
 800601a:	9302      	str	r3, [sp, #8]
 800601c:	2300      	movs	r3, #0
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	9400      	str	r4, [sp, #0]
 8006022:	4653      	mov	r3, sl
 8006024:	464a      	mov	r2, r9
 8006026:	4621      	mov	r1, r4
 8006028:	4628      	mov	r0, r5
 800602a:	f7ff fc9d 	bl	8005968 <lfs_dir_compact>
        if (err) {
 800602e:	4607      	mov	r7, r0
 8006030:	2800      	cmp	r0, #0
 8006032:	d047      	beq.n	80060c4 <lfs_dir_commit+0x230>
 8006034:	e756      	b.n	8005ee4 <lfs_dir_commit+0x50>
        lfs_gstate_xor(&delta, &lfs->gstate);
 8006036:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800603a:	4619      	mov	r1, r3
        lfs_gstate_t delta = {0};
 800603c:	900f      	str	r0, [sp, #60]	; 0x3c
 800603e:	9010      	str	r0, [sp, #64]	; 0x40
 8006040:	9011      	str	r0, [sp, #68]	; 0x44
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8006042:	f105 063c 	add.w	r6, r5, #60	; 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 8006046:	a80f      	add	r0, sp, #60	; 0x3c
 8006048:	930b      	str	r3, [sp, #44]	; 0x2c
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800604a:	f105 0848 	add.w	r8, r5, #72	; 0x48
        lfs_gstate_xor(&delta, &lfs->gstate);
 800604e:	f7fd fb44 	bl	80036da <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8006052:	4631      	mov	r1, r6
 8006054:	a80f      	add	r0, sp, #60	; 0x3c
 8006056:	f7fd fb40 	bl	80036da <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800605a:	a80f      	add	r0, sp, #60	; 0x3c
 800605c:	4641      	mov	r1, r8
 800605e:	f7fd fb3c 	bl	80036da <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006064:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006068:	f023 0303 	bic.w	r3, r3, #3
        if (!lfs_gstate_iszero(&delta)) {
 800606c:	a80f      	add	r0, sp, #60	; 0x3c
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
        if (!lfs_gstate_iszero(&delta)) {
 8006070:	f7fd fb40 	bl	80036f4 <lfs_gstate_iszero>
 8006074:	b988      	cbnz	r0, 800609a <lfs_dir_commit+0x206>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006076:	aa0f      	add	r2, sp, #60	; 0x3c
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	f7fe f884 	bl	8004188 <lfs_dir_getgstate>
            if (err) {
 8006080:	4607      	mov	r7, r0
 8006082:	2800      	cmp	r0, #0
 8006084:	f47f af2e 	bne.w	8005ee4 <lfs_dir_commit+0x50>
            err = lfs_dir_commitattr(lfs, &commit,
 8006088:	ab0f      	add	r3, sp, #60	; 0x3c
 800608a:	4a48      	ldr	r2, [pc, #288]	; (80061ac <lfs_dir_commit+0x318>)
 800608c:	4659      	mov	r1, fp
 800608e:	4628      	mov	r0, r5
 8006090:	f7fe fb83 	bl	800479a <lfs_dir_commitattr>
            if (err) {
 8006094:	4607      	mov	r7, r0
 8006096:	2800      	cmp	r0, #0
 8006098:	d1b4      	bne.n	8006004 <lfs_dir_commit+0x170>
        err = lfs_dir_commitcrc(lfs, &commit);
 800609a:	4659      	mov	r1, fp
 800609c:	4628      	mov	r0, r5
 800609e:	f7fe fbd9 	bl	8004854 <lfs_dir_commitcrc>
        if (err) {
 80060a2:	4607      	mov	r7, r0
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d1ad      	bne.n	8006004 <lfs_dir_commit+0x170>
        dir->off = commit.off;
 80060a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060aa:	60e3      	str	r3, [r4, #12]
        dir->etag = commit.ptag;
 80060ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80060ae:	6123      	str	r3, [r4, #16]
        lfs->gdisk = lfs->gstate;
 80060b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060b6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80060ba:	64af      	str	r7, [r5, #72]	; 0x48
 80060bc:	f8c8 7004 	str.w	r7, [r8, #4]
 80060c0:	f8c8 7008 	str.w	r7, [r8, #8]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80060c4:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
                    d->m.pair[0] = LFS_BLOCK_NULL;
 80060c8:	f04f 3bff 	mov.w	fp, #4294967295
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80060cc:	4646      	mov	r6, r8
 80060ce:	b926      	cbnz	r6, 80060da <lfs_dir_commit+0x246>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80060d0:	f1b8 0f00 	cmp.w	r8, #0
 80060d4:	d147      	bne.n	8006166 <lfs_dir_commit+0x2d2>
    return 0;
 80060d6:	4647      	mov	r7, r8
 80060d8:	e737      	b.n	8005f4a <lfs_dir_commit+0xb6>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 80060da:	f106 0708 	add.w	r7, r6, #8
 80060de:	42bc      	cmp	r4, r7
 80060e0:	d101      	bne.n	80060e6 <lfs_dir_commit+0x252>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80060e2:	6836      	ldr	r6, [r6, #0]
 80060e4:	e7f3      	b.n	80060ce <lfs_dir_commit+0x23a>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 80060e6:	a912      	add	r1, sp, #72	; 0x48
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7fd fadb 	bl	80036a4 <lfs_pair_cmp>
 80060ee:	4684      	mov	ip, r0
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d1f6      	bne.n	80060e2 <lfs_dir_commit+0x24e>
            d->m = *dir;
 80060f4:	46a6      	mov	lr, r4
 80060f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80060fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80060fc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8006100:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 8006104:	45d4      	cmp	ip, sl
 8006106:	daec      	bge.n	80060e2 <lfs_dir_commit+0x24e>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006108:	f859 303c 	ldr.w	r3, [r9, ip, lsl #3]
 800610c:	f240 41ff 	movw	r1, #1279	; 0x4ff
    return (tag & 0x7ff00000) >> 20;
 8006110:	f3c3 520a 	ubfx	r2, r3, #20, #11
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006114:	428a      	cmp	r2, r1
 8006116:	d115      	bne.n	8006144 <lfs_dir_commit+0x2b0>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 8006118:	88b2      	ldrh	r2, [r6, #4]
    return (tag & 0x000ffc00) >> 10;
 800611a:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800611e:	4293      	cmp	r3, r2
 8006120:	d106      	bne.n	8006130 <lfs_dir_commit+0x29c>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 8006122:	f8c6 b008 	str.w	fp, [r6, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 8006126:	f8c6 b00c 	str.w	fp, [r6, #12]
            for (int i = 0; i < attrcount; i++) {
 800612a:	f10c 0c01 	add.w	ip, ip, #1
 800612e:	e7e9      	b.n	8006104 <lfs_dir_commit+0x270>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006130:	d2fb      	bcs.n	800612a <lfs_dir_commit+0x296>
                    if (d->type == LFS_TYPE_DIR) {
 8006132:	79b3      	ldrb	r3, [r6, #6]
                    d->id -= 1;
 8006134:	3a01      	subs	r2, #1
                    if (d->type == LFS_TYPE_DIR) {
 8006136:	2b02      	cmp	r3, #2
                    d->id -= 1;
 8006138:	80b2      	strh	r2, [r6, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800613a:	d1f6      	bne.n	800612a <lfs_dir_commit+0x296>
                        ((lfs_dir_t*)d)->pos -= 1;
 800613c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800613e:	3b01      	subs	r3, #1
                        ((lfs_dir_t*)d)->pos += 1;
 8006140:	62b3      	str	r3, [r6, #40]	; 0x28
 8006142:	e7f2      	b.n	800612a <lfs_dir_commit+0x296>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8006144:	f240 4101 	movw	r1, #1025	; 0x401
 8006148:	428a      	cmp	r2, r1
 800614a:	d1ee      	bne.n	800612a <lfs_dir_commit+0x296>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 800614c:	88b2      	ldrh	r2, [r6, #4]
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800614e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8006152:	429a      	cmp	r2, r3
 8006154:	d3e9      	bcc.n	800612a <lfs_dir_commit+0x296>
                    if (d->type == LFS_TYPE_DIR) {
 8006156:	79b3      	ldrb	r3, [r6, #6]
                    d->id += 1;
 8006158:	3201      	adds	r2, #1
                    if (d->type == LFS_TYPE_DIR) {
 800615a:	2b02      	cmp	r3, #2
                    d->id += 1;
 800615c:	80b2      	strh	r2, [r6, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800615e:	d1e4      	bne.n	800612a <lfs_dir_commit+0x296>
                        ((lfs_dir_t*)d)->pos += 1;
 8006160:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006162:	3301      	adds	r3, #1
 8006164:	e7ec      	b.n	8006140 <lfs_dir_commit+0x2ac>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 8006166:	f108 0408 	add.w	r4, r8, #8
 800616a:	a912      	add	r1, sp, #72	; 0x48
 800616c:	4620      	mov	r0, r4
 800616e:	f7fd fa99 	bl	80036a4 <lfs_pair_cmp>
 8006172:	b950      	cbnz	r0, 800618a <lfs_dir_commit+0x2f6>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8006174:	f108 0620 	add.w	r6, r8, #32
            while (d->id >= d->m.count && d->m.split) {
 8006178:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800617c:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 8006180:	4293      	cmp	r3, r2
 8006182:	d302      	bcc.n	800618a <lfs_dir_commit+0x2f6>
 8006184:	f898 101f 	ldrb.w	r1, [r8, #31]
 8006188:	b911      	cbnz	r1, 8006190 <lfs_dir_commit+0x2fc>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800618a:	f8d8 8000 	ldr.w	r8, [r8]
 800618e:	e79f      	b.n	80060d0 <lfs_dir_commit+0x23c>
                d->id -= d->m.count;
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	f8a8 3004 	strh.w	r3, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8006196:	4632      	mov	r2, r6
 8006198:	4621      	mov	r1, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f7fd fe48 	bl	8003e30 <lfs_dir_fetch>
                if (err) {
 80061a0:	4607      	mov	r7, r0
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d0e8      	beq.n	8006178 <lfs_dir_commit+0x2e4>
 80061a6:	e6d0      	b.n	8005f4a <lfs_dir_commit+0xb6>
 80061a8:	0800484b 	.word	0x0800484b
 80061ac:	7ffffc0c 	.word	0x7ffffc0c

080061b0 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80061b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b2:	4614      	mov	r4, r2
 80061b4:	460e      	mov	r6, r1
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80061b6:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80061ba:	4621      	mov	r1, r4
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80061bc:	4605      	mov	r5, r0
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80061be:	f7fd ffe3 	bl	8004188 <lfs_dir_getgstate>
    if (err) {
 80061c2:	b970      	cbnz	r0, 80061e2 <lfs_dir_drop+0x32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80061c4:	7de3      	ldrb	r3, [r4, #23]
 80061c6:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <lfs_dir_drop+0x38>)
 80061cc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80061d0:	9300      	str	r3, [sp, #0]
    lfs_pair_tole32(tail->tail);
 80061d2:	3418      	adds	r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80061d4:	2301      	movs	r3, #1
 80061d6:	466a      	mov	r2, sp
 80061d8:	4631      	mov	r1, r6
 80061da:	4628      	mov	r0, r5
 80061dc:	9401      	str	r4, [sp, #4]
 80061de:	f7ff fe59 	bl	8005e94 <lfs_dir_commit>
}
 80061e2:	b002      	add	sp, #8
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	bf00      	nop
 80061e8:	000ffc08 	.word	0x000ffc08

080061ec <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80061ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 80061f2:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80061f4:	f412 6fe0 	tst.w	r2, #1792	; 0x700
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80061f8:	b0a2      	sub	sp, #136	; 0x88
 80061fa:	4604      	mov	r4, r0
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80061fc:	f000 808d 	beq.w	800631a <lfs_fs_forceconsistency+0x12e>
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006200:	4a55      	ldr	r2, [pc, #340]	; (8006358 <lfs_fs_forceconsistency+0x16c>)
 8006202:	9202      	str	r2, [sp, #8]
 8006204:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	4605      	mov	r5, r0
 8006210:	f241 021a 	movw	r2, #4122	; 0x101a
 8006214:	f855 3f40 	ldr.w	r3, [r5, #64]!
 8006218:	4950      	ldr	r1, [pc, #320]	; (800635c <lfs_fs_forceconsistency+0x170>)
 800621a:	4851      	ldr	r0, [pc, #324]	; (8006360 <lfs_fs_forceconsistency+0x174>)
 800621c:	f000 fd2c 	bl	8006c78 <iprintf>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006220:	462a      	mov	r2, r5
 8006222:	a91a      	add	r1, sp, #104	; 0x68
 8006224:	4620      	mov	r0, r4
 8006226:	f7fd fe03 	bl	8003e30 <lfs_dir_fetch>
    if (err) {
 800622a:	b9a8      	cbnz	r0, 8006258 <lfs_fs_forceconsistency+0x6c>
    return (tag & 0x000ffc00) >> 10;
 800622c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800622e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006230:	6360      	str	r0, [r4, #52]	; 0x34
    return (tag & 0x000ffc00) >> 10;
 8006232:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006236:	4b4b      	ldr	r3, [pc, #300]	; (8006364 <lfs_fs_forceconsistency+0x178>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006238:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800623a:	400b      	ands	r3, r1
 800623c:	6323      	str	r3, [r4, #48]	; 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800623e:	4b4a      	ldr	r3, [pc, #296]	; (8006368 <lfs_fs_forceconsistency+0x17c>)
 8006240:	9005      	str	r0, [sp, #20]
 8006242:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	aa04      	add	r2, sp, #16
 800624a:	2301      	movs	r3, #1
 800624c:	a91a      	add	r1, sp, #104	; 0x68
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff fe20 	bl	8005e94 <lfs_dir_commit>
    if (err) {
 8006254:	2800      	cmp	r0, #0
 8006256:	d060      	beq.n	800631a <lfs_fs_forceconsistency+0x12e>
}
 8006258:	b022      	add	sp, #136	; 0x88
 800625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800625e:	aa10      	add	r2, sp, #64	; 0x40
 8006260:	a912      	add	r1, sp, #72	; 0x48
 8006262:	4620      	mov	r0, r4
 8006264:	f7fd fde4 	bl	8003e30 <lfs_dir_fetch>
        if (err) {
 8006268:	2800      	cmp	r0, #0
 800626a:	d1f5      	bne.n	8006258 <lfs_fs_forceconsistency+0x6c>
        if (!pdir.split) {
 800626c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8006270:	2b00      	cmp	r3, #0
 8006272:	d147      	bne.n	8006304 <lfs_fs_forceconsistency+0x118>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006274:	aa1a      	add	r2, sp, #104	; 0x68
 8006276:	a910      	add	r1, sp, #64	; 0x40
 8006278:	4620      	mov	r0, r4
 800627a:	f7fd fd99 	bl	8003db0 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800627e:	1e03      	subs	r3, r0, #0
 8006280:	da13      	bge.n	80062aa <lfs_fs_forceconsistency+0xbe>
 8006282:	1c9a      	adds	r2, r3, #2
 8006284:	d13c      	bne.n	8006300 <lfs_fs_forceconsistency+0x114>
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	f241 024b 	movw	r2, #4171	; 0x104b
 800628e:	4933      	ldr	r1, [pc, #204]	; (800635c <lfs_fs_forceconsistency+0x170>)
 8006290:	9601      	str	r6, [sp, #4]
 8006292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006294:	4835      	ldr	r0, [pc, #212]	; (800636c <lfs_fs_forceconsistency+0x180>)
 8006296:	f000 fcef 	bl	8006c78 <iprintf>
                err = lfs_dir_drop(lfs, &pdir, &dir);
 800629a:	aa12      	add	r2, sp, #72	; 0x48
 800629c:	a90a      	add	r1, sp, #40	; 0x28
 800629e:	4620      	mov	r0, r4
 80062a0:	f7ff ff86 	bl	80061b0 <lfs_dir_drop>
                if (err) {
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d049      	beq.n	800633c <lfs_fs_forceconsistency+0x150>
 80062a8:	e7d6      	b.n	8006258 <lfs_fs_forceconsistency+0x6c>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 80062aa:	ad06      	add	r5, sp, #24
 80062ac:	9500      	str	r5, [sp, #0]
 80062ae:	463a      	mov	r2, r7
 80062b0:	a91a      	add	r1, sp, #104	; 0x68
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7fd ff5c 	bl	8004170 <lfs_dir_get>
            if (res < 0) {
 80062b8:	2800      	cmp	r0, #0
 80062ba:	dbcd      	blt.n	8006258 <lfs_fs_forceconsistency+0x6c>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80062bc:	9906      	ldr	r1, [sp, #24]
 80062be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062c2:	4299      	cmp	r1, r3
 80062c4:	d102      	bne.n	80062cc <lfs_fs_forceconsistency+0xe0>
 80062c6:	9807      	ldr	r0, [sp, #28]
 80062c8:	4290      	cmp	r0, r2
 80062ca:	d01b      	beq.n	8006304 <lfs_fs_forceconsistency+0x118>
 80062cc:	4291      	cmp	r1, r2
 80062ce:	d102      	bne.n	80062d6 <lfs_fs_forceconsistency+0xea>
            if (!lfs_pair_sync(pair, pdir.tail)) {
 80062d0:	9807      	ldr	r0, [sp, #28]
 80062d2:	4283      	cmp	r3, r0
 80062d4:	d016      	beq.n	8006304 <lfs_fs_forceconsistency+0x118>
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 80062d6:	9807      	ldr	r0, [sp, #28]
 80062d8:	9002      	str	r0, [sp, #8]
 80062da:	9101      	str	r1, [sp, #4]
 80062dc:	9200      	str	r2, [sp, #0]
 80062de:	9603      	str	r6, [sp, #12]
 80062e0:	f241 0262 	movw	r2, #4194	; 0x1062
 80062e4:	491d      	ldr	r1, [pc, #116]	; (800635c <lfs_fs_forceconsistency+0x170>)
 80062e6:	4822      	ldr	r0, [pc, #136]	; (8006370 <lfs_fs_forceconsistency+0x184>)
 80062e8:	f000 fcc6 	bl	8006c78 <iprintf>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 80062ec:	2301      	movs	r3, #1
 80062ee:	aa08      	add	r2, sp, #32
 80062f0:	a90a      	add	r1, sp, #40	; 0x28
 80062f2:	4620      	mov	r0, r4
 80062f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80062f8:	9509      	str	r5, [sp, #36]	; 0x24
 80062fa:	f7ff fdcb 	bl	8005e94 <lfs_dir_commit>
 80062fe:	e7d1      	b.n	80062a4 <lfs_fs_forceconsistency+0xb8>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006300:	4618      	mov	r0, r3
 8006302:	e7a9      	b.n	8006258 <lfs_fs_forceconsistency+0x6c>
        pdir = dir;
 8006304:	ad12      	add	r5, sp, #72	; 0x48
 8006306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006308:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800630c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006310:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006314:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8006318:	e010      	b.n	800633c <lfs_fs_forceconsistency+0x150>
    return tag & 0x000003ff;
 800631a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800631c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006320:	b1c3      	cbz	r3, 8006354 <lfs_fs_forceconsistency+0x168>
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006322:	2220      	movs	r2, #32
 8006324:	2100      	movs	r1, #0
 8006326:	a80a      	add	r0, sp, #40	; 0x28
 8006328:	f000 fbf2 	bl	8006b10 <memset>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800632c:	4f11      	ldr	r7, [pc, #68]	; (8006374 <lfs_fs_forceconsistency+0x188>)
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 800632e:	4e0a      	ldr	r6, [pc, #40]	; (8006358 <lfs_fs_forceconsistency+0x16c>)
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 8006330:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8006378 <lfs_fs_forceconsistency+0x18c>
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006334:	2301      	movs	r3, #1
 8006336:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800633a:	9311      	str	r3, [sp, #68]	; 0x44
    while (!lfs_pair_isnull(pdir.tail)) {
 800633c:	a810      	add	r0, sp, #64	; 0x40
 800633e:	f7fd f9a7 	bl	8003690 <lfs_pair_isnull>
 8006342:	2800      	cmp	r0, #0
 8006344:	d08b      	beq.n	800625e <lfs_fs_forceconsistency+0x72>
    return tag & 0x000003ff;
 8006346:	4620      	mov	r0, r4
 8006348:	f850 1f30 	ldr.w	r1, [r0, #48]!
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800634c:	4249      	negs	r1, r1
 800634e:	b249      	sxtb	r1, r1
 8006350:	f7fd fa5f 	bl	8003812 <lfs_fs_preporphans.isra.13>
    return 0;
 8006354:	2000      	movs	r0, #0
 8006356:	e77f      	b.n	8006258 <lfs_fs_forceconsistency+0x6c>
 8006358:	08007d9e 	.word	0x08007d9e
 800635c:	08007f20 	.word	0x08007f20
 8006360:	080084d8 	.word	0x080084d8
 8006364:	800003ff 	.word	0x800003ff
 8006368:	4ff00000 	.word	0x4ff00000
 800636c:	08008509 	.word	0x08008509
 8006370:	08008536 	.word	0x08008536
 8006374:	7ffffc00 	.word	0x7ffffc00
 8006378:	600ffc08 	.word	0x600ffc08

0800637c <lfs_file_sync>:
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
 800637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
 8006380:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8006484 <lfs_file_sync+0x108>
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
 8006384:	460c      	mov	r4, r1
 8006386:	b088      	sub	sp, #32
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
 8006388:	4603      	mov	r3, r0
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
 800638a:	4607      	mov	r7, r0
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
 800638c:	e88d 0110 	stmia.w	sp, {r4, r8}
 8006390:	f640 22af 	movw	r2, #2735	; 0xaaf
 8006394:	4938      	ldr	r1, [pc, #224]	; (8006478 <lfs_file_sync+0xfc>)
 8006396:	4839      	ldr	r0, [pc, #228]	; (800647c <lfs_file_sync+0x100>)
 8006398:	f000 fc6e 	bl	8006c78 <iprintf>
    if (file->flags & LFS_F_ERRED) {
 800639c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800639e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80063a2:	4645      	mov	r5, r8
 80063a4:	d00d      	beq.n	80063c2 <lfs_file_sync+0x46>
        LFS_TRACE("lfs_file_sync -> %d", 0);
 80063a6:	f8cd 8000 	str.w	r8, [sp]
 80063aa:	2300      	movs	r3, #0
 80063ac:	f640 22b4 	movw	r2, #2740	; 0xab4
 80063b0:	4931      	ldr	r1, [pc, #196]	; (8006478 <lfs_file_sync+0xfc>)
 80063b2:	4833      	ldr	r0, [pc, #204]	; (8006480 <lfs_file_sync+0x104>)
 80063b4:	f000 fc60 	bl	8006c78 <iprintf>
        return 0;
 80063b8:	2600      	movs	r6, #0
}
 80063ba:	4630      	mov	r0, r6
 80063bc:	b008      	add	sp, #32
 80063be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int err = lfs_file_flush(lfs, file);
 80063c2:	4621      	mov	r1, r4
 80063c4:	4638      	mov	r0, r7
 80063c6:	f7ff f8c5 	bl	8005554 <lfs_file_flush>
 80063ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (err) {
 80063cc:	4606      	mov	r6, r0
 80063ce:	b160      	cbz	r0, 80063ea <lfs_file_sync+0x6e>
        file->flags |= LFS_F_ERRED;
 80063d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80063d4:	6322      	str	r2, [r4, #48]	; 0x30
        LFS_TRACE("lfs_file_sync -> %d", err);
 80063d6:	f8cd 8000 	str.w	r8, [sp]
 80063da:	4603      	mov	r3, r0
 80063dc:	f640 22bb 	movw	r2, #2747	; 0xabb
    LFS_TRACE("lfs_file_sync -> %d", 0);
 80063e0:	4925      	ldr	r1, [pc, #148]	; (8006478 <lfs_file_sync+0xfc>)
 80063e2:	4827      	ldr	r0, [pc, #156]	; (8006480 <lfs_file_sync+0x104>)
 80063e4:	f000 fc48 	bl	8006c78 <iprintf>
 80063e8:	e7e7      	b.n	80063ba <lfs_file_sync+0x3e>
    if ((file->flags & LFS_F_DIRTY) &&
 80063ea:	03d1      	lsls	r1, r2, #15
 80063ec:	d53f      	bpl.n	800646e <lfs_file_sync+0xf2>
            !lfs_pair_isnull(file->m.pair)) {
 80063ee:	f104 0808 	add.w	r8, r4, #8
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7fd f94c 	bl	8003690 <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d138      	bne.n	800646e <lfs_file_sync+0xf2>
        if (file->flags & LFS_F_INLINE) {
 80063fc:	02d3      	lsls	r3, r2, #11
 80063fe:	d528      	bpl.n	8006452 <lfs_file_sync+0xd6>
            buffer = file->cache.buffer;
 8006400:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            size = file->ctz.size;
 8006402:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 8006404:	f240 2001 	movw	r0, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006408:	88a1      	ldrh	r1, [r4, #4]
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	0289      	lsls	r1, r1, #10
 800640e:	430a      	orrs	r2, r1
 8006410:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8006414:	9204      	str	r2, [sp, #16]
 8006416:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006418:	6893      	ldr	r3, [r2, #8]
 800641a:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800641e:	430b      	orrs	r3, r1
 8006420:	9306      	str	r3, [sp, #24]
 8006422:	6853      	ldr	r3, [r2, #4]
 8006424:	9307      	str	r3, [sp, #28]
 8006426:	4638      	mov	r0, r7
 8006428:	2302      	movs	r3, #2
 800642a:	aa04      	add	r2, sp, #16
 800642c:	4641      	mov	r1, r8
 800642e:	f7ff fd31 	bl	8005e94 <lfs_dir_commit>
 8006432:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (err) {
 8006434:	4607      	mov	r7, r0
 8006436:	b1b8      	cbz	r0, 8006468 <lfs_file_sync+0xec>
            file->flags |= LFS_F_ERRED;
 8006438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800643c:	6323      	str	r3, [r4, #48]	; 0x30
            LFS_TRACE("lfs_file_sync -> %d", err);
 800643e:	9500      	str	r5, [sp, #0]
 8006440:	4603      	mov	r3, r0
 8006442:	f640 22dc 	movw	r2, #2780	; 0xadc
 8006446:	490c      	ldr	r1, [pc, #48]	; (8006478 <lfs_file_sync+0xfc>)
 8006448:	480d      	ldr	r0, [pc, #52]	; (8006480 <lfs_file_sync+0x104>)
 800644a:	f000 fc15 	bl	8006c78 <iprintf>
            return err;
 800644e:	463e      	mov	r6, r7
 8006450:	e7b3      	b.n	80063ba <lfs_file_sync+0x3e>
            ctz = file->ctz;
 8006452:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8006456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800645a:	ab02      	add	r3, sp, #8
 800645c:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 8006460:	2208      	movs	r2, #8
            type = LFS_TYPE_CTZSTRUCT;
 8006462:	f240 2002 	movw	r0, #514	; 0x202
 8006466:	e7cf      	b.n	8006408 <lfs_file_sync+0x8c>
        file->flags &= ~LFS_F_DIRTY;
 8006468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646c:	6323      	str	r3, [r4, #48]	; 0x30
    LFS_TRACE("lfs_file_sync -> %d", 0);
 800646e:	9500      	str	r5, [sp, #0]
 8006470:	2300      	movs	r3, #0
 8006472:	f640 22e3 	movw	r2, #2787	; 0xae3
 8006476:	e7b3      	b.n	80063e0 <lfs_file_sync+0x64>
 8006478:	08007f20 	.word	0x08007f20
 800647c:	0800826c 	.word	0x0800826c
 8006480:	08008292 	.word	0x08008292
 8006484:	08007d9e 	.word	0x08007d9e

08006488 <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
 800648a:	4d18      	ldr	r5, [pc, #96]	; (80064ec <lfs_file_close+0x64>)
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800648c:	460c      	mov	r4, r1
 800648e:	4606      	mov	r6, r0
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
 8006490:	4603      	mov	r3, r0
 8006492:	f640 12f4 	movw	r2, #2548	; 0x9f4
 8006496:	4916      	ldr	r1, [pc, #88]	; (80064f0 <lfs_file_close+0x68>)
 8006498:	4816      	ldr	r0, [pc, #88]	; (80064f4 <lfs_file_close+0x6c>)
 800649a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800649e:	f000 fbeb 	bl	8006c78 <iprintf>
    int err = lfs_file_sync(lfs, file);
 80064a2:	4621      	mov	r1, r4
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ff69 	bl	800637c <lfs_file_sync>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80064aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    int err = lfs_file_sync(lfs, file);
 80064ac:	4607      	mov	r7, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80064ae:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80064b2:	b11b      	cbz	r3, 80064bc <lfs_file_close+0x34>
        if (*p == (struct lfs_mlist*)file) {
 80064b4:	429c      	cmp	r4, r3
 80064b6:	d116      	bne.n	80064e6 <lfs_file_close+0x5e>
            *p = (*p)->next;
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	6013      	str	r3, [r2, #0]
    if (!file->cfg->buffer) {
 80064bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	b913      	cbnz	r3, 80064c8 <lfs_file_close+0x40>
    free(p);
 80064c2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80064c4:	f000 fb02 	bl	8006acc <free>
    file->flags &= ~LFS_F_OPENED;
 80064c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    LFS_TRACE("lfs_file_close -> %d", err);
 80064ca:	9500      	str	r5, [sp, #0]
    file->flags &= ~LFS_F_OPENED;
 80064cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064d0:	6323      	str	r3, [r4, #48]	; 0x30
    LFS_TRACE("lfs_file_close -> %d", err);
 80064d2:	f640 2207 	movw	r2, #2567	; 0xa07
 80064d6:	463b      	mov	r3, r7
 80064d8:	4905      	ldr	r1, [pc, #20]	; (80064f0 <lfs_file_close+0x68>)
 80064da:	4807      	ldr	r0, [pc, #28]	; (80064f8 <lfs_file_close+0x70>)
 80064dc:	f000 fbcc 	bl	8006c78 <iprintf>
}
 80064e0:	4638      	mov	r0, r7
 80064e2:	b003      	add	sp, #12
 80064e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80064e6:	461a      	mov	r2, r3
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	e7e2      	b.n	80064b2 <lfs_file_close+0x2a>
 80064ec:	08007d9e 	.word	0x08007d9e
 80064f0:	08007f20 	.word	0x08007f20
 80064f4:	08007f72 	.word	0x08007f72
 80064f8:	08007f99 	.word	0x08007f99

080064fc <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	b091      	sub	sp, #68	; 0x44
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
 8006502:	f8df a29c 	ldr.w	sl, [pc, #668]	; 80067a0 <lfs_file_opencfg+0x2a4>
        const struct lfs_file_config *cfg) {
 8006506:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
 800650a:	f8cd a01c 	str.w	sl, [sp, #28]
        const struct lfs_file_config *cfg) {
 800650e:	4699      	mov	r9, r3
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
 8006510:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800651a:	9305      	str	r3, [sp, #20]
 800651c:	f8d8 3000 	ldr.w	r3, [r8]
        const struct lfs_file_config *cfg) {
 8006520:	9209      	str	r2, [sp, #36]	; 0x24
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	9201      	str	r2, [sp, #4]
 8006526:	4603      	mov	r3, r0
 8006528:	9100      	str	r1, [sp, #0]
        const struct lfs_file_config *cfg) {
 800652a:	4606      	mov	r6, r0
 800652c:	460c      	mov	r4, r1
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
 800652e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006532:	f8cd 9008 	str.w	r9, [sp, #8]
 8006536:	f640 1255 	movw	r2, #2389	; 0x955
 800653a:	4993      	ldr	r1, [pc, #588]	; (8006788 <lfs_file_opencfg+0x28c>)
 800653c:	4893      	ldr	r0, [pc, #588]	; (800678c <lfs_file_opencfg+0x290>)
 800653e:	f000 fb9b 	bl	8006c78 <iprintf>
    if ((flags & 3) != LFS_O_RDONLY) {
 8006542:	f009 0303 	and.w	r3, r9, #3
 8006546:	2b01      	cmp	r3, #1
 8006548:	4657      	mov	r7, sl
 800654a:	d00e      	beq.n	800656a <lfs_file_opencfg+0x6e>
        int err = lfs_fs_forceconsistency(lfs);
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff fe4d 	bl	80061ec <lfs_fs_forceconsistency>
        if (err) {
 8006552:	4605      	mov	r5, r0
 8006554:	b148      	cbz	r0, 800656a <lfs_file_opencfg+0x6e>
            LFS_TRACE("lfs_file_opencfg -> %d", err);
 8006556:	f8cd a000 	str.w	sl, [sp]
 800655a:	4603      	mov	r3, r0
 800655c:	f640 125b 	movw	r2, #2395	; 0x95b
    LFS_TRACE("lfs_file_opencfg -> %d", err);
 8006560:	4989      	ldr	r1, [pc, #548]	; (8006788 <lfs_file_opencfg+0x28c>)
 8006562:	488b      	ldr	r0, [pc, #556]	; (8006790 <lfs_file_opencfg+0x294>)
 8006564:	f000 fb88 	bl	8006c78 <iprintf>
    return err;
 8006568:	e077      	b.n	800665a <lfs_file_opencfg+0x15e>
    file->flags = flags | LFS_F_OPENED;
 800656a:	f449 1300 	orr.w	r3, r9, #2097152	; 0x200000
    file->cfg = cfg;
 800656e:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
 8006572:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006574:	f104 0808 	add.w	r8, r4, #8
    file->pos = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
 800657c:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
 800657e:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006580:	aa09      	add	r2, sp, #36	; 0x24
 8006582:	1d23      	adds	r3, r4, #4
 8006584:	4641      	mov	r1, r8
 8006586:	4630      	mov	r0, r6
 8006588:	f7fd fe18 	bl	80041bc <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800658c:	1e05      	subs	r5, r0, #0
 800658e:	da15      	bge.n	80065bc <lfs_file_opencfg+0xc0>
 8006590:	1ca9      	adds	r1, r5, #2
 8006592:	d106      	bne.n	80065a2 <lfs_file_opencfg+0xa6>
 8006594:	88a2      	ldrh	r2, [r4, #4]
 8006596:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800659a:	429a      	cmp	r2, r3
 800659c:	d10e      	bne.n	80065bc <lfs_file_opencfg+0xc0>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800659e:	f06f 0501 	mvn.w	r5, #1
    file->flags |= LFS_F_ERRED;
 80065a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065a8:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
 80065aa:	4621      	mov	r1, r4
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7ff ff6b 	bl	8006488 <lfs_file_close>
    LFS_TRACE("lfs_file_opencfg -> %d", err);
 80065b2:	9700      	str	r7, [sp, #0]
 80065b4:	462b      	mov	r3, r5
 80065b6:	f640 12e5 	movw	r2, #2533	; 0x9e5
 80065ba:	e7d1      	b.n	8006560 <lfs_file_opencfg+0x64>
    file->type = LFS_TYPE_REG;
 80065bc:	2301      	movs	r3, #1
 80065be:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
 80065c0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80065c2:	6023      	str	r3, [r4, #0]
    if (tag == LFS_ERR_NOENT) {
 80065c4:	1caa      	adds	r2, r5, #2
    lfs->mlist = (struct lfs_mlist*)file;
 80065c6:	62b4      	str	r4, [r6, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
 80065c8:	d14b      	bne.n	8006662 <lfs_file_opencfg+0x166>
        if (!(flags & LFS_O_CREAT)) {
 80065ca:	f419 7f80 	tst.w	r9, #256	; 0x100
 80065ce:	d0e6      	beq.n	800659e <lfs_file_opencfg+0xa2>
        lfs_size_t nlen = strlen(path);
 80065d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065d2:	4628      	mov	r0, r5
 80065d4:	f7f9 fe24 	bl	8000220 <strlen>
        if (nlen > lfs->name_max) {
 80065d8:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80065da:	4298      	cmp	r0, r3
 80065dc:	d902      	bls.n	80065e4 <lfs_file_opencfg+0xe8>
            err = LFS_ERR_NAMETOOLONG;
 80065de:	f06f 0523 	mvn.w	r5, #35	; 0x23
 80065e2:	e7de      	b.n	80065a2 <lfs_file_opencfg+0xa6>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80065e4:	88a2      	ldrh	r2, [r4, #4]
 80065e6:	950d      	str	r5, [sp, #52]	; 0x34
 80065e8:	0292      	lsls	r2, r2, #10
 80065ea:	f042 4380 	orr.w	r3, r2, #1073741824	; 0x40000000
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f2:	4d68      	ldr	r5, [pc, #416]	; (8006794 <lfs_file_opencfg+0x298>)
 80065f4:	930a      	str	r3, [sp, #40]	; 0x28
 80065f6:	f442 1380 	orr.w	r3, r2, #1048576	; 0x100000
 80065fa:	2100      	movs	r1, #0
 80065fc:	4318      	orrs	r0, r3
 80065fe:	432a      	orrs	r2, r5
 8006600:	910b      	str	r1, [sp, #44]	; 0x2c
 8006602:	900c      	str	r0, [sp, #48]	; 0x30
 8006604:	920e      	str	r2, [sp, #56]	; 0x38
 8006606:	910f      	str	r1, [sp, #60]	; 0x3c
 8006608:	2303      	movs	r3, #3
 800660a:	aa0a      	add	r2, sp, #40	; 0x28
 800660c:	4641      	mov	r1, r8
 800660e:	4630      	mov	r0, r6
 8006610:	f7ff fc40 	bl	8005e94 <lfs_dir_commit>
        if (err) {
 8006614:	2800      	cmp	r0, #0
 8006616:	d1e2      	bne.n	80065de <lfs_file_opencfg+0xe2>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006618:	f8df b188 	ldr.w	fp, [pc, #392]	; 80067a4 <lfs_file_opencfg+0x2a8>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800661c:	f04f 0900 	mov.w	r9, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006620:	f04f 0a0c 	mov.w	sl, #12
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006624:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	4591      	cmp	r9, r2
 800662a:	d33d      	bcc.n	80066a8 <lfs_file_opencfg+0x1ac>
    if (file->cfg->buffer) {
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d06e      	beq.n	8006710 <lfs_file_opencfg+0x214>
        file->cache.buffer = file->cfg->buffer;
 8006632:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_cache_zero(lfs, &file->cache);
 8006634:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8006638:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800663a:	f7fd fe6b 	bl	8004314 <lfs_cache_zero.isra.15>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800663e:	f240 2301 	movw	r3, #513	; 0x201
 8006642:	ebb3 5f15 	cmp.w	r3, r5, lsr #20
 8006646:	d06d      	beq.n	8006724 <lfs_file_opencfg+0x228>
    LFS_TRACE("lfs_file_opencfg -> %d", 0);
 8006648:	9700      	str	r7, [sp, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	f640 12de 	movw	r2, #2526	; 0x9de
 8006650:	494d      	ldr	r1, [pc, #308]	; (8006788 <lfs_file_opencfg+0x28c>)
 8006652:	484f      	ldr	r0, [pc, #316]	; (8006790 <lfs_file_opencfg+0x294>)
 8006654:	f000 fb10 	bl	8006c78 <iprintf>
    return 0;
 8006658:	2500      	movs	r5, #0
}
 800665a:	4628      	mov	r0, r5
 800665c:	b011      	add	sp, #68	; 0x44
 800665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (flags & LFS_O_EXCL) {
 8006662:	f419 7f00 	tst.w	r9, #512	; 0x200
 8006666:	f040 8086 	bne.w	8006776 <lfs_file_opencfg+0x27a>
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800666a:	f3c5 500a 	ubfx	r0, r5, #20, #11
 800666e:	2801      	cmp	r0, #1
 8006670:	f040 8084 	bne.w	800677c <lfs_file_opencfg+0x280>
    } else if (flags & LFS_O_TRUNC) {
 8006674:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8006678:	88a0      	ldrh	r0, [r4, #4]
 800667a:	d007      	beq.n	800668c <lfs_file_opencfg+0x190>
        file->flags |= LFS_F_DIRTY;
 800667c:	6b23      	ldr	r3, [r4, #48]	; 0x30
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800667e:	4d45      	ldr	r5, [pc, #276]	; (8006794 <lfs_file_opencfg+0x298>)
        file->flags |= LFS_F_DIRTY;
 8006680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006684:	ea45 2580 	orr.w	r5, r5, r0, lsl #10
        file->flags |= LFS_F_DIRTY;
 8006688:	6323      	str	r3, [r4, #48]	; 0x30
 800668a:	e7c5      	b.n	8006618 <lfs_file_opencfg+0x11c>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800668c:	f104 0328 	add.w	r3, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	4b41      	ldr	r3, [pc, #260]	; (8006798 <lfs_file_opencfg+0x29c>)
 8006694:	4a41      	ldr	r2, [pc, #260]	; (800679c <lfs_file_opencfg+0x2a0>)
 8006696:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800669a:	4641      	mov	r1, r8
 800669c:	4630      	mov	r0, r6
 800669e:	f7fd fd67 	bl	8004170 <lfs_dir_get>
        if (tag < 0) {
 80066a2:	1e05      	subs	r5, r0, #0
 80066a4:	dab8      	bge.n	8006618 <lfs_file_opencfg+0x11c>
 80066a6:	e77c      	b.n	80065a2 <lfs_file_opencfg+0xa6>
        if ((file->flags & 3) != LFS_O_WRONLY) {
 80066a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066aa:	f002 0203 	and.w	r2, r2, #3
 80066ae:	2a02      	cmp	r2, #2
 80066b0:	d107      	bne.n	80066c2 <lfs_file_opencfg+0x1c6>
        if ((file->flags & 3) != LFS_O_RDONLY) {
 80066b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066b4:	f003 0203 	and.w	r2, r3, #3
 80066b8:	2a01      	cmp	r2, #1
 80066ba:	d11d      	bne.n	80066f8 <lfs_file_opencfg+0x1fc>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80066bc:	f109 0901 	add.w	r9, r9, #1
 80066c0:	e7b0      	b.n	8006624 <lfs_file_opencfg+0x128>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80066c8:	fb0a f209 	mul.w	r2, sl, r9
 80066cc:	1898      	adds	r0, r3, r2
 80066ce:	5c9b      	ldrb	r3, [r3, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80066d0:	6881      	ldr	r1, [r0, #8]
 80066d2:	6842      	ldr	r2, [r0, #4]
 80066d4:	9200      	str	r2, [sp, #0]
 80066d6:	ea41 218e 	orr.w	r1, r1, lr, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80066da:	f503 7340 	add.w	r3, r3, #768	; 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80066de:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
 80066e2:	465a      	mov	r2, fp
 80066e4:	4641      	mov	r1, r8
 80066e6:	4630      	mov	r0, r6
 80066e8:	f7fd fd42 	bl	8004170 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 80066ec:	2800      	cmp	r0, #0
 80066ee:	dae0      	bge.n	80066b2 <lfs_file_opencfg+0x1b6>
 80066f0:	1c83      	adds	r3, r0, #2
 80066f2:	d0de      	beq.n	80066b2 <lfs_file_opencfg+0x1b6>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80066f4:	4605      	mov	r5, r0
 80066f6:	e754      	b.n	80065a2 <lfs_file_opencfg+0xa6>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80066f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80066fa:	6852      	ldr	r2, [r2, #4]
 80066fc:	fb0a 2209 	mla	r2, sl, r9, r2
 8006700:	6891      	ldr	r1, [r2, #8]
 8006702:	6f72      	ldr	r2, [r6, #116]	; 0x74
 8006704:	4291      	cmp	r1, r2
 8006706:	d83c      	bhi.n	8006782 <lfs_file_opencfg+0x286>
            file->flags |= LFS_F_DIRTY;
 8006708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670c:	6323      	str	r3, [r4, #48]	; 0x30
 800670e:	e7d5      	b.n	80066bc <lfs_file_opencfg+0x1c0>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006710:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    return malloc(size);
 8006712:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006714:	f000 f9d2 	bl	8006abc <malloc>
 8006718:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
 800671a:	2800      	cmp	r0, #0
 800671c:	d18a      	bne.n	8006634 <lfs_file_opencfg+0x138>
            err = LFS_ERR_NOMEM;
 800671e:	f06f 050b 	mvn.w	r5, #11
 8006722:	e73e      	b.n	80065a2 <lfs_file_opencfg+0xa6>
        file->ctz.head = LFS_BLOCK_INLINE;
 8006724:	f06f 0301 	mvn.w	r3, #1
 8006728:	62a3      	str	r3, [r4, #40]	; 0x28
        file->cache.block = file->ctz.head;
 800672a:	6423      	str	r3, [r4, #64]	; 0x40
        file->cache.off = 0;
 800672c:	2300      	movs	r3, #0
        file->flags |= LFS_F_INLINE;
 800672e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        file->cache.off = 0;
 8006730:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006732:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    return tag & 0x000003ff;
 8006734:	f3c5 0509 	ubfx	r5, r5, #0, #10
        file->flags |= LFS_F_INLINE;
 8006738:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
        file->cache.size = lfs->cfg->cache_size;
 800673c:	6a99      	ldr	r1, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 800673e:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006740:	6322      	str	r2, [r4, #48]	; 0x30
        file->cache.size = lfs->cfg->cache_size;
 8006742:	64a1      	str	r1, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
 8006744:	2d00      	cmp	r5, #0
 8006746:	f43f af7f 	beq.w	8006648 <lfs_file_opencfg+0x14c>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800674a:	88a2      	ldrh	r2, [r4, #4]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800674c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800674e:	9300      	str	r3, [sp, #0]
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006750:	0292      	lsls	r2, r2, #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006752:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006756:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800675a:	4299      	cmp	r1, r3
 800675c:	bf94      	ite	ls
 800675e:	ea42 0301 	orrls.w	r3, r2, r1
 8006762:	4313      	orrhi	r3, r2
 8006764:	4630      	mov	r0, r6
 8006766:	4a0d      	ldr	r2, [pc, #52]	; (800679c <lfs_file_opencfg+0x2a0>)
 8006768:	4641      	mov	r1, r8
 800676a:	f7fd fd01 	bl	8004170 <lfs_dir_get>
            if (res < 0) {
 800676e:	1e05      	subs	r5, r0, #0
 8006770:	f6bf af6a 	bge.w	8006648 <lfs_file_opencfg+0x14c>
 8006774:	e715      	b.n	80065a2 <lfs_file_opencfg+0xa6>
        err = LFS_ERR_EXIST;
 8006776:	f06f 0510 	mvn.w	r5, #16
 800677a:	e712      	b.n	80065a2 <lfs_file_opencfg+0xa6>
        err = LFS_ERR_ISDIR;
 800677c:	f06f 0514 	mvn.w	r5, #20
 8006780:	e70f      	b.n	80065a2 <lfs_file_opencfg+0xa6>
                err = LFS_ERR_NOSPC;
 8006782:	f06f 051b 	mvn.w	r5, #27
 8006786:	e70c      	b.n	80065a2 <lfs_file_opencfg+0xa6>
 8006788:	08007f20 	.word	0x08007f20
 800678c:	08008012 	.word	0x08008012
 8006790:	08008072 	.word	0x08008072
 8006794:	20100000 	.word	0x20100000
 8006798:	20000008 	.word	0x20000008
 800679c:	700ffc00 	.word	0x700ffc00
 80067a0:	08007d9e 	.word	0x08007d9e
 80067a4:	7ffffc00 	.word	0x7ffffc00

080067a8 <lfs_file_open>:
        const char *path, int flags) {
 80067a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
 80067ac:	4d12      	ldr	r5, [pc, #72]	; (80067f8 <lfs_file_open+0x50>)
 80067ae:	4e13      	ldr	r6, [pc, #76]	; (80067fc <lfs_file_open+0x54>)
        const char *path, int flags) {
 80067b0:	b085      	sub	sp, #20
 80067b2:	460f      	mov	r7, r1
 80067b4:	4690      	mov	r8, r2
 80067b6:	4699      	mov	r9, r3
 80067b8:	4604      	mov	r4, r0
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
 80067ba:	4603      	mov	r3, r0
 80067bc:	4629      	mov	r1, r5
 80067be:	9603      	str	r6, [sp, #12]
 80067c0:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80067c4:	f640 12ec 	movw	r2, #2540	; 0x9ec
 80067c8:	480d      	ldr	r0, [pc, #52]	; (8006800 <lfs_file_open+0x58>)
 80067ca:	f000 fa55 	bl	8006c78 <iprintf>
    int err = lfs_file_opencfg(lfs, file, path, flags, &defaults);
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <lfs_file_open+0x5c>)
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4642      	mov	r2, r8
 80067d4:	464b      	mov	r3, r9
 80067d6:	4639      	mov	r1, r7
 80067d8:	4620      	mov	r0, r4
 80067da:	f7ff fe8f 	bl	80064fc <lfs_file_opencfg>
    LFS_TRACE("lfs_file_open -> %d", err);
 80067de:	9600      	str	r6, [sp, #0]
    int err = lfs_file_opencfg(lfs, file, path, flags, &defaults);
 80067e0:	4604      	mov	r4, r0
    LFS_TRACE("lfs_file_open -> %d", err);
 80067e2:	4603      	mov	r3, r0
 80067e4:	f640 12ef 	movw	r2, #2543	; 0x9ef
 80067e8:	4629      	mov	r1, r5
 80067ea:	4807      	ldr	r0, [pc, #28]	; (8006808 <lfs_file_open+0x60>)
 80067ec:	f000 fa44 	bl	8006c78 <iprintf>
}
 80067f0:	4620      	mov	r0, r4
 80067f2:	b005      	add	sp, #20
 80067f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067f8:	08007f20 	.word	0x08007f20
 80067fc:	08007d9e 	.word	0x08007d9e
 8006800:	08007fbe 	.word	0x08007fbe
 8006804:	08007e08 	.word	0x08007e08
 8006808:	08007fee 	.word	0x08007fee

0800680c <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800680c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680e:	b0ab      	sub	sp, #172	; 0xac
    LFS_TRACE("lfs_format(%p, %p {.context=%p, "
 8006810:	4e4a      	ldr	r6, [pc, #296]	; (800693c <lfs_format+0x130>)
 8006812:	9613      	str	r6, [sp, #76]	; 0x4c
 8006814:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006816:	9312      	str	r3, [sp, #72]	; 0x48
 8006818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800681a:	9311      	str	r3, [sp, #68]	; 0x44
 800681c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800681e:	9310      	str	r3, [sp, #64]	; 0x40
 8006820:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8006822:	930f      	str	r3, [sp, #60]	; 0x3c
 8006824:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006826:	930e      	str	r3, [sp, #56]	; 0x38
 8006828:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800682a:	930d      	str	r3, [sp, #52]	; 0x34
 800682c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800682e:	930c      	str	r3, [sp, #48]	; 0x30
 8006830:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006832:	930b      	str	r3, [sp, #44]	; 0x2c
 8006834:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006836:	930a      	str	r3, [sp, #40]	; 0x28
 8006838:	6a0b      	ldr	r3, [r1, #32]
 800683a:	9309      	str	r3, [sp, #36]	; 0x24
 800683c:	69cb      	ldr	r3, [r1, #28]
 800683e:	9308      	str	r3, [sp, #32]
 8006840:	698b      	ldr	r3, [r1, #24]
 8006842:	9307      	str	r3, [sp, #28]
 8006844:	694b      	ldr	r3, [r1, #20]
 8006846:	9306      	str	r3, [sp, #24]
 8006848:	690b      	ldr	r3, [r1, #16]
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	68cb      	ldr	r3, [r1, #12]
 800684e:	9304      	str	r3, [sp, #16]
 8006850:	688b      	ldr	r3, [r1, #8]
 8006852:	9303      	str	r3, [sp, #12]
 8006854:	684b      	ldr	r3, [r1, #4]
 8006856:	9302      	str	r3, [sp, #8]
 8006858:	680b      	ldr	r3, [r1, #0]
 800685a:	9301      	str	r3, [sp, #4]
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800685c:	460c      	mov	r4, r1
    LFS_TRACE("lfs_format(%p, %p {.context=%p, "
 800685e:	4603      	mov	r3, r0
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8006860:	4605      	mov	r5, r0
    LFS_TRACE("lfs_format(%p, %p {.context=%p, "
 8006862:	9100      	str	r1, [sp, #0]
 8006864:	f640 6213 	movw	r2, #3603	; 0xe13
 8006868:	4935      	ldr	r1, [pc, #212]	; (8006940 <lfs_format+0x134>)
 800686a:	4836      	ldr	r0, [pc, #216]	; (8006944 <lfs_format+0x138>)
 800686c:	f000 fa04 	bl	8006c78 <iprintf>
        err = lfs_init(lfs, cfg);
 8006870:	4621      	mov	r1, r4
 8006872:	4628      	mov	r0, r5
 8006874:	f7fd fd59 	bl	800432a <lfs_init>
 8006878:	4637      	mov	r7, r6
        if (err) {
 800687a:	4604      	mov	r4, r0
 800687c:	b150      	cbz	r0, 8006894 <lfs_format+0x88>
            LFS_TRACE("lfs_format -> %d", err);
 800687e:	9600      	str	r6, [sp, #0]
 8006880:	4603      	mov	r3, r0
 8006882:	f640 6218 	movw	r2, #3608	; 0xe18
    LFS_TRACE("lfs_format -> %d", err);
 8006886:	492e      	ldr	r1, [pc, #184]	; (8006940 <lfs_format+0x134>)
 8006888:	482f      	ldr	r0, [pc, #188]	; (8006948 <lfs_format+0x13c>)
 800688a:	f000 f9f5 	bl	8006c78 <iprintf>
}
 800688e:	4620      	mov	r0, r4
 8006890:	b02b      	add	sp, #172	; 0xac
 8006892:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8006894:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006896:	4601      	mov	r1, r0
 8006898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689a:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800689c:	f000 f938 	bl	8006b10 <memset>
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80068a0:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs->free.off = 0;
 80068a2:	656c      	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80068a4:	6a1a      	ldr	r2, [r3, #32]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        lfs->free.i = 0;
 80068a8:	65ec      	str	r4, [r5, #92]	; 0x5c
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bf94      	ite	ls
 80068b0:	65ab      	strls	r3, [r5, #88]	; 0x58
 80068b2:	65aa      	strhi	r2, [r5, #88]	; 0x58
    lfs->free.ack = lfs->cfg->block_count;
 80068b4:	662a      	str	r2, [r5, #96]	; 0x60
        err = lfs_dir_alloc(lfs, &root);
 80068b6:	a922      	add	r1, sp, #136	; 0x88
 80068b8:	4628      	mov	r0, r5
 80068ba:	f7fe fb9d 	bl	8004ff8 <lfs_dir_alloc>
        if (err) {
 80068be:	4604      	mov	r4, r0
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d133      	bne.n	800692c <lfs_format+0x120>
        lfs_superblock_t superblock = {
 80068c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068c8:	9316      	str	r3, [sp, #88]	; 0x58
            .block_size  = lfs->cfg->block_size,
 80068ca:	6eab      	ldr	r3, [r5, #104]	; 0x68
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80068cc:	901d      	str	r0, [sp, #116]	; 0x74
        lfs_superblock_t superblock = {
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	9318      	str	r3, [sp, #96]	; 0x60
 80068d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80068d6:	9319      	str	r3, [sp, #100]	; 0x64
 80068d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80068da:	931a      	str	r3, [sp, #104]	; 0x68
 80068dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80068de:	931b      	str	r3, [sp, #108]	; 0x6c
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <lfs_format+0x140>)
 80068e2:	931c      	str	r3, [sp, #112]	; 0x70
 80068e4:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <lfs_format+0x144>)
 80068e6:	931e      	str	r3, [sp, #120]	; 0x78
 80068e8:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <lfs_format+0x148>)
 80068ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80068ec:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <lfs_format+0x14c>)
 80068ee:	9320      	str	r3, [sp, #128]	; 0x80
 80068f0:	ab16      	add	r3, sp, #88	; 0x58
        lfs_superblock_t superblock = {
 80068f2:	9217      	str	r2, [sp, #92]	; 0x5c
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80068f4:	9321      	str	r3, [sp, #132]	; 0x84
 80068f6:	aa1c      	add	r2, sp, #112	; 0x70
 80068f8:	2303      	movs	r3, #3
 80068fa:	a922      	add	r1, sp, #136	; 0x88
 80068fc:	4628      	mov	r0, r5
 80068fe:	f7ff fac9 	bl	8005e94 <lfs_dir_commit>
        if (err) {
 8006902:	4604      	mov	r4, r0
 8006904:	b990      	cbnz	r0, 800692c <lfs_format+0x120>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8006906:	9014      	str	r0, [sp, #80]	; 0x50
 8006908:	2301      	movs	r3, #1
 800690a:	aa14      	add	r2, sp, #80	; 0x50
 800690c:	a922      	add	r1, sp, #136	; 0x88
 800690e:	4628      	mov	r0, r5
 8006910:	9315      	str	r3, [sp, #84]	; 0x54
 8006912:	f7fd fa8d 	bl	8003e30 <lfs_dir_fetch>
        if (err) {
 8006916:	4604      	mov	r4, r0
 8006918:	b940      	cbnz	r0, 800692c <lfs_format+0x120>
        root.erased = false;
 800691a:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800691e:	4603      	mov	r3, r0
 8006920:	4602      	mov	r2, r0
 8006922:	a922      	add	r1, sp, #136	; 0x88
 8006924:	4628      	mov	r0, r5
 8006926:	f7ff fab5 	bl	8005e94 <lfs_dir_commit>
 800692a:	4604      	mov	r4, r0
    lfs_deinit(lfs);
 800692c:	4628      	mov	r0, r5
 800692e:	f7fc ff5a 	bl	80037e6 <lfs_deinit>
    LFS_TRACE("lfs_format -> %d", err);
 8006932:	9700      	str	r7, [sp, #0]
 8006934:	4623      	mov	r3, r4
 8006936:	f44f 6265 	mov.w	r2, #3664	; 0xe50
 800693a:	e7a4      	b.n	8006886 <lfs_format+0x7a>
 800693c:	08007d9e 	.word	0x08007d9e
 8006940:	08007f20 	.word	0x08007f20
 8006944:	0800837c 	.word	0x0800837c
 8006948:	080084b7 	.word	0x080084b7
 800694c:	40100000 	.word	0x40100000
 8006950:	0ff00008 	.word	0x0ff00008
 8006954:	08008716 	.word	0x08008716
 8006958:	20100018 	.word	0x20100018

0800695c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800695c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006960:	4698      	mov	r8, r3
    lfs->free.ack = lfs->cfg->block_count;
 8006962:	6e83      	ldr	r3, [r0, #104]	; 0x68
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8006964:	b08d      	sub	sp, #52	; 0x34
    lfs->free.ack = lfs->cfg->block_count;
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	6603      	str	r3, [r0, #96]	; 0x60
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800696a:	460c      	mov	r4, r1
    int err = lfs_dir_alloc(lfs, &tail);
 800696c:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800696e:	4605      	mov	r5, r0
 8006970:	4617      	mov	r7, r2
 8006972:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 8006976:	f7fe fb3f 	bl	8004ff8 <lfs_dir_alloc>
    if (err) {
 800697a:	4606      	mov	r6, r0
 800697c:	bb48      	cbnz	r0, 80069d2 <lfs_dir_split+0x76>
    tail.split = dir->split;
 800697e:	7de3      	ldrb	r3, [r4, #23]
 8006980:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8006984:	69a3      	ldr	r3, [r4, #24]
 8006986:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8006988:	69e3      	ldr	r3, [r4, #28]
 800698a:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800698c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8006990:	9302      	str	r3, [sp, #8]
 8006992:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	f8cd 9004 	str.w	r9, [sp, #4]
 800699a:	4643      	mov	r3, r8
 800699c:	463a      	mov	r2, r7
 800699e:	a904      	add	r1, sp, #16
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7fe ffe1 	bl	8005968 <lfs_dir_compact>
    if (err) {
 80069a6:	4606      	mov	r6, r0
 80069a8:	b998      	cbnz	r0, 80069d2 <lfs_dir_split+0x76>
    dir->tail[0] = tail.pair[0];
 80069aa:	f8dd 8010 	ldr.w	r8, [sp, #16]
    dir->tail[1] = tail.pair[1];
 80069ae:	9f05      	ldr	r7, [sp, #20]
    dir->tail[0] = tail.pair[0];
 80069b0:	f8c4 8018 	str.w	r8, [r4, #24]
    dir->split = true;
 80069b4:	2301      	movs	r3, #1
    dir->tail[1] = tail.pair[1];
 80069b6:	61e7      	str	r7, [r4, #28]
    dir->split = true;
 80069b8:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80069ba:	f105 0120 	add.w	r1, r5, #32
 80069be:	4620      	mov	r0, r4
 80069c0:	f7fc fe70 	bl	80036a4 <lfs_pair_cmp>
 80069c4:	b928      	cbnz	r0, 80069d2 <lfs_dir_split+0x76>
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	d102      	bne.n	80069d2 <lfs_dir_split+0x76>
        lfs->root[0] = tail.pair[0];
 80069cc:	f8c5 8020 	str.w	r8, [r5, #32]
        lfs->root[1] = tail.pair[1];
 80069d0:	626f      	str	r7, [r5, #36]	; 0x24
}
 80069d2:	4630      	mov	r0, r6
 80069d4:	b00d      	add	sp, #52	; 0x34
 80069d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080069dc <lfs_crc>:
 */

#include "lfs_config.h"

// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80069dc:	b530      	push	{r4, r5, lr}
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80069de:	4d0c      	ldr	r5, [pc, #48]	; (8006a10 <lfs_crc+0x34>)
 80069e0:	440a      	add	r2, r1
    for (size_t i = 0; i < size; i++) {
 80069e2:	4291      	cmp	r1, r2
 80069e4:	d100      	bne.n	80069e8 <lfs_crc+0xc>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    }

    return crc;
}
 80069e6:	bd30      	pop	{r4, r5, pc}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80069e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ec:	ea83 0400 	eor.w	r4, r3, r0
 80069f0:	f004 040f 	and.w	r4, r4, #15
 80069f4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80069f8:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80069fc:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006a08:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
 8006a0c:	e7e9      	b.n	80069e2 <lfs_crc+0x6>
 8006a0e:	bf00      	nop
 8006a10:	08008854 	.word	0x08008854

08006a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8006a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006a18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006a1a:	e003      	b.n	8006a24 <LoopCopyDataInit>

08006a1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006a1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006a20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006a22:	3104      	adds	r1, #4

08006a24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006a24:	480b      	ldr	r0, [pc, #44]	; (8006a54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006a28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006a2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006a2c:	d3f6      	bcc.n	8006a1c <CopyDataInit>
  ldr  r2, =_sbss
 8006a2e:	4a0b      	ldr	r2, [pc, #44]	; (8006a5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006a30:	e002      	b.n	8006a38 <LoopFillZerobss>

08006a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006a32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006a34:	f842 3b04 	str.w	r3, [r2], #4

08006a38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006a3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006a3c:	d3f9      	bcc.n	8006a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a3e:	f7fb fd33 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a42:	f000 f817 	bl	8006a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a46:	f7fb fb49 	bl	80020dc <main>
  bx  lr    
 8006a4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006a4c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006a50:	0800893c 	.word	0x0800893c
  ldr  r0, =_sdata
 8006a54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006a58:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8006a5c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8006a60:	2000320c 	.word	0x2000320c

08006a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a64:	e7fe      	b.n	8006a64 <ADC_IRQHandler>
	...

08006a68 <__errno>:
 8006a68:	4b01      	ldr	r3, [pc, #4]	; (8006a70 <__errno+0x8>)
 8006a6a:	6818      	ldr	r0, [r3, #0]
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	2000000c 	.word	0x2000000c

08006a74 <__libc_init_array>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	4e0d      	ldr	r6, [pc, #52]	; (8006aac <__libc_init_array+0x38>)
 8006a78:	4c0d      	ldr	r4, [pc, #52]	; (8006ab0 <__libc_init_array+0x3c>)
 8006a7a:	1ba4      	subs	r4, r4, r6
 8006a7c:	10a4      	asrs	r4, r4, #2
 8006a7e:	2500      	movs	r5, #0
 8006a80:	42a5      	cmp	r5, r4
 8006a82:	d109      	bne.n	8006a98 <__libc_init_array+0x24>
 8006a84:	4e0b      	ldr	r6, [pc, #44]	; (8006ab4 <__libc_init_array+0x40>)
 8006a86:	4c0c      	ldr	r4, [pc, #48]	; (8006ab8 <__libc_init_array+0x44>)
 8006a88:	f000 ff74 	bl	8007974 <_init>
 8006a8c:	1ba4      	subs	r4, r4, r6
 8006a8e:	10a4      	asrs	r4, r4, #2
 8006a90:	2500      	movs	r5, #0
 8006a92:	42a5      	cmp	r5, r4
 8006a94:	d105      	bne.n	8006aa2 <__libc_init_array+0x2e>
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
 8006a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a9c:	4798      	blx	r3
 8006a9e:	3501      	adds	r5, #1
 8006aa0:	e7ee      	b.n	8006a80 <__libc_init_array+0xc>
 8006aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aa6:	4798      	blx	r3
 8006aa8:	3501      	adds	r5, #1
 8006aaa:	e7f2      	b.n	8006a92 <__libc_init_array+0x1e>
 8006aac:	08008934 	.word	0x08008934
 8006ab0:	08008934 	.word	0x08008934
 8006ab4:	08008934 	.word	0x08008934
 8006ab8:	08008938 	.word	0x08008938

08006abc <malloc>:
 8006abc:	4b02      	ldr	r3, [pc, #8]	; (8006ac8 <malloc+0xc>)
 8006abe:	4601      	mov	r1, r0
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	f000 b87b 	b.w	8006bbc <_malloc_r>
 8006ac6:	bf00      	nop
 8006ac8:	2000000c 	.word	0x2000000c

08006acc <free>:
 8006acc:	4b02      	ldr	r3, [pc, #8]	; (8006ad8 <free+0xc>)
 8006ace:	4601      	mov	r1, r0
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	f000 b825 	b.w	8006b20 <_free_r>
 8006ad6:	bf00      	nop
 8006ad8:	2000000c 	.word	0x2000000c

08006adc <memcmp>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	3901      	subs	r1, #1
 8006ae0:	4402      	add	r2, r0
 8006ae2:	4290      	cmp	r0, r2
 8006ae4:	d101      	bne.n	8006aea <memcmp+0xe>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006aee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	d0f5      	beq.n	8006ae2 <memcmp+0x6>
 8006af6:	1b18      	subs	r0, r3, r4
 8006af8:	bd10      	pop	{r4, pc}

08006afa <memcpy>:
 8006afa:	b510      	push	{r4, lr}
 8006afc:	1e43      	subs	r3, r0, #1
 8006afe:	440a      	add	r2, r1
 8006b00:	4291      	cmp	r1, r2
 8006b02:	d100      	bne.n	8006b06 <memcpy+0xc>
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0e:	e7f7      	b.n	8006b00 <memcpy+0x6>

08006b10 <memset>:
 8006b10:	4402      	add	r2, r0
 8006b12:	4603      	mov	r3, r0
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d100      	bne.n	8006b1a <memset+0xa>
 8006b18:	4770      	bx	lr
 8006b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b1e:	e7f9      	b.n	8006b14 <memset+0x4>

08006b20 <_free_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4605      	mov	r5, r0
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d045      	beq.n	8006bb4 <_free_r+0x94>
 8006b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2c:	1f0c      	subs	r4, r1, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfb8      	it	lt
 8006b32:	18e4      	addlt	r4, r4, r3
 8006b34:	f000 f9c4 	bl	8006ec0 <__malloc_lock>
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <_free_r+0x98>)
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	b933      	cbnz	r3, 8006b4e <_free_r+0x2e>
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	6014      	str	r4, [r2, #0]
 8006b44:	4628      	mov	r0, r5
 8006b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b4a:	f000 b9ba 	b.w	8006ec2 <__malloc_unlock>
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	d90c      	bls.n	8006b6c <_free_r+0x4c>
 8006b52:	6821      	ldr	r1, [r4, #0]
 8006b54:	1862      	adds	r2, r4, r1
 8006b56:	4293      	cmp	r3, r2
 8006b58:	bf04      	itt	eq
 8006b5a:	681a      	ldreq	r2, [r3, #0]
 8006b5c:	685b      	ldreq	r3, [r3, #4]
 8006b5e:	6063      	str	r3, [r4, #4]
 8006b60:	bf04      	itt	eq
 8006b62:	1852      	addeq	r2, r2, r1
 8006b64:	6022      	streq	r2, [r4, #0]
 8006b66:	6004      	str	r4, [r0, #0]
 8006b68:	e7ec      	b.n	8006b44 <_free_r+0x24>
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	b10a      	cbz	r2, 8006b74 <_free_r+0x54>
 8006b70:	42a2      	cmp	r2, r4
 8006b72:	d9fa      	bls.n	8006b6a <_free_r+0x4a>
 8006b74:	6819      	ldr	r1, [r3, #0]
 8006b76:	1858      	adds	r0, r3, r1
 8006b78:	42a0      	cmp	r0, r4
 8006b7a:	d10b      	bne.n	8006b94 <_free_r+0x74>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	4401      	add	r1, r0
 8006b80:	1858      	adds	r0, r3, r1
 8006b82:	4282      	cmp	r2, r0
 8006b84:	6019      	str	r1, [r3, #0]
 8006b86:	d1dd      	bne.n	8006b44 <_free_r+0x24>
 8006b88:	6810      	ldr	r0, [r2, #0]
 8006b8a:	6852      	ldr	r2, [r2, #4]
 8006b8c:	605a      	str	r2, [r3, #4]
 8006b8e:	4401      	add	r1, r0
 8006b90:	6019      	str	r1, [r3, #0]
 8006b92:	e7d7      	b.n	8006b44 <_free_r+0x24>
 8006b94:	d902      	bls.n	8006b9c <_free_r+0x7c>
 8006b96:	230c      	movs	r3, #12
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	e7d3      	b.n	8006b44 <_free_r+0x24>
 8006b9c:	6820      	ldr	r0, [r4, #0]
 8006b9e:	1821      	adds	r1, r4, r0
 8006ba0:	428a      	cmp	r2, r1
 8006ba2:	bf04      	itt	eq
 8006ba4:	6811      	ldreq	r1, [r2, #0]
 8006ba6:	6852      	ldreq	r2, [r2, #4]
 8006ba8:	6062      	str	r2, [r4, #4]
 8006baa:	bf04      	itt	eq
 8006bac:	1809      	addeq	r1, r1, r0
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	605c      	str	r4, [r3, #4]
 8006bb2:	e7c7      	b.n	8006b44 <_free_r+0x24>
 8006bb4:	bd38      	pop	{r3, r4, r5, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200030a4 	.word	0x200030a4

08006bbc <_malloc_r>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	1ccd      	adds	r5, r1, #3
 8006bc0:	f025 0503 	bic.w	r5, r5, #3
 8006bc4:	3508      	adds	r5, #8
 8006bc6:	2d0c      	cmp	r5, #12
 8006bc8:	bf38      	it	cc
 8006bca:	250c      	movcc	r5, #12
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	4606      	mov	r6, r0
 8006bd0:	db01      	blt.n	8006bd6 <_malloc_r+0x1a>
 8006bd2:	42a9      	cmp	r1, r5
 8006bd4:	d903      	bls.n	8006bde <_malloc_r+0x22>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	6033      	str	r3, [r6, #0]
 8006bda:	2000      	movs	r0, #0
 8006bdc:	bd70      	pop	{r4, r5, r6, pc}
 8006bde:	f000 f96f 	bl	8006ec0 <__malloc_lock>
 8006be2:	4a23      	ldr	r2, [pc, #140]	; (8006c70 <_malloc_r+0xb4>)
 8006be4:	6814      	ldr	r4, [r2, #0]
 8006be6:	4621      	mov	r1, r4
 8006be8:	b991      	cbnz	r1, 8006c10 <_malloc_r+0x54>
 8006bea:	4c22      	ldr	r4, [pc, #136]	; (8006c74 <_malloc_r+0xb8>)
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	b91b      	cbnz	r3, 8006bf8 <_malloc_r+0x3c>
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f859 	bl	8006ca8 <_sbrk_r>
 8006bf6:	6020      	str	r0, [r4, #0]
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 f854 	bl	8006ca8 <_sbrk_r>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d126      	bne.n	8006c52 <_malloc_r+0x96>
 8006c04:	230c      	movs	r3, #12
 8006c06:	6033      	str	r3, [r6, #0]
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f000 f95a 	bl	8006ec2 <__malloc_unlock>
 8006c0e:	e7e4      	b.n	8006bda <_malloc_r+0x1e>
 8006c10:	680b      	ldr	r3, [r1, #0]
 8006c12:	1b5b      	subs	r3, r3, r5
 8006c14:	d41a      	bmi.n	8006c4c <_malloc_r+0x90>
 8006c16:	2b0b      	cmp	r3, #11
 8006c18:	d90f      	bls.n	8006c3a <_malloc_r+0x7e>
 8006c1a:	600b      	str	r3, [r1, #0]
 8006c1c:	50cd      	str	r5, [r1, r3]
 8006c1e:	18cc      	adds	r4, r1, r3
 8006c20:	4630      	mov	r0, r6
 8006c22:	f000 f94e 	bl	8006ec2 <__malloc_unlock>
 8006c26:	f104 000b 	add.w	r0, r4, #11
 8006c2a:	1d23      	adds	r3, r4, #4
 8006c2c:	f020 0007 	bic.w	r0, r0, #7
 8006c30:	1ac3      	subs	r3, r0, r3
 8006c32:	d01b      	beq.n	8006c6c <_malloc_r+0xb0>
 8006c34:	425a      	negs	r2, r3
 8006c36:	50e2      	str	r2, [r4, r3]
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
 8006c3a:	428c      	cmp	r4, r1
 8006c3c:	bf0d      	iteet	eq
 8006c3e:	6863      	ldreq	r3, [r4, #4]
 8006c40:	684b      	ldrne	r3, [r1, #4]
 8006c42:	6063      	strne	r3, [r4, #4]
 8006c44:	6013      	streq	r3, [r2, #0]
 8006c46:	bf18      	it	ne
 8006c48:	460c      	movne	r4, r1
 8006c4a:	e7e9      	b.n	8006c20 <_malloc_r+0x64>
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	6849      	ldr	r1, [r1, #4]
 8006c50:	e7ca      	b.n	8006be8 <_malloc_r+0x2c>
 8006c52:	1cc4      	adds	r4, r0, #3
 8006c54:	f024 0403 	bic.w	r4, r4, #3
 8006c58:	42a0      	cmp	r0, r4
 8006c5a:	d005      	beq.n	8006c68 <_malloc_r+0xac>
 8006c5c:	1a21      	subs	r1, r4, r0
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f000 f822 	bl	8006ca8 <_sbrk_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d0cd      	beq.n	8006c04 <_malloc_r+0x48>
 8006c68:	6025      	str	r5, [r4, #0]
 8006c6a:	e7d9      	b.n	8006c20 <_malloc_r+0x64>
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	bf00      	nop
 8006c70:	200030a4 	.word	0x200030a4
 8006c74:	200030a8 	.word	0x200030a8

08006c78 <iprintf>:
 8006c78:	b40f      	push	{r0, r1, r2, r3}
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <iprintf+0x2c>)
 8006c7c:	b513      	push	{r0, r1, r4, lr}
 8006c7e:	681c      	ldr	r4, [r3, #0]
 8006c80:	b124      	cbz	r4, 8006c8c <iprintf+0x14>
 8006c82:	69a3      	ldr	r3, [r4, #24]
 8006c84:	b913      	cbnz	r3, 8006c8c <iprintf+0x14>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 f890 	bl	8006dac <__sinit>
 8006c8c:	ab05      	add	r3, sp, #20
 8006c8e:	9a04      	ldr	r2, [sp, #16]
 8006c90:	68a1      	ldr	r1, [r4, #8]
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 f93f 	bl	8006f18 <_vfiprintf_r>
 8006c9a:	b002      	add	sp, #8
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	b004      	add	sp, #16
 8006ca2:	4770      	bx	lr
 8006ca4:	2000000c 	.word	0x2000000c

08006ca8 <_sbrk_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4c06      	ldr	r4, [pc, #24]	; (8006cc4 <_sbrk_r+0x1c>)
 8006cac:	2300      	movs	r3, #0
 8006cae:	4605      	mov	r5, r0
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	f7fb fbd2 	bl	800245c <_sbrk>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_sbrk_r+0x1a>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_sbrk_r+0x1a>
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	20003208 	.word	0x20003208

08006cc8 <strchr>:
 8006cc8:	b2c9      	uxtb	r1, r1
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd0:	b11a      	cbz	r2, 8006cda <strchr+0x12>
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	d1f9      	bne.n	8006cca <strchr+0x2>
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	4770      	bx	lr
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	bf0c      	ite	eq
 8006cde:	4618      	moveq	r0, r3
 8006ce0:	2000      	movne	r0, #0
 8006ce2:	4770      	bx	lr

08006ce4 <strcspn>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006cee:	b14d      	cbz	r5, 8006d04 <strcspn+0x20>
 8006cf0:	1e4c      	subs	r4, r1, #1
 8006cf2:	e001      	b.n	8006cf8 <strcspn+0x14>
 8006cf4:	42b5      	cmp	r5, r6
 8006cf6:	d005      	beq.n	8006d04 <strcspn+0x20>
 8006cf8:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8006cfc:	2e00      	cmp	r6, #0
 8006cfe:	d1f9      	bne.n	8006cf4 <strcspn+0x10>
 8006d00:	4613      	mov	r3, r2
 8006d02:	e7f1      	b.n	8006ce8 <strcspn+0x4>
 8006d04:	1a18      	subs	r0, r3, r0
 8006d06:	bd70      	pop	{r4, r5, r6, pc}

08006d08 <strspn>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d12:	b13d      	cbz	r5, 8006d24 <strspn+0x1c>
 8006d14:	1e4c      	subs	r4, r1, #1
 8006d16:	e001      	b.n	8006d1c <strspn+0x14>
 8006d18:	42b5      	cmp	r5, r6
 8006d1a:	d005      	beq.n	8006d28 <strspn+0x20>
 8006d1c:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8006d20:	2e00      	cmp	r6, #0
 8006d22:	d1f9      	bne.n	8006d18 <strspn+0x10>
 8006d24:	1a18      	subs	r0, r3, r0
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	4613      	mov	r3, r2
 8006d2a:	e7ef      	b.n	8006d0c <strspn+0x4>

08006d2c <_cleanup_r>:
 8006d2c:	4901      	ldr	r1, [pc, #4]	; (8006d34 <_cleanup_r+0x8>)
 8006d2e:	f000 b8a9 	b.w	8006e84 <_fwalk_reent>
 8006d32:	bf00      	nop
 8006d34:	080077cd 	.word	0x080077cd

08006d38 <std.isra.0>:
 8006d38:	2300      	movs	r3, #0
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	6003      	str	r3, [r0, #0]
 8006d40:	6043      	str	r3, [r0, #4]
 8006d42:	6083      	str	r3, [r0, #8]
 8006d44:	8181      	strh	r1, [r0, #12]
 8006d46:	6643      	str	r3, [r0, #100]	; 0x64
 8006d48:	81c2      	strh	r2, [r0, #14]
 8006d4a:	6103      	str	r3, [r0, #16]
 8006d4c:	6143      	str	r3, [r0, #20]
 8006d4e:	6183      	str	r3, [r0, #24]
 8006d50:	4619      	mov	r1, r3
 8006d52:	2208      	movs	r2, #8
 8006d54:	305c      	adds	r0, #92	; 0x5c
 8006d56:	f7ff fedb 	bl	8006b10 <memset>
 8006d5a:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <std.isra.0+0x38>)
 8006d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <std.isra.0+0x3c>)
 8006d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d62:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <std.isra.0+0x40>)
 8006d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <std.isra.0+0x44>)
 8006d68:	6224      	str	r4, [r4, #32]
 8006d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	bf00      	nop
 8006d70:	08007471 	.word	0x08007471
 8006d74:	08007493 	.word	0x08007493
 8006d78:	080074cb 	.word	0x080074cb
 8006d7c:	080074ef 	.word	0x080074ef

08006d80 <__sfmoreglue>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	1e4a      	subs	r2, r1, #1
 8006d84:	2568      	movs	r5, #104	; 0x68
 8006d86:	4355      	muls	r5, r2
 8006d88:	460e      	mov	r6, r1
 8006d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d8e:	f7ff ff15 	bl	8006bbc <_malloc_r>
 8006d92:	4604      	mov	r4, r0
 8006d94:	b140      	cbz	r0, 8006da8 <__sfmoreglue+0x28>
 8006d96:	2100      	movs	r1, #0
 8006d98:	e880 0042 	stmia.w	r0, {r1, r6}
 8006d9c:	300c      	adds	r0, #12
 8006d9e:	60a0      	str	r0, [r4, #8]
 8006da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006da4:	f7ff feb4 	bl	8006b10 <memset>
 8006da8:	4620      	mov	r0, r4
 8006daa:	bd70      	pop	{r4, r5, r6, pc}

08006dac <__sinit>:
 8006dac:	6983      	ldr	r3, [r0, #24]
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	bb33      	cbnz	r3, 8006e02 <__sinit+0x56>
 8006db4:	6483      	str	r3, [r0, #72]	; 0x48
 8006db6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006db8:	6503      	str	r3, [r0, #80]	; 0x50
 8006dba:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <__sinit+0x58>)
 8006dbc:	4a12      	ldr	r2, [pc, #72]	; (8006e08 <__sinit+0x5c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6282      	str	r2, [r0, #40]	; 0x28
 8006dc2:	4298      	cmp	r0, r3
 8006dc4:	bf04      	itt	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	6183      	streq	r3, [r0, #24]
 8006dca:	f000 f81f 	bl	8006e0c <__sfp>
 8006dce:	6060      	str	r0, [r4, #4]
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 f81b 	bl	8006e0c <__sfp>
 8006dd6:	60a0      	str	r0, [r4, #8]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 f817 	bl	8006e0c <__sfp>
 8006dde:	2200      	movs	r2, #0
 8006de0:	60e0      	str	r0, [r4, #12]
 8006de2:	2104      	movs	r1, #4
 8006de4:	6860      	ldr	r0, [r4, #4]
 8006de6:	f7ff ffa7 	bl	8006d38 <std.isra.0>
 8006dea:	2201      	movs	r2, #1
 8006dec:	2109      	movs	r1, #9
 8006dee:	68a0      	ldr	r0, [r4, #8]
 8006df0:	f7ff ffa2 	bl	8006d38 <std.isra.0>
 8006df4:	2202      	movs	r2, #2
 8006df6:	2112      	movs	r1, #18
 8006df8:	68e0      	ldr	r0, [r4, #12]
 8006dfa:	f7ff ff9d 	bl	8006d38 <std.isra.0>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	61a3      	str	r3, [r4, #24]
 8006e02:	bd10      	pop	{r4, pc}
 8006e04:	08008894 	.word	0x08008894
 8006e08:	08006d2d 	.word	0x08006d2d

08006e0c <__sfp>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	4b1c      	ldr	r3, [pc, #112]	; (8006e80 <__sfp+0x74>)
 8006e10:	681e      	ldr	r6, [r3, #0]
 8006e12:	69b3      	ldr	r3, [r6, #24]
 8006e14:	4607      	mov	r7, r0
 8006e16:	b913      	cbnz	r3, 8006e1e <__sfp+0x12>
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f7ff ffc7 	bl	8006dac <__sinit>
 8006e1e:	3648      	adds	r6, #72	; 0x48
 8006e20:	68b4      	ldr	r4, [r6, #8]
 8006e22:	6873      	ldr	r3, [r6, #4]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	d503      	bpl.n	8006e30 <__sfp+0x24>
 8006e28:	6833      	ldr	r3, [r6, #0]
 8006e2a:	b133      	cbz	r3, 8006e3a <__sfp+0x2e>
 8006e2c:	6836      	ldr	r6, [r6, #0]
 8006e2e:	e7f7      	b.n	8006e20 <__sfp+0x14>
 8006e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e34:	b16d      	cbz	r5, 8006e52 <__sfp+0x46>
 8006e36:	3468      	adds	r4, #104	; 0x68
 8006e38:	e7f4      	b.n	8006e24 <__sfp+0x18>
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7ff ff9f 	bl	8006d80 <__sfmoreglue>
 8006e42:	6030      	str	r0, [r6, #0]
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1f1      	bne.n	8006e2c <__sfp+0x20>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4620      	mov	r0, r4
 8006e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e56:	81e3      	strh	r3, [r4, #14]
 8006e58:	2301      	movs	r3, #1
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	6665      	str	r5, [r4, #100]	; 0x64
 8006e5e:	6025      	str	r5, [r4, #0]
 8006e60:	60a5      	str	r5, [r4, #8]
 8006e62:	6065      	str	r5, [r4, #4]
 8006e64:	6125      	str	r5, [r4, #16]
 8006e66:	6165      	str	r5, [r4, #20]
 8006e68:	61a5      	str	r5, [r4, #24]
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e72:	f7ff fe4d 	bl	8006b10 <memset>
 8006e76:	6365      	str	r5, [r4, #52]	; 0x34
 8006e78:	63a5      	str	r5, [r4, #56]	; 0x38
 8006e7a:	64a5      	str	r5, [r4, #72]	; 0x48
 8006e7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006e7e:	e7e6      	b.n	8006e4e <__sfp+0x42>
 8006e80:	08008894 	.word	0x08008894

08006e84 <_fwalk_reent>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	4680      	mov	r8, r0
 8006e8a:	4689      	mov	r9, r1
 8006e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e90:	2600      	movs	r6, #0
 8006e92:	b914      	cbnz	r4, 8006e9a <_fwalk_reent+0x16>
 8006e94:	4630      	mov	r0, r6
 8006e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e9a:	68a5      	ldr	r5, [r4, #8]
 8006e9c:	6867      	ldr	r7, [r4, #4]
 8006e9e:	3f01      	subs	r7, #1
 8006ea0:	d501      	bpl.n	8006ea6 <_fwalk_reent+0x22>
 8006ea2:	6824      	ldr	r4, [r4, #0]
 8006ea4:	e7f5      	b.n	8006e92 <_fwalk_reent+0xe>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d907      	bls.n	8006ebc <_fwalk_reent+0x38>
 8006eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	d003      	beq.n	8006ebc <_fwalk_reent+0x38>
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	47c8      	blx	r9
 8006eba:	4306      	orrs	r6, r0
 8006ebc:	3568      	adds	r5, #104	; 0x68
 8006ebe:	e7ee      	b.n	8006e9e <_fwalk_reent+0x1a>

08006ec0 <__malloc_lock>:
 8006ec0:	4770      	bx	lr

08006ec2 <__malloc_unlock>:
 8006ec2:	4770      	bx	lr

08006ec4 <__sfputc_r>:
 8006ec4:	6893      	ldr	r3, [r2, #8]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	b410      	push	{r4}
 8006ecc:	6093      	str	r3, [r2, #8]
 8006ece:	da09      	bge.n	8006ee4 <__sfputc_r+0x20>
 8006ed0:	6994      	ldr	r4, [r2, #24]
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	db02      	blt.n	8006edc <__sfputc_r+0x18>
 8006ed6:	b2cb      	uxtb	r3, r1
 8006ed8:	2b0a      	cmp	r3, #10
 8006eda:	d103      	bne.n	8006ee4 <__sfputc_r+0x20>
 8006edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee0:	f000 bb0a 	b.w	80074f8 <__swbuf_r>
 8006ee4:	6813      	ldr	r3, [r2, #0]
 8006ee6:	1c58      	adds	r0, r3, #1
 8006ee8:	6010      	str	r0, [r2, #0]
 8006eea:	7019      	strb	r1, [r3, #0]
 8006eec:	b2c8      	uxtb	r0, r1
 8006eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <__sfputs_r>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	4614      	mov	r4, r2
 8006efc:	18d5      	adds	r5, r2, r3
 8006efe:	42ac      	cmp	r4, r5
 8006f00:	d101      	bne.n	8006f06 <__sfputs_r+0x12>
 8006f02:	2000      	movs	r0, #0
 8006f04:	e007      	b.n	8006f16 <__sfputs_r+0x22>
 8006f06:	463a      	mov	r2, r7
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff ffd9 	bl	8006ec4 <__sfputc_r>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	d1f3      	bne.n	8006efe <__sfputs_r+0xa>
 8006f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f18 <_vfiprintf_r>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	b09d      	sub	sp, #116	; 0x74
 8006f1e:	460c      	mov	r4, r1
 8006f20:	4617      	mov	r7, r2
 8006f22:	9303      	str	r3, [sp, #12]
 8006f24:	4606      	mov	r6, r0
 8006f26:	b118      	cbz	r0, 8006f30 <_vfiprintf_r+0x18>
 8006f28:	6983      	ldr	r3, [r0, #24]
 8006f2a:	b90b      	cbnz	r3, 8006f30 <_vfiprintf_r+0x18>
 8006f2c:	f7ff ff3e 	bl	8006dac <__sinit>
 8006f30:	4b7c      	ldr	r3, [pc, #496]	; (8007124 <_vfiprintf_r+0x20c>)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d157      	bne.n	8006fe6 <_vfiprintf_r+0xce>
 8006f36:	6874      	ldr	r4, [r6, #4]
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	0718      	lsls	r0, r3, #28
 8006f3c:	d55d      	bpl.n	8006ffa <_vfiprintf_r+0xe2>
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d05a      	beq.n	8006ffa <_vfiprintf_r+0xe2>
 8006f44:	2300      	movs	r3, #0
 8006f46:	9309      	str	r3, [sp, #36]	; 0x24
 8006f48:	2320      	movs	r3, #32
 8006f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f4e:	2330      	movs	r3, #48	; 0x30
 8006f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f54:	f04f 0b01 	mov.w	fp, #1
 8006f58:	46b8      	mov	r8, r7
 8006f5a:	4645      	mov	r5, r8
 8006f5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d155      	bne.n	8007010 <_vfiprintf_r+0xf8>
 8006f64:	ebb8 0a07 	subs.w	sl, r8, r7
 8006f68:	d00b      	beq.n	8006f82 <_vfiprintf_r+0x6a>
 8006f6a:	4653      	mov	r3, sl
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff ffbf 	bl	8006ef4 <__sfputs_r>
 8006f76:	3001      	adds	r0, #1
 8006f78:	f000 80c4 	beq.w	8007104 <_vfiprintf_r+0x1ec>
 8006f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7e:	4453      	add	r3, sl
 8006f80:	9309      	str	r3, [sp, #36]	; 0x24
 8006f82:	f898 3000 	ldrb.w	r3, [r8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80bc 	beq.w	8007104 <_vfiprintf_r+0x1ec>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	9307      	str	r3, [sp, #28]
 8006f96:	9205      	str	r2, [sp, #20]
 8006f98:	9306      	str	r3, [sp, #24]
 8006f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006fa0:	2205      	movs	r2, #5
 8006fa2:	7829      	ldrb	r1, [r5, #0]
 8006fa4:	4860      	ldr	r0, [pc, #384]	; (8007128 <_vfiprintf_r+0x210>)
 8006fa6:	f7f9 f943 	bl	8000230 <memchr>
 8006faa:	f105 0801 	add.w	r8, r5, #1
 8006fae:	9b04      	ldr	r3, [sp, #16]
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d131      	bne.n	8007018 <_vfiprintf_r+0x100>
 8006fb4:	06d9      	lsls	r1, r3, #27
 8006fb6:	bf44      	itt	mi
 8006fb8:	2220      	movmi	r2, #32
 8006fba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fbe:	071a      	lsls	r2, r3, #28
 8006fc0:	bf44      	itt	mi
 8006fc2:	222b      	movmi	r2, #43	; 0x2b
 8006fc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fc8:	782a      	ldrb	r2, [r5, #0]
 8006fca:	2a2a      	cmp	r2, #42	; 0x2a
 8006fcc:	d02c      	beq.n	8007028 <_vfiprintf_r+0x110>
 8006fce:	9a07      	ldr	r2, [sp, #28]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	200a      	movs	r0, #10
 8006fd4:	46a8      	mov	r8, r5
 8006fd6:	3501      	adds	r5, #1
 8006fd8:	f898 3000 	ldrb.w	r3, [r8]
 8006fdc:	3b30      	subs	r3, #48	; 0x30
 8006fde:	2b09      	cmp	r3, #9
 8006fe0:	d96d      	bls.n	80070be <_vfiprintf_r+0x1a6>
 8006fe2:	b371      	cbz	r1, 8007042 <_vfiprintf_r+0x12a>
 8006fe4:	e026      	b.n	8007034 <_vfiprintf_r+0x11c>
 8006fe6:	4b51      	ldr	r3, [pc, #324]	; (800712c <_vfiprintf_r+0x214>)
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	d101      	bne.n	8006ff0 <_vfiprintf_r+0xd8>
 8006fec:	68b4      	ldr	r4, [r6, #8]
 8006fee:	e7a3      	b.n	8006f38 <_vfiprintf_r+0x20>
 8006ff0:	4b4f      	ldr	r3, [pc, #316]	; (8007130 <_vfiprintf_r+0x218>)
 8006ff2:	429c      	cmp	r4, r3
 8006ff4:	bf08      	it	eq
 8006ff6:	68f4      	ldreq	r4, [r6, #12]
 8006ff8:	e79e      	b.n	8006f38 <_vfiprintf_r+0x20>
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f000 fadf 	bl	80075c0 <__swsetup_r>
 8007002:	2800      	cmp	r0, #0
 8007004:	d09e      	beq.n	8006f44 <_vfiprintf_r+0x2c>
 8007006:	f04f 30ff 	mov.w	r0, #4294967295
 800700a:	b01d      	add	sp, #116	; 0x74
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	2b25      	cmp	r3, #37	; 0x25
 8007012:	d0a7      	beq.n	8006f64 <_vfiprintf_r+0x4c>
 8007014:	46a8      	mov	r8, r5
 8007016:	e7a0      	b.n	8006f5a <_vfiprintf_r+0x42>
 8007018:	4a43      	ldr	r2, [pc, #268]	; (8007128 <_vfiprintf_r+0x210>)
 800701a:	1a80      	subs	r0, r0, r2
 800701c:	fa0b f000 	lsl.w	r0, fp, r0
 8007020:	4318      	orrs	r0, r3
 8007022:	9004      	str	r0, [sp, #16]
 8007024:	4645      	mov	r5, r8
 8007026:	e7bb      	b.n	8006fa0 <_vfiprintf_r+0x88>
 8007028:	9a03      	ldr	r2, [sp, #12]
 800702a:	1d11      	adds	r1, r2, #4
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	9103      	str	r1, [sp, #12]
 8007030:	2a00      	cmp	r2, #0
 8007032:	db01      	blt.n	8007038 <_vfiprintf_r+0x120>
 8007034:	9207      	str	r2, [sp, #28]
 8007036:	e004      	b.n	8007042 <_vfiprintf_r+0x12a>
 8007038:	4252      	negs	r2, r2
 800703a:	f043 0302 	orr.w	r3, r3, #2
 800703e:	9207      	str	r2, [sp, #28]
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	f898 3000 	ldrb.w	r3, [r8]
 8007046:	2b2e      	cmp	r3, #46	; 0x2e
 8007048:	d110      	bne.n	800706c <_vfiprintf_r+0x154>
 800704a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800704e:	2b2a      	cmp	r3, #42	; 0x2a
 8007050:	f108 0101 	add.w	r1, r8, #1
 8007054:	d137      	bne.n	80070c6 <_vfiprintf_r+0x1ae>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	1d1a      	adds	r2, r3, #4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	9203      	str	r2, [sp, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb8      	it	lt
 8007062:	f04f 33ff 	movlt.w	r3, #4294967295
 8007066:	f108 0802 	add.w	r8, r8, #2
 800706a:	9305      	str	r3, [sp, #20]
 800706c:	4d31      	ldr	r5, [pc, #196]	; (8007134 <_vfiprintf_r+0x21c>)
 800706e:	f898 1000 	ldrb.w	r1, [r8]
 8007072:	2203      	movs	r2, #3
 8007074:	4628      	mov	r0, r5
 8007076:	f7f9 f8db 	bl	8000230 <memchr>
 800707a:	b140      	cbz	r0, 800708e <_vfiprintf_r+0x176>
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	1b40      	subs	r0, r0, r5
 8007080:	fa03 f000 	lsl.w	r0, r3, r0
 8007084:	9b04      	ldr	r3, [sp, #16]
 8007086:	4303      	orrs	r3, r0
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	f108 0801 	add.w	r8, r8, #1
 800708e:	f898 1000 	ldrb.w	r1, [r8]
 8007092:	4829      	ldr	r0, [pc, #164]	; (8007138 <_vfiprintf_r+0x220>)
 8007094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007098:	2206      	movs	r2, #6
 800709a:	f108 0701 	add.w	r7, r8, #1
 800709e:	f7f9 f8c7 	bl	8000230 <memchr>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d034      	beq.n	8007110 <_vfiprintf_r+0x1f8>
 80070a6:	4b25      	ldr	r3, [pc, #148]	; (800713c <_vfiprintf_r+0x224>)
 80070a8:	bb03      	cbnz	r3, 80070ec <_vfiprintf_r+0x1d4>
 80070aa:	9b03      	ldr	r3, [sp, #12]
 80070ac:	3307      	adds	r3, #7
 80070ae:	f023 0307 	bic.w	r3, r3, #7
 80070b2:	3308      	adds	r3, #8
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	444b      	add	r3, r9
 80070ba:	9309      	str	r3, [sp, #36]	; 0x24
 80070bc:	e74c      	b.n	8006f58 <_vfiprintf_r+0x40>
 80070be:	fb00 3202 	mla	r2, r0, r2, r3
 80070c2:	2101      	movs	r1, #1
 80070c4:	e786      	b.n	8006fd4 <_vfiprintf_r+0xbc>
 80070c6:	2300      	movs	r3, #0
 80070c8:	9305      	str	r3, [sp, #20]
 80070ca:	4618      	mov	r0, r3
 80070cc:	250a      	movs	r5, #10
 80070ce:	4688      	mov	r8, r1
 80070d0:	3101      	adds	r1, #1
 80070d2:	f898 2000 	ldrb.w	r2, [r8]
 80070d6:	3a30      	subs	r2, #48	; 0x30
 80070d8:	2a09      	cmp	r2, #9
 80070da:	d903      	bls.n	80070e4 <_vfiprintf_r+0x1cc>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0c5      	beq.n	800706c <_vfiprintf_r+0x154>
 80070e0:	9005      	str	r0, [sp, #20]
 80070e2:	e7c3      	b.n	800706c <_vfiprintf_r+0x154>
 80070e4:	fb05 2000 	mla	r0, r5, r0, r2
 80070e8:	2301      	movs	r3, #1
 80070ea:	e7f0      	b.n	80070ce <_vfiprintf_r+0x1b6>
 80070ec:	ab03      	add	r3, sp, #12
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4622      	mov	r2, r4
 80070f2:	4b13      	ldr	r3, [pc, #76]	; (8007140 <_vfiprintf_r+0x228>)
 80070f4:	a904      	add	r1, sp, #16
 80070f6:	4630      	mov	r0, r6
 80070f8:	f3af 8000 	nop.w
 80070fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007100:	4681      	mov	r9, r0
 8007102:	d1d8      	bne.n	80070b6 <_vfiprintf_r+0x19e>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	065b      	lsls	r3, r3, #25
 8007108:	f53f af7d 	bmi.w	8007006 <_vfiprintf_r+0xee>
 800710c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710e:	e77c      	b.n	800700a <_vfiprintf_r+0xf2>
 8007110:	ab03      	add	r3, sp, #12
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4622      	mov	r2, r4
 8007116:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <_vfiprintf_r+0x228>)
 8007118:	a904      	add	r1, sp, #16
 800711a:	4630      	mov	r0, r6
 800711c:	f000 f888 	bl	8007230 <_printf_i>
 8007120:	e7ec      	b.n	80070fc <_vfiprintf_r+0x1e4>
 8007122:	bf00      	nop
 8007124:	080088b8 	.word	0x080088b8
 8007128:	080088f8 	.word	0x080088f8
 800712c:	080088d8 	.word	0x080088d8
 8007130:	08008898 	.word	0x08008898
 8007134:	080088fe 	.word	0x080088fe
 8007138:	08008902 	.word	0x08008902
 800713c:	00000000 	.word	0x00000000
 8007140:	08006ef5 	.word	0x08006ef5

08007144 <_printf_common>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	4691      	mov	r9, r2
 800714a:	461f      	mov	r7, r3
 800714c:	688a      	ldr	r2, [r1, #8]
 800714e:	690b      	ldr	r3, [r1, #16]
 8007150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007154:	4293      	cmp	r3, r2
 8007156:	bfb8      	it	lt
 8007158:	4613      	movlt	r3, r2
 800715a:	f8c9 3000 	str.w	r3, [r9]
 800715e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007162:	4606      	mov	r6, r0
 8007164:	460c      	mov	r4, r1
 8007166:	b112      	cbz	r2, 800716e <_printf_common+0x2a>
 8007168:	3301      	adds	r3, #1
 800716a:	f8c9 3000 	str.w	r3, [r9]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	0699      	lsls	r1, r3, #26
 8007172:	bf42      	ittt	mi
 8007174:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007178:	3302      	addmi	r3, #2
 800717a:	f8c9 3000 	strmi.w	r3, [r9]
 800717e:	6825      	ldr	r5, [r4, #0]
 8007180:	f015 0506 	ands.w	r5, r5, #6
 8007184:	d107      	bne.n	8007196 <_printf_common+0x52>
 8007186:	f104 0a19 	add.w	sl, r4, #25
 800718a:	68e3      	ldr	r3, [r4, #12]
 800718c:	f8d9 2000 	ldr.w	r2, [r9]
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	429d      	cmp	r5, r3
 8007194:	db29      	blt.n	80071ea <_printf_common+0xa6>
 8007196:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	3300      	adds	r3, #0
 800719e:	bf18      	it	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	0692      	lsls	r2, r2, #26
 80071a4:	d42e      	bmi.n	8007204 <_printf_common+0xc0>
 80071a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071aa:	4639      	mov	r1, r7
 80071ac:	4630      	mov	r0, r6
 80071ae:	47c0      	blx	r8
 80071b0:	3001      	adds	r0, #1
 80071b2:	d021      	beq.n	80071f8 <_printf_common+0xb4>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	68e5      	ldr	r5, [r4, #12]
 80071b8:	f8d9 2000 	ldr.w	r2, [r9]
 80071bc:	f003 0306 	and.w	r3, r3, #6
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	bf08      	it	eq
 80071c4:	1aad      	subeq	r5, r5, r2
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	6922      	ldr	r2, [r4, #16]
 80071ca:	bf0c      	ite	eq
 80071cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d0:	2500      	movne	r5, #0
 80071d2:	4293      	cmp	r3, r2
 80071d4:	bfc4      	itt	gt
 80071d6:	1a9b      	subgt	r3, r3, r2
 80071d8:	18ed      	addgt	r5, r5, r3
 80071da:	f04f 0900 	mov.w	r9, #0
 80071de:	341a      	adds	r4, #26
 80071e0:	454d      	cmp	r5, r9
 80071e2:	d11b      	bne.n	800721c <_printf_common+0xd8>
 80071e4:	2000      	movs	r0, #0
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4639      	mov	r1, r7
 80071f0:	4630      	mov	r0, r6
 80071f2:	47c0      	blx	r8
 80071f4:	3001      	adds	r0, #1
 80071f6:	d103      	bne.n	8007200 <_printf_common+0xbc>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007200:	3501      	adds	r5, #1
 8007202:	e7c2      	b.n	800718a <_printf_common+0x46>
 8007204:	18e1      	adds	r1, r4, r3
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	2030      	movs	r0, #48	; 0x30
 800720a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800720e:	4422      	add	r2, r4
 8007210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007218:	3302      	adds	r3, #2
 800721a:	e7c4      	b.n	80071a6 <_printf_common+0x62>
 800721c:	2301      	movs	r3, #1
 800721e:	4622      	mov	r2, r4
 8007220:	4639      	mov	r1, r7
 8007222:	4630      	mov	r0, r6
 8007224:	47c0      	blx	r8
 8007226:	3001      	adds	r0, #1
 8007228:	d0e6      	beq.n	80071f8 <_printf_common+0xb4>
 800722a:	f109 0901 	add.w	r9, r9, #1
 800722e:	e7d7      	b.n	80071e0 <_printf_common+0x9c>

08007230 <_printf_i>:
 8007230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007234:	4617      	mov	r7, r2
 8007236:	7e0a      	ldrb	r2, [r1, #24]
 8007238:	b085      	sub	sp, #20
 800723a:	2a6e      	cmp	r2, #110	; 0x6e
 800723c:	4698      	mov	r8, r3
 800723e:	4606      	mov	r6, r0
 8007240:	460c      	mov	r4, r1
 8007242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007244:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007248:	f000 80bc 	beq.w	80073c4 <_printf_i+0x194>
 800724c:	d81a      	bhi.n	8007284 <_printf_i+0x54>
 800724e:	2a63      	cmp	r2, #99	; 0x63
 8007250:	d02e      	beq.n	80072b0 <_printf_i+0x80>
 8007252:	d80a      	bhi.n	800726a <_printf_i+0x3a>
 8007254:	2a00      	cmp	r2, #0
 8007256:	f000 80c8 	beq.w	80073ea <_printf_i+0x1ba>
 800725a:	2a58      	cmp	r2, #88	; 0x58
 800725c:	f000 808a 	beq.w	8007374 <_printf_i+0x144>
 8007260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007264:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007268:	e02a      	b.n	80072c0 <_printf_i+0x90>
 800726a:	2a64      	cmp	r2, #100	; 0x64
 800726c:	d001      	beq.n	8007272 <_printf_i+0x42>
 800726e:	2a69      	cmp	r2, #105	; 0x69
 8007270:	d1f6      	bne.n	8007260 <_printf_i+0x30>
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	f011 0f80 	tst.w	r1, #128	; 0x80
 800727a:	d023      	beq.n	80072c4 <_printf_i+0x94>
 800727c:	1d11      	adds	r1, r2, #4
 800727e:	6019      	str	r1, [r3, #0]
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	e027      	b.n	80072d4 <_printf_i+0xa4>
 8007284:	2a73      	cmp	r2, #115	; 0x73
 8007286:	f000 80b4 	beq.w	80073f2 <_printf_i+0x1c2>
 800728a:	d808      	bhi.n	800729e <_printf_i+0x6e>
 800728c:	2a6f      	cmp	r2, #111	; 0x6f
 800728e:	d02a      	beq.n	80072e6 <_printf_i+0xb6>
 8007290:	2a70      	cmp	r2, #112	; 0x70
 8007292:	d1e5      	bne.n	8007260 <_printf_i+0x30>
 8007294:	680a      	ldr	r2, [r1, #0]
 8007296:	f042 0220 	orr.w	r2, r2, #32
 800729a:	600a      	str	r2, [r1, #0]
 800729c:	e003      	b.n	80072a6 <_printf_i+0x76>
 800729e:	2a75      	cmp	r2, #117	; 0x75
 80072a0:	d021      	beq.n	80072e6 <_printf_i+0xb6>
 80072a2:	2a78      	cmp	r2, #120	; 0x78
 80072a4:	d1dc      	bne.n	8007260 <_printf_i+0x30>
 80072a6:	2278      	movs	r2, #120	; 0x78
 80072a8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80072ac:	496e      	ldr	r1, [pc, #440]	; (8007468 <_printf_i+0x238>)
 80072ae:	e064      	b.n	800737a <_printf_i+0x14a>
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80072b6:	1d11      	adds	r1, r2, #4
 80072b8:	6019      	str	r1, [r3, #0]
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072c0:	2301      	movs	r3, #1
 80072c2:	e0a3      	b.n	800740c <_printf_i+0x1dc>
 80072c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80072c8:	f102 0104 	add.w	r1, r2, #4
 80072cc:	6019      	str	r1, [r3, #0]
 80072ce:	d0d7      	beq.n	8007280 <_printf_i+0x50>
 80072d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da03      	bge.n	80072e0 <_printf_i+0xb0>
 80072d8:	222d      	movs	r2, #45	; 0x2d
 80072da:	425b      	negs	r3, r3
 80072dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80072e0:	4962      	ldr	r1, [pc, #392]	; (800746c <_printf_i+0x23c>)
 80072e2:	220a      	movs	r2, #10
 80072e4:	e017      	b.n	8007316 <_printf_i+0xe6>
 80072e6:	6820      	ldr	r0, [r4, #0]
 80072e8:	6819      	ldr	r1, [r3, #0]
 80072ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80072ee:	d003      	beq.n	80072f8 <_printf_i+0xc8>
 80072f0:	1d08      	adds	r0, r1, #4
 80072f2:	6018      	str	r0, [r3, #0]
 80072f4:	680b      	ldr	r3, [r1, #0]
 80072f6:	e006      	b.n	8007306 <_printf_i+0xd6>
 80072f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072fc:	f101 0004 	add.w	r0, r1, #4
 8007300:	6018      	str	r0, [r3, #0]
 8007302:	d0f7      	beq.n	80072f4 <_printf_i+0xc4>
 8007304:	880b      	ldrh	r3, [r1, #0]
 8007306:	4959      	ldr	r1, [pc, #356]	; (800746c <_printf_i+0x23c>)
 8007308:	2a6f      	cmp	r2, #111	; 0x6f
 800730a:	bf14      	ite	ne
 800730c:	220a      	movne	r2, #10
 800730e:	2208      	moveq	r2, #8
 8007310:	2000      	movs	r0, #0
 8007312:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007316:	6865      	ldr	r5, [r4, #4]
 8007318:	60a5      	str	r5, [r4, #8]
 800731a:	2d00      	cmp	r5, #0
 800731c:	f2c0 809c 	blt.w	8007458 <_printf_i+0x228>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	f020 0004 	bic.w	r0, r0, #4
 8007326:	6020      	str	r0, [r4, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d13f      	bne.n	80073ac <_printf_i+0x17c>
 800732c:	2d00      	cmp	r5, #0
 800732e:	f040 8095 	bne.w	800745c <_printf_i+0x22c>
 8007332:	4675      	mov	r5, lr
 8007334:	2a08      	cmp	r2, #8
 8007336:	d10b      	bne.n	8007350 <_printf_i+0x120>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	07da      	lsls	r2, r3, #31
 800733c:	d508      	bpl.n	8007350 <_printf_i+0x120>
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	6862      	ldr	r2, [r4, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	bfde      	ittt	le
 8007346:	2330      	movle	r3, #48	; 0x30
 8007348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800734c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007350:	ebae 0305 	sub.w	r3, lr, r5
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	f8cd 8000 	str.w	r8, [sp]
 800735a:	463b      	mov	r3, r7
 800735c:	aa03      	add	r2, sp, #12
 800735e:	4621      	mov	r1, r4
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff feef 	bl	8007144 <_printf_common>
 8007366:	3001      	adds	r0, #1
 8007368:	d155      	bne.n	8007416 <_printf_i+0x1e6>
 800736a:	f04f 30ff 	mov.w	r0, #4294967295
 800736e:	b005      	add	sp, #20
 8007370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007374:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007378:	493c      	ldr	r1, [pc, #240]	; (800746c <_printf_i+0x23c>)
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007382:	f100 0504 	add.w	r5, r0, #4
 8007386:	601d      	str	r5, [r3, #0]
 8007388:	d001      	beq.n	800738e <_printf_i+0x15e>
 800738a:	6803      	ldr	r3, [r0, #0]
 800738c:	e002      	b.n	8007394 <_printf_i+0x164>
 800738e:	0655      	lsls	r5, r2, #25
 8007390:	d5fb      	bpl.n	800738a <_printf_i+0x15a>
 8007392:	8803      	ldrh	r3, [r0, #0]
 8007394:	07d0      	lsls	r0, r2, #31
 8007396:	bf44      	itt	mi
 8007398:	f042 0220 	orrmi.w	r2, r2, #32
 800739c:	6022      	strmi	r2, [r4, #0]
 800739e:	b91b      	cbnz	r3, 80073a8 <_printf_i+0x178>
 80073a0:	6822      	ldr	r2, [r4, #0]
 80073a2:	f022 0220 	bic.w	r2, r2, #32
 80073a6:	6022      	str	r2, [r4, #0]
 80073a8:	2210      	movs	r2, #16
 80073aa:	e7b1      	b.n	8007310 <_printf_i+0xe0>
 80073ac:	4675      	mov	r5, lr
 80073ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80073b2:	fb02 3310 	mls	r3, r2, r0, r3
 80073b6:	5ccb      	ldrb	r3, [r1, r3]
 80073b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80073bc:	4603      	mov	r3, r0
 80073be:	2800      	cmp	r0, #0
 80073c0:	d1f5      	bne.n	80073ae <_printf_i+0x17e>
 80073c2:	e7b7      	b.n	8007334 <_printf_i+0x104>
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	6949      	ldr	r1, [r1, #20]
 80073ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80073ce:	d004      	beq.n	80073da <_printf_i+0x1aa>
 80073d0:	1d10      	adds	r0, r2, #4
 80073d2:	6018      	str	r0, [r3, #0]
 80073d4:	6813      	ldr	r3, [r2, #0]
 80073d6:	6019      	str	r1, [r3, #0]
 80073d8:	e007      	b.n	80073ea <_printf_i+0x1ba>
 80073da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073de:	f102 0004 	add.w	r0, r2, #4
 80073e2:	6018      	str	r0, [r3, #0]
 80073e4:	6813      	ldr	r3, [r2, #0]
 80073e6:	d0f6      	beq.n	80073d6 <_printf_i+0x1a6>
 80073e8:	8019      	strh	r1, [r3, #0]
 80073ea:	2300      	movs	r3, #0
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	4675      	mov	r5, lr
 80073f0:	e7b1      	b.n	8007356 <_printf_i+0x126>
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	1d11      	adds	r1, r2, #4
 80073f6:	6019      	str	r1, [r3, #0]
 80073f8:	6815      	ldr	r5, [r2, #0]
 80073fa:	6862      	ldr	r2, [r4, #4]
 80073fc:	2100      	movs	r1, #0
 80073fe:	4628      	mov	r0, r5
 8007400:	f7f8 ff16 	bl	8000230 <memchr>
 8007404:	b108      	cbz	r0, 800740a <_printf_i+0x1da>
 8007406:	1b40      	subs	r0, r0, r5
 8007408:	6060      	str	r0, [r4, #4]
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	6123      	str	r3, [r4, #16]
 800740e:	2300      	movs	r3, #0
 8007410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007414:	e79f      	b.n	8007356 <_printf_i+0x126>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	462a      	mov	r2, r5
 800741a:	4639      	mov	r1, r7
 800741c:	4630      	mov	r0, r6
 800741e:	47c0      	blx	r8
 8007420:	3001      	adds	r0, #1
 8007422:	d0a2      	beq.n	800736a <_printf_i+0x13a>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	079b      	lsls	r3, r3, #30
 8007428:	d507      	bpl.n	800743a <_printf_i+0x20a>
 800742a:	2500      	movs	r5, #0
 800742c:	f104 0919 	add.w	r9, r4, #25
 8007430:	68e3      	ldr	r3, [r4, #12]
 8007432:	9a03      	ldr	r2, [sp, #12]
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	429d      	cmp	r5, r3
 8007438:	db05      	blt.n	8007446 <_printf_i+0x216>
 800743a:	68e0      	ldr	r0, [r4, #12]
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	4298      	cmp	r0, r3
 8007440:	bfb8      	it	lt
 8007442:	4618      	movlt	r0, r3
 8007444:	e793      	b.n	800736e <_printf_i+0x13e>
 8007446:	2301      	movs	r3, #1
 8007448:	464a      	mov	r2, r9
 800744a:	4639      	mov	r1, r7
 800744c:	4630      	mov	r0, r6
 800744e:	47c0      	blx	r8
 8007450:	3001      	adds	r0, #1
 8007452:	d08a      	beq.n	800736a <_printf_i+0x13a>
 8007454:	3501      	adds	r5, #1
 8007456:	e7eb      	b.n	8007430 <_printf_i+0x200>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1a7      	bne.n	80073ac <_printf_i+0x17c>
 800745c:	780b      	ldrb	r3, [r1, #0]
 800745e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007462:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007466:	e765      	b.n	8007334 <_printf_i+0x104>
 8007468:	0800891a 	.word	0x0800891a
 800746c:	08008909 	.word	0x08008909

08007470 <__sread>:
 8007470:	b510      	push	{r4, lr}
 8007472:	460c      	mov	r4, r1
 8007474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007478:	f000 fa48 	bl	800790c <_read_r>
 800747c:	2800      	cmp	r0, #0
 800747e:	bfab      	itete	ge
 8007480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007482:	89a3      	ldrhlt	r3, [r4, #12]
 8007484:	181b      	addge	r3, r3, r0
 8007486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800748a:	bfac      	ite	ge
 800748c:	6563      	strge	r3, [r4, #84]	; 0x54
 800748e:	81a3      	strhlt	r3, [r4, #12]
 8007490:	bd10      	pop	{r4, pc}

08007492 <__swrite>:
 8007492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007496:	461f      	mov	r7, r3
 8007498:	898b      	ldrh	r3, [r1, #12]
 800749a:	05db      	lsls	r3, r3, #23
 800749c:	4605      	mov	r5, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	4616      	mov	r6, r2
 80074a2:	d505      	bpl.n	80074b0 <__swrite+0x1e>
 80074a4:	2302      	movs	r3, #2
 80074a6:	2200      	movs	r2, #0
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	f000 f9b8 	bl	8007820 <_lseek_r>
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	4632      	mov	r2, r6
 80074be:	463b      	mov	r3, r7
 80074c0:	4628      	mov	r0, r5
 80074c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074c6:	f000 b869 	b.w	800759c <_write_r>

080074ca <__sseek>:
 80074ca:	b510      	push	{r4, lr}
 80074cc:	460c      	mov	r4, r1
 80074ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d2:	f000 f9a5 	bl	8007820 <_lseek_r>
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	bf15      	itete	ne
 80074dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80074de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074e6:	81a3      	strheq	r3, [r4, #12]
 80074e8:	bf18      	it	ne
 80074ea:	81a3      	strhne	r3, [r4, #12]
 80074ec:	bd10      	pop	{r4, pc}

080074ee <__sclose>:
 80074ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f2:	f000 b8d3 	b.w	800769c <_close_r>
	...

080074f8 <__swbuf_r>:
 80074f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fa:	460e      	mov	r6, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	4605      	mov	r5, r0
 8007500:	b118      	cbz	r0, 800750a <__swbuf_r+0x12>
 8007502:	6983      	ldr	r3, [r0, #24]
 8007504:	b90b      	cbnz	r3, 800750a <__swbuf_r+0x12>
 8007506:	f7ff fc51 	bl	8006dac <__sinit>
 800750a:	4b21      	ldr	r3, [pc, #132]	; (8007590 <__swbuf_r+0x98>)
 800750c:	429c      	cmp	r4, r3
 800750e:	d12a      	bne.n	8007566 <__swbuf_r+0x6e>
 8007510:	686c      	ldr	r4, [r5, #4]
 8007512:	69a3      	ldr	r3, [r4, #24]
 8007514:	60a3      	str	r3, [r4, #8]
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	071a      	lsls	r2, r3, #28
 800751a:	d52e      	bpl.n	800757a <__swbuf_r+0x82>
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	b363      	cbz	r3, 800757a <__swbuf_r+0x82>
 8007520:	6923      	ldr	r3, [r4, #16]
 8007522:	6820      	ldr	r0, [r4, #0]
 8007524:	1ac0      	subs	r0, r0, r3
 8007526:	6963      	ldr	r3, [r4, #20]
 8007528:	b2f6      	uxtb	r6, r6
 800752a:	4298      	cmp	r0, r3
 800752c:	4637      	mov	r7, r6
 800752e:	db04      	blt.n	800753a <__swbuf_r+0x42>
 8007530:	4621      	mov	r1, r4
 8007532:	4628      	mov	r0, r5
 8007534:	f000 f94a 	bl	80077cc <_fflush_r>
 8007538:	bb28      	cbnz	r0, 8007586 <__swbuf_r+0x8e>
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	3b01      	subs	r3, #1
 800753e:	60a3      	str	r3, [r4, #8]
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	701e      	strb	r6, [r3, #0]
 8007548:	6963      	ldr	r3, [r4, #20]
 800754a:	3001      	adds	r0, #1
 800754c:	4298      	cmp	r0, r3
 800754e:	d004      	beq.n	800755a <__swbuf_r+0x62>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	07db      	lsls	r3, r3, #31
 8007554:	d519      	bpl.n	800758a <__swbuf_r+0x92>
 8007556:	2e0a      	cmp	r6, #10
 8007558:	d117      	bne.n	800758a <__swbuf_r+0x92>
 800755a:	4621      	mov	r1, r4
 800755c:	4628      	mov	r0, r5
 800755e:	f000 f935 	bl	80077cc <_fflush_r>
 8007562:	b190      	cbz	r0, 800758a <__swbuf_r+0x92>
 8007564:	e00f      	b.n	8007586 <__swbuf_r+0x8e>
 8007566:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <__swbuf_r+0x9c>)
 8007568:	429c      	cmp	r4, r3
 800756a:	d101      	bne.n	8007570 <__swbuf_r+0x78>
 800756c:	68ac      	ldr	r4, [r5, #8]
 800756e:	e7d0      	b.n	8007512 <__swbuf_r+0x1a>
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <__swbuf_r+0xa0>)
 8007572:	429c      	cmp	r4, r3
 8007574:	bf08      	it	eq
 8007576:	68ec      	ldreq	r4, [r5, #12]
 8007578:	e7cb      	b.n	8007512 <__swbuf_r+0x1a>
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 f81f 	bl	80075c0 <__swsetup_r>
 8007582:	2800      	cmp	r0, #0
 8007584:	d0cc      	beq.n	8007520 <__swbuf_r+0x28>
 8007586:	f04f 37ff 	mov.w	r7, #4294967295
 800758a:	4638      	mov	r0, r7
 800758c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800758e:	bf00      	nop
 8007590:	080088b8 	.word	0x080088b8
 8007594:	080088d8 	.word	0x080088d8
 8007598:	08008898 	.word	0x08008898

0800759c <_write_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4c07      	ldr	r4, [pc, #28]	; (80075bc <_write_r+0x20>)
 80075a0:	4605      	mov	r5, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	6022      	str	r2, [r4, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7fa ff48 	bl	8002440 <_write>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_write_r+0x1e>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_write_r+0x1e>
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20003208 	.word	0x20003208

080075c0 <__swsetup_r>:
 80075c0:	4b32      	ldr	r3, [pc, #200]	; (800768c <__swsetup_r+0xcc>)
 80075c2:	b570      	push	{r4, r5, r6, lr}
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	4606      	mov	r6, r0
 80075c8:	460c      	mov	r4, r1
 80075ca:	b125      	cbz	r5, 80075d6 <__swsetup_r+0x16>
 80075cc:	69ab      	ldr	r3, [r5, #24]
 80075ce:	b913      	cbnz	r3, 80075d6 <__swsetup_r+0x16>
 80075d0:	4628      	mov	r0, r5
 80075d2:	f7ff fbeb 	bl	8006dac <__sinit>
 80075d6:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <__swsetup_r+0xd0>)
 80075d8:	429c      	cmp	r4, r3
 80075da:	d10f      	bne.n	80075fc <__swsetup_r+0x3c>
 80075dc:	686c      	ldr	r4, [r5, #4]
 80075de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	0715      	lsls	r5, r2, #28
 80075e6:	d42c      	bmi.n	8007642 <__swsetup_r+0x82>
 80075e8:	06d0      	lsls	r0, r2, #27
 80075ea:	d411      	bmi.n	8007610 <__swsetup_r+0x50>
 80075ec:	2209      	movs	r2, #9
 80075ee:	6032      	str	r2, [r6, #0]
 80075f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	4b25      	ldr	r3, [pc, #148]	; (8007694 <__swsetup_r+0xd4>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d101      	bne.n	8007606 <__swsetup_r+0x46>
 8007602:	68ac      	ldr	r4, [r5, #8]
 8007604:	e7eb      	b.n	80075de <__swsetup_r+0x1e>
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <__swsetup_r+0xd8>)
 8007608:	429c      	cmp	r4, r3
 800760a:	bf08      	it	eq
 800760c:	68ec      	ldreq	r4, [r5, #12]
 800760e:	e7e6      	b.n	80075de <__swsetup_r+0x1e>
 8007610:	0751      	lsls	r1, r2, #29
 8007612:	d512      	bpl.n	800763a <__swsetup_r+0x7a>
 8007614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007616:	b141      	cbz	r1, 800762a <__swsetup_r+0x6a>
 8007618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800761c:	4299      	cmp	r1, r3
 800761e:	d002      	beq.n	8007626 <__swsetup_r+0x66>
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff fa7d 	bl	8006b20 <_free_r>
 8007626:	2300      	movs	r3, #0
 8007628:	6363      	str	r3, [r4, #52]	; 0x34
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	2300      	movs	r3, #0
 8007634:	6063      	str	r3, [r4, #4]
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	f043 0308 	orr.w	r3, r3, #8
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	b94b      	cbnz	r3, 800765a <__swsetup_r+0x9a>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800764c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007650:	d003      	beq.n	800765a <__swsetup_r+0x9a>
 8007652:	4621      	mov	r1, r4
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f919 	bl	800788c <__smakebuf_r>
 800765a:	89a2      	ldrh	r2, [r4, #12]
 800765c:	f012 0301 	ands.w	r3, r2, #1
 8007660:	d00c      	beq.n	800767c <__swsetup_r+0xbc>
 8007662:	2300      	movs	r3, #0
 8007664:	60a3      	str	r3, [r4, #8]
 8007666:	6963      	ldr	r3, [r4, #20]
 8007668:	425b      	negs	r3, r3
 800766a:	61a3      	str	r3, [r4, #24]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	b953      	cbnz	r3, 8007686 <__swsetup_r+0xc6>
 8007670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007674:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007678:	d1ba      	bne.n	80075f0 <__swsetup_r+0x30>
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	0792      	lsls	r2, r2, #30
 800767e:	bf58      	it	pl
 8007680:	6963      	ldrpl	r3, [r4, #20]
 8007682:	60a3      	str	r3, [r4, #8]
 8007684:	e7f2      	b.n	800766c <__swsetup_r+0xac>
 8007686:	2000      	movs	r0, #0
 8007688:	e7f7      	b.n	800767a <__swsetup_r+0xba>
 800768a:	bf00      	nop
 800768c:	2000000c 	.word	0x2000000c
 8007690:	080088b8 	.word	0x080088b8
 8007694:	080088d8 	.word	0x080088d8
 8007698:	08008898 	.word	0x08008898

0800769c <_close_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4c06      	ldr	r4, [pc, #24]	; (80076b8 <_close_r+0x1c>)
 80076a0:	2300      	movs	r3, #0
 80076a2:	4605      	mov	r5, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	f7fa fef2 	bl	8002490 <_close>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_close_r+0x1a>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_close_r+0x1a>
 80076b4:	602b      	str	r3, [r5, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20003208 	.word	0x20003208

080076bc <__sflush_r>:
 80076bc:	898a      	ldrh	r2, [r1, #12]
 80076be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c2:	4605      	mov	r5, r0
 80076c4:	0710      	lsls	r0, r2, #28
 80076c6:	460c      	mov	r4, r1
 80076c8:	d45a      	bmi.n	8007780 <__sflush_r+0xc4>
 80076ca:	684b      	ldr	r3, [r1, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc05      	bgt.n	80076dc <__sflush_r+0x20>
 80076d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dc02      	bgt.n	80076dc <__sflush_r+0x20>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076de:	2e00      	cmp	r6, #0
 80076e0:	d0f9      	beq.n	80076d6 <__sflush_r+0x1a>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076e8:	682f      	ldr	r7, [r5, #0]
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	d033      	beq.n	8007756 <__sflush_r+0x9a>
 80076ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	075a      	lsls	r2, r3, #29
 80076f4:	d505      	bpl.n	8007702 <__sflush_r+0x46>
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	1ac0      	subs	r0, r0, r3
 80076fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fc:	b10b      	cbz	r3, 8007702 <__sflush_r+0x46>
 80076fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007700:	1ac0      	subs	r0, r0, r3
 8007702:	2300      	movs	r3, #0
 8007704:	4602      	mov	r2, r0
 8007706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007708:	6a21      	ldr	r1, [r4, #32]
 800770a:	4628      	mov	r0, r5
 800770c:	47b0      	blx	r6
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	d106      	bne.n	8007722 <__sflush_r+0x66>
 8007714:	6829      	ldr	r1, [r5, #0]
 8007716:	291d      	cmp	r1, #29
 8007718:	d84b      	bhi.n	80077b2 <__sflush_r+0xf6>
 800771a:	4a2b      	ldr	r2, [pc, #172]	; (80077c8 <__sflush_r+0x10c>)
 800771c:	40ca      	lsrs	r2, r1
 800771e:	07d6      	lsls	r6, r2, #31
 8007720:	d547      	bpl.n	80077b2 <__sflush_r+0xf6>
 8007722:	2200      	movs	r2, #0
 8007724:	6062      	str	r2, [r4, #4]
 8007726:	04d9      	lsls	r1, r3, #19
 8007728:	6922      	ldr	r2, [r4, #16]
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	d504      	bpl.n	8007738 <__sflush_r+0x7c>
 800772e:	1c42      	adds	r2, r0, #1
 8007730:	d101      	bne.n	8007736 <__sflush_r+0x7a>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b903      	cbnz	r3, 8007738 <__sflush_r+0x7c>
 8007736:	6560      	str	r0, [r4, #84]	; 0x54
 8007738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800773a:	602f      	str	r7, [r5, #0]
 800773c:	2900      	cmp	r1, #0
 800773e:	d0ca      	beq.n	80076d6 <__sflush_r+0x1a>
 8007740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007744:	4299      	cmp	r1, r3
 8007746:	d002      	beq.n	800774e <__sflush_r+0x92>
 8007748:	4628      	mov	r0, r5
 800774a:	f7ff f9e9 	bl	8006b20 <_free_r>
 800774e:	2000      	movs	r0, #0
 8007750:	6360      	str	r0, [r4, #52]	; 0x34
 8007752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007756:	6a21      	ldr	r1, [r4, #32]
 8007758:	2301      	movs	r3, #1
 800775a:	4628      	mov	r0, r5
 800775c:	47b0      	blx	r6
 800775e:	1c41      	adds	r1, r0, #1
 8007760:	d1c6      	bne.n	80076f0 <__sflush_r+0x34>
 8007762:	682b      	ldr	r3, [r5, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0c3      	beq.n	80076f0 <__sflush_r+0x34>
 8007768:	2b1d      	cmp	r3, #29
 800776a:	d001      	beq.n	8007770 <__sflush_r+0xb4>
 800776c:	2b16      	cmp	r3, #22
 800776e:	d101      	bne.n	8007774 <__sflush_r+0xb8>
 8007770:	602f      	str	r7, [r5, #0]
 8007772:	e7b0      	b.n	80076d6 <__sflush_r+0x1a>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007780:	690f      	ldr	r7, [r1, #16]
 8007782:	2f00      	cmp	r7, #0
 8007784:	d0a7      	beq.n	80076d6 <__sflush_r+0x1a>
 8007786:	0793      	lsls	r3, r2, #30
 8007788:	680e      	ldr	r6, [r1, #0]
 800778a:	bf08      	it	eq
 800778c:	694b      	ldreq	r3, [r1, #20]
 800778e:	600f      	str	r7, [r1, #0]
 8007790:	bf18      	it	ne
 8007792:	2300      	movne	r3, #0
 8007794:	eba6 0807 	sub.w	r8, r6, r7
 8007798:	608b      	str	r3, [r1, #8]
 800779a:	f1b8 0f00 	cmp.w	r8, #0
 800779e:	dd9a      	ble.n	80076d6 <__sflush_r+0x1a>
 80077a0:	4643      	mov	r3, r8
 80077a2:	463a      	mov	r2, r7
 80077a4:	6a21      	ldr	r1, [r4, #32]
 80077a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b0      	blx	r6
 80077ac:	2800      	cmp	r0, #0
 80077ae:	dc07      	bgt.n	80077c0 <__sflush_r+0x104>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
 80077bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c0:	4407      	add	r7, r0
 80077c2:	eba8 0800 	sub.w	r8, r8, r0
 80077c6:	e7e8      	b.n	800779a <__sflush_r+0xde>
 80077c8:	20400001 	.word	0x20400001

080077cc <_fflush_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	690b      	ldr	r3, [r1, #16]
 80077d0:	4605      	mov	r5, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	b1db      	cbz	r3, 800780e <_fflush_r+0x42>
 80077d6:	b118      	cbz	r0, 80077e0 <_fflush_r+0x14>
 80077d8:	6983      	ldr	r3, [r0, #24]
 80077da:	b90b      	cbnz	r3, 80077e0 <_fflush_r+0x14>
 80077dc:	f7ff fae6 	bl	8006dac <__sinit>
 80077e0:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <_fflush_r+0x48>)
 80077e2:	429c      	cmp	r4, r3
 80077e4:	d109      	bne.n	80077fa <_fflush_r+0x2e>
 80077e6:	686c      	ldr	r4, [r5, #4]
 80077e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ec:	b17b      	cbz	r3, 800780e <_fflush_r+0x42>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4628      	mov	r0, r5
 80077f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f6:	f7ff bf61 	b.w	80076bc <__sflush_r>
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <_fflush_r+0x4c>)
 80077fc:	429c      	cmp	r4, r3
 80077fe:	d101      	bne.n	8007804 <_fflush_r+0x38>
 8007800:	68ac      	ldr	r4, [r5, #8]
 8007802:	e7f1      	b.n	80077e8 <_fflush_r+0x1c>
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <_fflush_r+0x50>)
 8007806:	429c      	cmp	r4, r3
 8007808:	bf08      	it	eq
 800780a:	68ec      	ldreq	r4, [r5, #12]
 800780c:	e7ec      	b.n	80077e8 <_fflush_r+0x1c>
 800780e:	2000      	movs	r0, #0
 8007810:	bd38      	pop	{r3, r4, r5, pc}
 8007812:	bf00      	nop
 8007814:	080088b8 	.word	0x080088b8
 8007818:	080088d8 	.word	0x080088d8
 800781c:	08008898 	.word	0x08008898

08007820 <_lseek_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4c07      	ldr	r4, [pc, #28]	; (8007840 <_lseek_r+0x20>)
 8007824:	4605      	mov	r5, r0
 8007826:	4608      	mov	r0, r1
 8007828:	4611      	mov	r1, r2
 800782a:	2200      	movs	r2, #0
 800782c:	6022      	str	r2, [r4, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	f7fa fe38 	bl	80024a4 <_lseek>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_lseek_r+0x1e>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	b103      	cbz	r3, 800783e <_lseek_r+0x1e>
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20003208 	.word	0x20003208

08007844 <__swhatbuf_r>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	460e      	mov	r6, r1
 8007848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784c:	2900      	cmp	r1, #0
 800784e:	b090      	sub	sp, #64	; 0x40
 8007850:	4614      	mov	r4, r2
 8007852:	461d      	mov	r5, r3
 8007854:	da07      	bge.n	8007866 <__swhatbuf_r+0x22>
 8007856:	2300      	movs	r3, #0
 8007858:	602b      	str	r3, [r5, #0]
 800785a:	89b3      	ldrh	r3, [r6, #12]
 800785c:	061a      	lsls	r2, r3, #24
 800785e:	d410      	bmi.n	8007882 <__swhatbuf_r+0x3e>
 8007860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007864:	e00e      	b.n	8007884 <__swhatbuf_r+0x40>
 8007866:	aa01      	add	r2, sp, #4
 8007868:	f000 f862 	bl	8007930 <_fstat_r>
 800786c:	2800      	cmp	r0, #0
 800786e:	dbf2      	blt.n	8007856 <__swhatbuf_r+0x12>
 8007870:	9a02      	ldr	r2, [sp, #8]
 8007872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800787a:	425a      	negs	r2, r3
 800787c:	415a      	adcs	r2, r3
 800787e:	602a      	str	r2, [r5, #0]
 8007880:	e7ee      	b.n	8007860 <__swhatbuf_r+0x1c>
 8007882:	2340      	movs	r3, #64	; 0x40
 8007884:	2000      	movs	r0, #0
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	b010      	add	sp, #64	; 0x40
 800788a:	bd70      	pop	{r4, r5, r6, pc}

0800788c <__smakebuf_r>:
 800788c:	898b      	ldrh	r3, [r1, #12]
 800788e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007890:	079d      	lsls	r5, r3, #30
 8007892:	4606      	mov	r6, r0
 8007894:	460c      	mov	r4, r1
 8007896:	d507      	bpl.n	80078a8 <__smakebuf_r+0x1c>
 8007898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	2301      	movs	r3, #1
 80078a2:	6163      	str	r3, [r4, #20]
 80078a4:	b002      	add	sp, #8
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	ab01      	add	r3, sp, #4
 80078aa:	466a      	mov	r2, sp
 80078ac:	f7ff ffca 	bl	8007844 <__swhatbuf_r>
 80078b0:	9900      	ldr	r1, [sp, #0]
 80078b2:	4605      	mov	r5, r0
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7ff f981 	bl	8006bbc <_malloc_r>
 80078ba:	b948      	cbnz	r0, 80078d0 <__smakebuf_r+0x44>
 80078bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c0:	059a      	lsls	r2, r3, #22
 80078c2:	d4ef      	bmi.n	80078a4 <__smakebuf_r+0x18>
 80078c4:	f023 0303 	bic.w	r3, r3, #3
 80078c8:	f043 0302 	orr.w	r3, r3, #2
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	e7e3      	b.n	8007898 <__smakebuf_r+0xc>
 80078d0:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <__smakebuf_r+0x7c>)
 80078d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	6020      	str	r0, [r4, #0]
 80078d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	9b00      	ldr	r3, [sp, #0]
 80078e0:	6163      	str	r3, [r4, #20]
 80078e2:	9b01      	ldr	r3, [sp, #4]
 80078e4:	6120      	str	r0, [r4, #16]
 80078e6:	b15b      	cbz	r3, 8007900 <__smakebuf_r+0x74>
 80078e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ec:	4630      	mov	r0, r6
 80078ee:	f000 f831 	bl	8007954 <_isatty_r>
 80078f2:	b128      	cbz	r0, 8007900 <__smakebuf_r+0x74>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f023 0303 	bic.w	r3, r3, #3
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	431d      	orrs	r5, r3
 8007904:	81a5      	strh	r5, [r4, #12]
 8007906:	e7cd      	b.n	80078a4 <__smakebuf_r+0x18>
 8007908:	08006d2d 	.word	0x08006d2d

0800790c <_read_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4c07      	ldr	r4, [pc, #28]	; (800792c <_read_r+0x20>)
 8007910:	4605      	mov	r5, r0
 8007912:	4608      	mov	r0, r1
 8007914:	4611      	mov	r1, r2
 8007916:	2200      	movs	r2, #0
 8007918:	6022      	str	r2, [r4, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7fa fd82 	bl	8002424 <_read>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_read_r+0x1e>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	b103      	cbz	r3, 800792a <_read_r+0x1e>
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20003208 	.word	0x20003208

08007930 <_fstat_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4c07      	ldr	r4, [pc, #28]	; (8007950 <_fstat_r+0x20>)
 8007934:	2300      	movs	r3, #0
 8007936:	4605      	mov	r5, r0
 8007938:	4608      	mov	r0, r1
 800793a:	4611      	mov	r1, r2
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	f7fa fdaa 	bl	8002496 <_fstat>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	d102      	bne.n	800794c <_fstat_r+0x1c>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	b103      	cbz	r3, 800794c <_fstat_r+0x1c>
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	bd38      	pop	{r3, r4, r5, pc}
 800794e:	bf00      	nop
 8007950:	20003208 	.word	0x20003208

08007954 <_isatty_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4c06      	ldr	r4, [pc, #24]	; (8007970 <_isatty_r+0x1c>)
 8007958:	2300      	movs	r3, #0
 800795a:	4605      	mov	r5, r0
 800795c:	4608      	mov	r0, r1
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	f7fa fd9e 	bl	80024a0 <_isatty>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_isatty_r+0x1a>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	b103      	cbz	r3, 800796e <_isatty_r+0x1a>
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20003208 	.word	0x20003208

08007974 <_init>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr

08007980 <_fini>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	bf00      	nop
 8007984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007986:	bc08      	pop	{r3}
 8007988:	469e      	mov	lr, r3
 800798a:	4770      	bx	lr
